#!/usr/bin/env bash

#set -e

if [[ -z $1 ]]; then
  tests=$(find ./tests -printf '%P\n' | sort)
else
  tests=$@
fi

bin="./target/debug/bfcc"
execbin="./target/debug/bfexec"

cargo build --bin bfcc
cargo build --bin bfexec

for c_file in ${tests}; do
  if [[ $c_file != *.c ]]; then
    continue
  fi

  name=$(echo -n $c_file | sed -s 's/\(.*\).c/\1/' | sed -s 's/_/ /g')

  echo -n "...     $name"

  bc_file="$c_file.bc"
  clang -emit-llvm -c "./tests/$c_file" -o "./tests/$bc_file" 2> /dev/null
  if [[ $? != 0 ]]; then
    echo -e "\n========== \"$name\" clang compile failed =========="
    #exit 1;
    continue
  fi

  ll_file="$c_file.ll"
  clang -emit-llvm -S "./tests/$c_file" -o "./tests/$ll_file" 2> /dev/null
  if [[ $? != 0 ]]; then
    echo -e "\n========== \"$name\" clang compile failed =========="
    #exit 1;
    continue
  fi

  bf_file="$c_file.bf"

  out=$( ("${bin}" "./tests/$bc_file" > "./tests/$bf_file") 2>&1 )
  if [[ $? != 0 ]]; then
    echo -ne '\r'
    echo -e "      \e[31m✗\e[0m $name"

    echo
    echo "========== \"$name\" bf compile failed =========="
    echo "$out"
    echo

    #exit 1;
    continue
  fi


  conf=$(grep "TEST:" "./tests/$c_file" | sed -s 's/.*TEST:\(.*\)/\1/')

  input=$(echo "$conf" | jq -r '.input')

  expect_out=$(echo "$conf" | jq -r '.output')
  exec_out="$(echo -n $input | "${execbin}" "./tests/$bf_file")"

  if [[ "$expect_out" != "$exec_out" ]]; then
    echo -e "\n========== \"$name\" output mismatch =========="

    echo "expected: \"$expect_out\""
    echo -n "$expect_out" | xxd

    echo '------'

    echo "  actual: \"$exec_out\""
    echo -n "$exec_out" | xxd

    echo

    #exit 1;
    continue
  fi

  echo -ne '\r'
  echo -e "      \e[32m✓\e[0m $name"
done

