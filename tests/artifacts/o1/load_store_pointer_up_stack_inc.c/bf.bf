r9 >>>>>>>>>
+++++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>>>#main
+
>#main/b0
+
<<<<<<<[
    >#putstr
    [
        >>>>>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/putstr
            >>>>>>>>-
            l27 <<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_putstr
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%call_term_for_1
        >#B:%9
        >#%2_=_icmp_eq_i8*_%0__i8*_null(mult)
        >#%4_=_phi_i8*_{_i8*_%7__%call_term_for_1_}__{_i8*_%0__%1_}(mult)
        >#%5_=_ptrtoint_i8*_%4_to_i64(mult)
        >#%6_=_trunc_i64_%5_to_i8(mult)
        >#%7_=_getelementptr_i8*_%4__i64_1(mult)
        >#%8_=_icmp_eq_i8*_%7__i8*_null(mult)
        >#%0
        <<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>#arg_%0
            l2 <<
            mov0/20 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = icmp eq i8* %0_ i8* null
            >>>>>>>>>>>>[-]
            op_to_reg storing const value in temp address
            >>>>>>>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov19/21 <<<<[->>+<<]
            >>>>+
            <<<<<[
                -
                >>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<]
            >>>>>-
            <<<<<<<<<<<+
            >>>>>>>>>[
                [-]
                <<<<<<<<<[-]
            >>>>>>>>>]
            <[
                [-]
                <<<<<<<<[-]
            >>>>>>>>]
            br i1 %2_ label %9_ label %3
            doing phi stuff
            %4 = phi i8* _ i8* %7_ %call_term_for_1 __ _ i8* %0_ %1 _
            dup18/19/20 <<[->+>+<<]
            mov19/18 >[-<+>]
            <<<<<<[-]
            mov20/13 >>>>>>>[-<<<<<<<+>>>>>>>]
            <<<<<<<<<<<<+
            >>>>[
                -
                <<<<-
                >>>+
                #B:putstr/9_true
            >]
            <<<<[
                -
                >+
                #B:putstr/3_false
            <]
        <]
        >>#B:%3
        [
            -
            %4 = phi i8* _ i8* %7_ %call_term_for_1 __ _ i8* %0_ %1 _
            %5 = ptrtoint i8* %4 to i64
            >>>>>[-]
            dup13/21/22 <[->>>>>>>>+>+<<<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            mov22/14 >[-<<<<<<<<+>>>>>>>>]
            %6 = trunc i64 %5 to i8
            <<<<<<<[-]
            dup14/19/20 <[->>>>>+>+<<<<<<]
            mov19/14 >>>>>[-<<<<<+>>>>>]
            mov20/15 >[-<<<<<+>>>>>]
            call @putchar(i8 %6)
            enable next block when we return
            <<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            dup15/19/20 >>>>>[->>>>+>+<<<<<]
            mov19/15 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %7 = getelementptr i8* %4_ i64 1
            >>>>>>[-]
            dup13/19/20 <<<[->>>>>>+>+<<<<<<<]
            mov19/13 >>>>>>[-<<<<<<+>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov20/16 <[-<<<<+>>>>]
            >[
                -
                <<<<<+
            >>>>>]
            %8 = icmp eq i8* %7_ i8* null
            <<<<[-]
            dup16/19/20 <[->>>+>+<<<<]
            mov19/16 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov21/24 <<<<<[->>>+<<<]
            >>>>>+
            <<<<<<[
                -
                >>+
                >>[
                    -
                    <<-
                    r1 >
                >>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<]
            >>>>>>-
            <<<<<<<<<+
            >>>>>>>[
                [-]
                <<<<<<<[-]
            >>>>>>>]
            <<[
                [-]
                <<<<<[-]
            >>>>>]
            br i1 %8_ label %9_ label %3
            doing phi stuff
            %4 = phi i8* _ i8* %7_ %call_term_for_1 __ _ i8* %0_ %1 _
            dup16/19/20 <<<<<<[->>>+>+<<<<]
            mov19/16 >>>[-<<<+>>>]
            <<<<<<[-]
            mov20/13 >>>>>>>[-<<<<<<<+>>>>>>>]
            <<<<<<<<<<<<+
            >>>>>>>>>[
                -
                <<<<<<<<<-
                >>>+
                #B:putstr/9_true
            >>>>>>]
            <<<<<<<<<[
                -
                >+
                #B:putstr/3_false
            <]
        >>]
        >#B:%9
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>>]
    <<<<<<<<<<]
    >#putdec
    [
        >>>>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/putdec
            >>>>>>>>-
            l48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_putdec
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%5
        >#B:%call_term_for_2
        >#B:%6
        >#B:%9
        >#B:%14
        >#B:%call_term_for_6
        >#B:%23
        >#%2_=_icmp_eq_i32_%0__i32_0(mult)
        >#%4_=_icmp_sgt_i32_%0__i32_10(mult)
        >#%7_=_phi_i32_{_i32_1__%3_}__{_i32_%11__%9_}(mult)
        >#%8_=_icmp_eq_i32_%7__i32_0(mult)
        >#%10_=_phi_i32_{_i32_%11__%9_}__{_i32_1__%3_}(mult)
        >#%11_=_mul_i32_%10__i32_10(mult)
        >#%12_=_sdiv_i32_%0__i32_%11(mult)
        >#%13_=_icmp_sgt_i32_%12__i32_10(mult)
        >#%15_=_phi_i32_{_i32_%20__%call_term_for_6_}__{_i32_%7__%6_}(mult)
        >#%16_=_sdiv_i32_%0__i32_%15(mult)
        >#%17_=_srem_i32_%16__i32_10(mult)
        >#%18_=_trunc_i32_%17_to_i8(mult)
        >#%19_=_add_i8_%18__i8_48(mult)
        >#%20_=_sdiv_i32_%15__i32_10(mult)
        >#%21_=_add_i32_%15__i32_9(mult)
        >#%22_=_icmp_ult_i32_%21__i32_19(mult)
        >#%0
        <<<<<<<<<<<<<<<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = icmp eq i32 %0_ i32 0
            >>>>>>>>>>>>>>>>>[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov34/36 <<<<[->>+<<]
            >>>>+
            <<<<<[
                -
                >>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<]
            >>>>>-
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>]
            br i1 %2_ label %5_ label %3
            <<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>[
                -
                <<<<<<<<<-
                >>+
                #B:putdec/5_true
            >>>>>>>]
            <<<<<<<<<[
                -
                >+
                #B:putdec/3_false
            <]
        <]
        >>#B:%3
        [
            -
            %4 = icmp sgt i32 %0_ i32 10
            >>>>>>>>>[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov33/35 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>]
            br i1 %4_ label %9_ label %6
            doing phi stuff
            %10 = phi i32 _ i32 %11_ %9 __ _ i32 1_ %3 _
            op_to_reg storing const value in temp address
            <#constop_1
            +
            <<<<<<<<<<<<<[-]
            mov34/21 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            doing phi stuff
            %7 = phi i32 _ i32 1_ %3 __ _ i32 %11_ %9 _
            op_to_reg storing const value in temp address
            >#constop_1
            +
            <<<<<<<<<<<<<<<<[-]
            mov35/19 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>[
                -
                <<<<<<<<<<-
                >>>>>+
                #B:putdec/9_true
            >>>>>]
            <<<<<<<<<<[
                -
                >>>>+
                #B:putdec/6_false
            <<<<]
        >]
        >#B:%5
        [
            -
            call @putchar(i8 48)
            enable next block when we return
            >#caller/%call_term_for_2
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            br label %23
            >>>>>+
        <<<<<]
        >#B:%6
        [
            -
            %7 = phi i32 _ i32 1_ %3 __ _ i32 %11_ %9 _
            %8 = icmp eq i32 %7_ i32 0
            >>>>>>>>[-]
            dup19/34/35 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov34/19 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov36/39 <<<<<[->>>+<<<]
            >>>>>+
            <<<<<<[
                -
                >>+
                >>[
                    -
                    <<-
                    r1 >
                >>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<]
            >>>>>>-
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>]
            <<[
                [-]
                <<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>]
            br i1 %8_ label %23_ label %14
            doing phi stuff
            %15 = phi i32 _ i32 %20_ %call_term_for_6 __ _ i32 %7_ %6 _
            dup19/34/35 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov34/19 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            <<<<<<<<<[-]
            mov35/25 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>[
                -
                <<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/23_true
            >>>>]
            <<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/14_false
            <<<<<<]
        >>>>]
        >#B:%9
        [
            -
            %10 = phi i32 _ i32 %11_ %9 __ _ i32 1_ %3 _
            %11 = mul i32 %10_ i32 10
            >>>>>>>>>[-]
            dup21/36/37 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov36/21 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            [
                -
                dup37/22/39 <[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>+<<]
                mov39/37 >>[-<<+>>]
            <]
            <[-]
            %12 = sdiv i32 %0_ i32 %11
            <<<<<<<<<<<<<<[-]
            dup22/34/35 <[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov34/22 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            dup35/37/38 >[->>+>+<<<]
            mov38/35 >>>[-<<<+>>>]
            <<<<<[
                >>>>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov33/42 <<<<<<<<<<<[->>>>>>>>>+<<<<<<<<<]
                >>>>>>>>>>>+
                <<<<<<<[
                    -
                    <+
                    >>>>>>[
                        -
                        <<<<<<-
                        r1 >
                    >>>>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<<<]
                >>>>>>>-
                <<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<-
                >>>>>>>>>>>>>]
                mov42/33 >>>>>>[-<<<<<<<<<+>>>>>>>>>]
                dup35/37/38 <<<<<<<[->>+>+<<<]
                mov38/35 >>>[-<<<+>>>]
            <<<<<]
            >>[-]
            >>[-]
            %13 = icmp sgt i32 %12_ i32 10
            <<<<<<<<<<<<<[-]
            dup23/34/35 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov34/23 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov35/37 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            br i1 %13_ label %9_ label %6
            doing phi stuff
            %10 = phi i32 _ i32 %11_ %9 __ _ i32 1_ %3 _
            dup22/34/35 <<<<<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov34/22 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            <<<<<<<<<<<<<[-]
            mov35/21 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            doing phi stuff
            %7 = phi i32 _ i32 1_ %3 __ _ i32 %11_ %9 _
            dup22/36/37 <<<<<<<<<<<<<[->>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<]
            mov36/22 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<[-]
            mov37/19 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<-
                >>>>>+
                #B:putdec/9_true
            >>>>>>>>>>>]
            <<<<<<<<<<<<<<<<[
                -
                >>>>+
                #B:putdec/6_false
            <<<<]
        >>>>>]
        >#B:%14
        [
            -
            %15 = phi i32 _ i32 %20_ %call_term_for_6 __ _ i32 %7_ %6 _
            %16 = sdiv i32 %0_ i32 %15
            >>>>>>>>>>>>[-]
            dup25/38/39 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov38/25 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            dup39/41/42 >[->>+>+<<<]
            mov42/39 >>>[-<<<+>>>]
            <<<<<<<<<[
                >>>>>>>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov33/45 <<<<<<<<<<<<<<[->>>>>>>>>>>>+<<<<<<<<<<<<]
                >>>>>>>>>>>>>>+
                <<<<<<[
                    -
                    <+
                    >>>>>[
                        -
                        <<<<<-
                        r1 >
                    >>>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<<]
                >>>>>>-
                <<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>]
                mov45/33 >>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
                dup39/41/42 <<<<<<[->>+>+<<<]
                mov42/39 >>>[-<<<+>>>]
            <<<<<<<<<]
            >>>>>>[-]
            >>[-]
            %17 = srem i32 %16_ i32 10
            <<<<<<<<<<<<<<[-]
            dup26/34/35 <[->>>>>>>>+>+<<<<<<<<<]
            mov34/26 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup36/38/39 [->>+>+<<<]
            mov39/36 >>>[-<<<+>>>]
            <<<<#op0
            >#op1
            >#neg
            <<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov35/40 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                mov40/35 <<[-<<<<<+>>>>>]
                dup36/38/39 <<<<[->>+>+<<<]
                mov39/36 >>>[-<<<+>>>]
            <<<<]
            >>#neg
            [
                mov38/27 >[-<<<<<<<<<<<+>>>>>>>>>>>]
                <[
                    -
                    <<<<<<<<<<-
                >>>>>>>>>>]
            ]
            mov37/27 [-<<<<<<<<<<+>>>>>>>>>>]
            <[-]
            >>[-]
            %18 = trunc i32 %17 to i8
            <<<<<<<<<<[-]
            dup27/34/35 <[->>>>>>>+>+<<<<<<<<]
            mov34/27 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov35/28 >[-<<<<<<<+>>>>>>>]
            %19 = add i8 %18_ i8 48
            <<<<<<[-]
            dup28/34/35 <[->>>>>>+>+<<<<<<<]
            mov34/28 >>>>>>[-<<<<<<+>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            mov35/29 <[-<<<<<<+>>>>>>]
            >[
                -
                <<<<<<<+
            >>>>>>>]
            call @putchar(i8 %19)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_6
            +
            putchar intrinsic
            dup29/34/35 >>>>>>>>>>>>>>[->>>>>+>+<<<<<<]
            mov34/29 >>>>>[-<<<<<+>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_6
        [
            -
            %20 = sdiv i32 %15_ i32 10
            >>>>>>>>>>>>>>>[-]
            dup25/34/35 <<<<<[->>>>>>>>>+>+<<<<<<<<<<]
            mov34/25 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup36/38/39 [->>+>+<<<]
            mov39/36 >>>[-<<<+>>>]
            <<<<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov35/40 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<<<+
                >>>>>>>[
                    [-]
                    <<<<<<<-
                >>>>>>>]
                mov40/35 >>>[-<<<<<+>>>>>]
                dup36/38/39 <<<<[->>+>+<<<]
                mov39/36 >>>[-<<<+>>>]
            <<<<]
            >[-]
            >>[-]
            %21 = add i32 %15_ i32 9
            <<<<<<<[-]
            dup25/34/35 <<<<<<[->>>>>>>>>+>+<<<<<<<<<<]
            mov34/25 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_9
            +++++++++
            mov35/31 <[-<<<<+>>>>]
            >[
                -
                <<<<<+
            >>>>>]
            %22 = icmp ult i32 %21_ i32 19
            <<<<[-]
            dup31/34/35 <[->>>+>+<<<<]
            mov34/31 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_19
            +++++++++++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov36/37 <<<[->+<]
            >>>+
            <<<<[
                -
                
                >>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<+
            >>>>>]
            br i1 %22_ label %23_ label %14
            doing phi stuff
            %15 = phi i32 _ i32 %20_ %call_term_for_6 __ _ i32 %7_ %6 _
            <<<<<<<<<<<<[-]
            mov30/25 >>>>>[-<<<<<+>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/23_true
            >>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/14_false
            <<<<<<]
        >>>>>>>]
        >#B:%23
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<]
    >#deref_int_inc
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/deref_int_inc
            >>>>>>>>-
            l29 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_deref_int_inc
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#%2_=_zext_i8_%0_to_i64(mult)
        >#%3_=_inttoptr_i64_%2_to_i32*(mult)
        >#%4_=_load_i32*_%3__align_4(mult)
        >#%5_=_add_i32_%4__i32_1(mult)
        >#%0
        <<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>#arg_%0
            l2 <<
            mov0/15 <<<<<<<<<<<<<[->>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<]
            r2 >>
            %2 = zext i8 %0 to i64
            >>>>>>>>>[-]
            mov13/9 >>>>[-<<<<+>>>>]
            %3 = inttoptr i64 %2 to i32*
            <<<[-]
            dup9/14/15 <[->>>>>+>+<<<<<<]
            mov14/9 >>>>>[-<<<<<+>>>>>]
            mov15/10 >[-<<<<<+>>>>>]
            %4 = load i32* %3_ align 4
            <<<<[-]
            dup10/14/16 <[->>>>+>>+<<<<<<]
            mov14/10 >>>>[-<<<<+>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<<#stackptr_tmp
            l1 <
            dup0/16/21 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov16/0 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov20/22 <<<<[->>+<<]
            >>>>+
            <<<<<<<<[
                -
                >>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<]
            >>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov22/19 [-<<<+>>>]
                <<<+++++++++++++++++
            >>>]
            <[
                if neg
                <<+++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                mov18/17 <[-<+>]
                mov19/18 >[-<+>]
                
                mov16/19 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup16/17/19 <<<[->+>>+<<<]
            mov17/16 >[-<+>]
            >[
                mov20/17 >>[-<<<+>>>]
                mov19/20 <[->+<]
                mov18/19 <[->+<]
                r1 >
                -
            ]
            mov19/11 >[-<<<<<<<<+>>>>>>>>]
            %5 = add i32 %4_ i32 1
            <<<<<<<[-]
            dup11/14/15 <[->>>+>+<<<<]
            mov14/11 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov15/12 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i32 %5_ i32* %3_ align 4
            dup12/14/15 <<<<[->>+>+<<<]
            mov14/12 >>[-<<+>>]
            dup10/16/17 <<<<[->>>>>>+>+<<<<<<<]
            mov16/10 >>>>>>[-<<<<<<+>>>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/23/24 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov23/0 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov23/26 <<<<<[->>>+<<<]
            >>>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov26/20 [-<<<<<<+>>>>>>]
                <<<<<<++++++++++++++++++
            >>>>>>]
            <[
                if neg
                <<<<<++++++++++++++++++
                >>>>>[
                    -
                    <<<<<-
                >>>>>]
            ]
            mov15/21 <<<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                mov19/18 <[-<+>]
                mov20/19 >[-<+>]
                mov21/20 >[-<+>]
                mov17/21 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            mov21/17 >>>>[-<<<<+>>>>]
            <<[
                mov22/18 >>>[-<<<<+>>>>]
                
                mov19/20 <<<[->+<]
                r1 >
                -
            ]
            ret void
            zero all function allocs
            <<<<<<<<<<[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>]
    <<<<]
    >#deref_int_inc2
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/deref_int_inc2
            >>>>>>>>-
            l29 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_deref_int_inc2
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#%2_=_zext_i8_%0_to_i64(mult)
        >#%3_=_inttoptr_i64_%2_to_i32*(mult)
        >#%4_=_load_i32*_%3__align_4(mult)
        >#%5_=_add_i32_%4__i32_1(mult)
        >#%0
        <<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>#arg_%0
            l2 <<
            mov0/15 <<<<<<<<<<<<<[->>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<]
            r2 >>
            %2 = zext i8 %0 to i64
            >>>>>>>>>[-]
            mov13/9 >>>>[-<<<<+>>>>]
            %3 = inttoptr i64 %2 to i32*
            <<<[-]
            dup9/14/15 <[->>>>>+>+<<<<<<]
            mov14/9 >>>>>[-<<<<<+>>>>>]
            mov15/10 >[-<<<<<+>>>>>]
            %4 = load i32* %3_ align 4
            <<<<[-]
            dup10/14/16 <[->>>>+>>+<<<<<<]
            mov14/10 >>>>[-<<<<+>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<<#stackptr_tmp
            l1 <
            dup0/16/21 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov16/0 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov20/22 <<<<[->>+<<]
            >>>>+
            <<<<<<<<[
                -
                >>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<]
            >>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov22/19 [-<<<+>>>]
                <<<+++++++++++++++++
            >>>]
            <[
                if neg
                <<+++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                mov18/17 <[-<+>]
                mov19/18 >[-<+>]
                
                mov16/19 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup16/17/19 <<<[->+>>+<<<]
            mov17/16 >[-<+>]
            >[
                mov20/17 >>[-<<<+>>>]
                mov19/20 <[->+<]
                mov18/19 <[->+<]
                r1 >
                -
            ]
            mov19/11 >[-<<<<<<<<+>>>>>>>>]
            %5 = add i32 %4_ i32 1
            <<<<<<<[-]
            dup11/14/15 <[->>>+>+<<<<]
            mov14/11 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov15/12 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i32 %5_ i32* %3_ align 4
            dup12/14/15 <<<<[->>+>+<<<]
            mov14/12 >>[-<<+>>]
            dup10/16/17 <<<<[->>>>>>+>+<<<<<<<]
            mov16/10 >>>>>>[-<<<<<<+>>>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/23/24 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov23/0 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov23/26 <<<<<[->>>+<<<]
            >>>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov26/20 [-<<<<<<+>>>>>>]
                <<<<<<++++++++++++++++++
            >>>>>>]
            <[
                if neg
                <<<<<++++++++++++++++++
                >>>>>[
                    -
                    <<<<<-
                >>>>>]
            ]
            mov15/21 <<<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                mov19/18 <[-<+>]
                mov20/19 >[-<+>]
                mov21/20 >[-<+>]
                mov17/21 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            mov21/17 >>>>[-<<<<+>>>>]
            <<[
                mov22/18 >>>[-<<<<+>>>>]
                
                mov19/20 <<<[->+<]
                r1 >
                -
            ]
            ret void
            zero all function allocs
            <<<<<<<<<<[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>]
    <<<]
    >#deref_int
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>>>-
            <<<<<#dead_fn_pad/deref_int
            >>>>>>>>-
            l27 <<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_deref_int
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#%2_=_zext_i8_%0_to_i64(mult)
        >#%3_=_inttoptr_i64_%2_to_i32*(mult)
        >#%4_=_load_i32*_%3__align_4(mult)
        >#%5_=_trunc_i32_%4_to_i8(mult)
        >#%0
        <<<<<<<<#B:%no_block0_call_for_deref_int
        [
            -
            copy up args
            >>>>>>>>#arg_%0
            l2 <<
            mov0/17 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = zext i8 %0 to i64
            >>[-]
            mov15/11 >>>>[-<<<<+>>>>]
            %3 = inttoptr i64 %2 to i32*
            <<<[-]
            dup11/16/17 <[->>>>>+>+<<<<<<]
            mov16/11 >>>>>[-<<<<<+>>>>>]
            mov17/12 >[-<<<<<+>>>>>]
            %4 = load i32* %3_ align 4
            <<<<[-]
            dup12/16/18 <[->>>>+>>+<<<<<<]
            mov16/12 >>>>[-<<<<+>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<<#stackptr_tmp
            l1 <
            dup0/18/23 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            mov18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov22/24 <<<<[->>+<<]
            >>>>+
            <<<<<<<<[
                -
                >>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<]
            >>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov24/21 [-<<<+>>>]
                <<<+++++++++++++++++++
            >>>]
            <[
                if neg
                <<+++++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                mov20/19 <[-<+>]
                mov21/20 >[-<+>]
                
                mov18/21 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup18/19/21 <<<[->+>>+<<<]
            mov19/18 >[-<+>]
            >[
                mov22/19 >>[-<<<+>>>]
                mov21/22 <[->+<]
                mov20/21 <[->+<]
                r1 >
                -
            ]
            mov21/13 >[-<<<<<<<<+>>>>>>>>]
            %5 = trunc i32 %4 to i8
            <<<<<<<[-]
            dup13/16/17 <[->>>+>+<<<<]
            mov16/13 >>>[-<<<+>>>]
            mov17/14 >[-<<<+>>>]
            call @putchar(i8 %5)
            enable next block when we return
            <<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup14/16/17 >>>>[->>+>+<<<]
            mov16/14 >>[-<<+>>]
            >.
            [-]
        <<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<-
            #dead_frame
            >>>>>-
            l1 <
            <<<<<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>]
    <<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>>>>-
            <<<<<<#dead_fn_pad/main
            >>>>>>>>-
            l22 <<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_main
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#alloc_%1
        >#%2_=_bitcast_i32*_%1_to_i8*(mult)
        >#%3_=_ptrtoint_i32*_%1_to_i64(mult)
        >#%4_=_trunc_i64_%3_to_i8(mult)
        <<<<<<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            %2 = bitcast i32* %1 to i8*
            >>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/20/21 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<]
            mov21/0 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++
            mov19/16 [-<<<+>>>]
            call @llvm_lifetime_start_p0i8(i64 4_ i8* %2)
            enable next block when we return
            <<<<<<<<<#caller/%call_term_for_0
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_0
        [
            -
            store i32 97_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<[-]
            mov19/15 >>>>[-<<<<+>>>>]
            %3 = ptrtoint i32* %1 to i64
            <<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/20/22 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<]
            mov22/0 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<<++++++++++++++++
            mov19/17 [-<<+>>]
            %4 = trunc i64 %3 to i8
            <[-]
            dup17/19/20 <[->>+>+<<<]
            mov19/17 >>[-<<+>>]
            mov20/18 >[-<<+>>]
            call @deref_int(i8 %4)
            enable next block when we return
            <<<<<<<<<#caller/%call_term_for_1
            +
            stack_width 22
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>#arg_0
            dup18/19/20 <<<<<<<<<<<<<[->+>+<<]
            mov19/18 >[-<+>]
            mov20/31 >[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++
            l1 <
            dup0/33/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov34/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r22 >>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<<<#===FRAME_deref_int
            +
            >>>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>]
        >#B:%call_term_for_1
        [
            -
            call @deref_int_inc(i8 %4)
            enable next block when we return
            >#caller/%call_term_for_2
            +
            stack_width 22
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>#arg_0
            dup18/19/20 <<<<<<<<<<<<<[->+>+<<]
            mov19/18 >[-<+>]
            mov20/31 >[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++
            l1 <
            dup0/33/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov34/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r22 >>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<<<#===FRAME_deref_int_inc
            +
            >>>#deref_int_inc
            +
            >>>>#deref_int_inc/b0
            +
        >>>>]
        >#B:%call_term_for_2
        [
            -
            call @deref_int(i8 %4)
            enable next block when we return
            >#caller/%call_term_for_3
            +
            stack_width 22
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>#arg_0
            dup18/19/20 <<<<<<<<<<<<<[->+>+<<]
            mov19/18 >[-<+>]
            mov20/31 >[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++
            l1 <
            dup0/33/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov34/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r22 >>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<<<#===FRAME_deref_int
            +
            >>>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>]
        >#B:%call_term_for_3
        [
            -
            call @llvm_lifetime_end_p0i8(i64 4_ i8* %2)
            enable next block when we return
            >#caller/%call_term_for_4
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>>>-
            l1 <
            <<<<<<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>>>>>>]
    <<<<<<<<]
<<<<<<]
