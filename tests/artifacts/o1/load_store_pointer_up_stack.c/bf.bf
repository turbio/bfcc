r8 >>>>>>>>
++++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>>#main
+
>#main/b0
+
<<<<<<[
    >#putstr
    [
        >>>>>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/putstr
            >>>>>>>-
            l26 <<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_putstr
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%call_term_for_1
        >#B:%9
        >#%2_=_icmp_eq_i8*_%0__i8*_null(mult)
        >#%4_=_phi_i8*_{_i8*_%7__%call_term_for_1_}__{_i8*_%0__%1_}(mult)
        >#%5_=_ptrtoint_i8*_%4_to_i64(mult)
        >#%6_=_trunc_i64_%5_to_i8(mult)
        >#%7_=_getelementptr_i8*_%4__i64_1(mult)
        >#%8_=_icmp_eq_i8*_%7__i8*_null(mult)
        >#%0
        <<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>#arg_%0
            l2 <<
            mov0/19 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = icmp eq i8* %0_ i8* null
            >>>>>>>>>>>[-]
            op_to_reg storing const value in temp address
            >>>>>>>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov18/20 <<<<[->>+<<]
            >>>>+
            <<<<<[
                -
                >>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<]
            >>>>>-
            <<<<<<<<<<<+
            >>>>>>>>>[
                [-]
                <<<<<<<<<[-]
            >>>>>>>>>]
            <[
                [-]
                <<<<<<<<[-]
            >>>>>>>>]
            br i1 %2_ label %9_ label %3
            doing phi stuff
            %4 = phi i8* _ i8* %7_ %call_term_for_1 __ _ i8* %0_ %1 _
            dup17/18/19 <<[->+>+<<]
            mov18/17 >[-<+>]
            <<<<<<[-]
            mov19/12 >>>>>>>[-<<<<<<<+>>>>>>>]
            <<<<<<<<<<<<+
            >>>>[
                -
                <<<<-
                >>>+
                #B:putstr/9_true
            >]
            <<<<[
                -
                >+
                #B:putstr/3_false
            <]
        <]
        >>#B:%3
        [
            -
            %4 = phi i8* _ i8* %7_ %call_term_for_1 __ _ i8* %0_ %1 _
            %5 = ptrtoint i8* %4 to i64
            >>>>>[-]
            dup12/20/21 <[->>>>>>>>+>+<<<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            mov21/13 >[-<<<<<<<<+>>>>>>>>]
            %6 = trunc i64 %5 to i8
            <<<<<<<[-]
            dup13/18/19 <[->>>>>+>+<<<<<<]
            mov18/13 >>>>>[-<<<<<+>>>>>]
            mov19/14 >[-<<<<<+>>>>>]
            call @putchar(i8 %6)
            enable next block when we return
            <<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            dup14/18/19 >>>>>[->>>>+>+<<<<<]
            mov18/14 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %7 = getelementptr i8* %4_ i64 1
            >>>>>>[-]
            dup12/18/19 <<<[->>>>>>+>+<<<<<<<]
            mov18/12 >>>>>>[-<<<<<<+>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov19/15 <[-<<<<+>>>>]
            >[
                -
                <<<<<+
            >>>>>]
            %8 = icmp eq i8* %7_ i8* null
            <<<<[-]
            dup15/18/19 <[->>>+>+<<<<]
            mov18/15 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov20/23 <<<<<[->>>+<<<]
            >>>>>+
            <<<<<<[
                -
                >>+
                >>[
                    -
                    <<-
                    r1 >
                >>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<]
            >>>>>>-
            <<<<<<<<<+
            >>>>>>>[
                [-]
                <<<<<<<[-]
            >>>>>>>]
            <<[
                [-]
                <<<<<[-]
            >>>>>]
            br i1 %8_ label %9_ label %3
            doing phi stuff
            %4 = phi i8* _ i8* %7_ %call_term_for_1 __ _ i8* %0_ %1 _
            dup15/18/19 <<<<<<[->>>+>+<<<<]
            mov18/15 >>>[-<<<+>>>]
            <<<<<<[-]
            mov19/12 >>>>>>>[-<<<<<<<+>>>>>>>]
            <<<<<<<<<<<<+
            >>>>>>>>>[
                -
                <<<<<<<<<-
                >>>+
                #B:putstr/9_true
            >>>>>>]
            <<<<<<<<<[
                -
                >+
                #B:putstr/3_false
            <]
        >>]
        >#B:%9
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>>]
    <<<<<<<<<]
    >#putdec
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/putdec
            >>>>>>>-
            l47 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_putdec
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%5
        >#B:%call_term_for_2
        >#B:%6
        >#B:%9
        >#B:%14
        >#B:%call_term_for_6
        >#B:%23
        >#%2_=_icmp_eq_i32_%0__i32_0(mult)
        >#%4_=_icmp_sgt_i32_%0__i32_10(mult)
        >#%7_=_phi_i32_{_i32_1__%3_}__{_i32_%11__%9_}(mult)
        >#%8_=_icmp_eq_i32_%7__i32_0(mult)
        >#%10_=_phi_i32_{_i32_%11__%9_}__{_i32_1__%3_}(mult)
        >#%11_=_mul_i32_%10__i32_10(mult)
        >#%12_=_sdiv_i32_%0__i32_%11(mult)
        >#%13_=_icmp_sgt_i32_%12__i32_10(mult)
        >#%15_=_phi_i32_{_i32_%20__%call_term_for_6_}__{_i32_%7__%6_}(mult)
        >#%16_=_sdiv_i32_%0__i32_%15(mult)
        >#%17_=_srem_i32_%16__i32_10(mult)
        >#%18_=_trunc_i32_%17_to_i8(mult)
        >#%19_=_add_i8_%18__i8_48(mult)
        >#%20_=_sdiv_i32_%15__i32_10(mult)
        >#%21_=_add_i32_%15__i32_9(mult)
        >#%22_=_icmp_ult_i32_%21__i32_19(mult)
        >#%0
        <<<<<<<<<<<<<<<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = icmp eq i32 %0_ i32 0
            >>>>>>>>>>>>>>>>[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov33/35 <<<<[->>+<<]
            >>>>+
            <<<<<[
                -
                >>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<]
            >>>>>-
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>]
            br i1 %2_ label %5_ label %3
            <<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>[
                -
                <<<<<<<<<-
                >>+
                #B:putdec/5_true
            >>>>>>>]
            <<<<<<<<<[
                -
                >+
                #B:putdec/3_false
            <]
        <]
        >>#B:%3
        [
            -
            %4 = icmp sgt i32 %0_ i32 10
            >>>>>>>>>[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov32/34 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>]
            br i1 %4_ label %9_ label %6
            doing phi stuff
            %10 = phi i32 _ i32 %11_ %9 __ _ i32 1_ %3 _
            op_to_reg storing const value in temp address
            <#constop_1
            +
            <<<<<<<<<<<<<[-]
            mov33/20 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            doing phi stuff
            %7 = phi i32 _ i32 1_ %3 __ _ i32 %11_ %9 _
            op_to_reg storing const value in temp address
            >#constop_1
            +
            <<<<<<<<<<<<<<<<[-]
            mov34/18 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>[
                -
                <<<<<<<<<<-
                >>>>>+
                #B:putdec/9_true
            >>>>>]
            <<<<<<<<<<[
                -
                >>>>+
                #B:putdec/6_false
            <<<<]
        >]
        >#B:%5
        [
            -
            call @putchar(i8 48)
            enable next block when we return
            >#caller/%call_term_for_2
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            br label %23
            >>>>>+
        <<<<<]
        >#B:%6
        [
            -
            %7 = phi i32 _ i32 1_ %3 __ _ i32 %11_ %9 _
            %8 = icmp eq i32 %7_ i32 0
            >>>>>>>>[-]
            dup18/33/34 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov33/18 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov35/38 <<<<<[->>>+<<<]
            >>>>>+
            <<<<<<[
                -
                >>+
                >>[
                    -
                    <<-
                    r1 >
                >>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<]
            >>>>>>-
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>]
            <<[
                [-]
                <<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>]
            br i1 %8_ label %23_ label %14
            doing phi stuff
            %15 = phi i32 _ i32 %20_ %call_term_for_6 __ _ i32 %7_ %6 _
            dup18/33/34 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov33/18 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            <<<<<<<<<[-]
            mov34/24 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>[
                -
                <<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/23_true
            >>>>]
            <<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/14_false
            <<<<<<]
        >>>>]
        >#B:%9
        [
            -
            %10 = phi i32 _ i32 %11_ %9 __ _ i32 1_ %3 _
            %11 = mul i32 %10_ i32 10
            >>>>>>>>>[-]
            dup20/35/36 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov35/20 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            [
                -
                dup36/21/38 <[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>+<<]
                mov38/36 >>[-<<+>>]
            <]
            <[-]
            %12 = sdiv i32 %0_ i32 %11
            <<<<<<<<<<<<<<[-]
            dup21/33/34 <[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov33/21 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            dup34/36/37 >[->>+>+<<<]
            mov37/34 >>>[-<<<+>>>]
            <<<<<[
                >>>>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov32/41 <<<<<<<<<<<[->>>>>>>>>+<<<<<<<<<]
                >>>>>>>>>>>+
                <<<<<<<[
                    -
                    <+
                    >>>>>>[
                        -
                        <<<<<<-
                        r1 >
                    >>>>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<<<]
                >>>>>>>-
                <<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<-
                >>>>>>>>>>>>>]
                mov41/32 >>>>>>[-<<<<<<<<<+>>>>>>>>>]
                dup34/36/37 <<<<<<<[->>+>+<<<]
                mov37/34 >>>[-<<<+>>>]
            <<<<<]
            >>[-]
            >>[-]
            %13 = icmp sgt i32 %12_ i32 10
            <<<<<<<<<<<<<[-]
            dup22/33/34 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov33/22 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov34/36 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            br i1 %13_ label %9_ label %6
            doing phi stuff
            %10 = phi i32 _ i32 %11_ %9 __ _ i32 1_ %3 _
            dup21/33/34 <<<<<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov33/21 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            <<<<<<<<<<<<<[-]
            mov34/20 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            doing phi stuff
            %7 = phi i32 _ i32 1_ %3 __ _ i32 %11_ %9 _
            dup21/35/36 <<<<<<<<<<<<<[->>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<]
            mov35/21 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<[-]
            mov36/18 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<-
                >>>>>+
                #B:putdec/9_true
            >>>>>>>>>>>]
            <<<<<<<<<<<<<<<<[
                -
                >>>>+
                #B:putdec/6_false
            <<<<]
        >>>>>]
        >#B:%14
        [
            -
            %15 = phi i32 _ i32 %20_ %call_term_for_6 __ _ i32 %7_ %6 _
            %16 = sdiv i32 %0_ i32 %15
            >>>>>>>>>>>>[-]
            dup24/37/38 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov37/24 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            dup38/40/41 >[->>+>+<<<]
            mov41/38 >>>[-<<<+>>>]
            <<<<<<<<<[
                >>>>>>>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov32/44 <<<<<<<<<<<<<<[->>>>>>>>>>>>+<<<<<<<<<<<<]
                >>>>>>>>>>>>>>+
                <<<<<<[
                    -
                    <+
                    >>>>>[
                        -
                        <<<<<-
                        r1 >
                    >>>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<<]
                >>>>>>-
                <<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>]
                mov44/32 >>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
                dup38/40/41 <<<<<<[->>+>+<<<]
                mov41/38 >>>[-<<<+>>>]
            <<<<<<<<<]
            >>>>>>[-]
            >>[-]
            %17 = srem i32 %16_ i32 10
            <<<<<<<<<<<<<<[-]
            dup25/33/34 <[->>>>>>>>+>+<<<<<<<<<]
            mov33/25 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup35/37/38 [->>+>+<<<]
            mov38/35 >>>[-<<<+>>>]
            <<<<#op0
            >#op1
            >#neg
            <<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov34/39 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                mov39/34 <<[-<<<<<+>>>>>]
                dup35/37/38 <<<<[->>+>+<<<]
                mov38/35 >>>[-<<<+>>>]
            <<<<]
            >>#neg
            [
                mov37/26 >[-<<<<<<<<<<<+>>>>>>>>>>>]
                <[
                    -
                    <<<<<<<<<<-
                >>>>>>>>>>]
            ]
            mov36/26 [-<<<<<<<<<<+>>>>>>>>>>]
            <[-]
            >>[-]
            %18 = trunc i32 %17 to i8
            <<<<<<<<<<[-]
            dup26/33/34 <[->>>>>>>+>+<<<<<<<<]
            mov33/26 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov34/27 >[-<<<<<<<+>>>>>>>]
            %19 = add i8 %18_ i8 48
            <<<<<<[-]
            dup27/33/34 <[->>>>>>+>+<<<<<<<]
            mov33/27 >>>>>>[-<<<<<<+>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            mov34/28 <[-<<<<<<+>>>>>>]
            >[
                -
                <<<<<<<+
            >>>>>>>]
            call @putchar(i8 %19)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_6
            +
            putchar intrinsic
            dup28/33/34 >>>>>>>>>>>>>>[->>>>>+>+<<<<<<]
            mov33/28 >>>>>[-<<<<<+>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_6
        [
            -
            %20 = sdiv i32 %15_ i32 10
            >>>>>>>>>>>>>>>[-]
            dup24/33/34 <<<<<[->>>>>>>>>+>+<<<<<<<<<<]
            mov33/24 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup35/37/38 [->>+>+<<<]
            mov38/35 >>>[-<<<+>>>]
            <<<<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov34/39 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<<<+
                >>>>>>>[
                    [-]
                    <<<<<<<-
                >>>>>>>]
                mov39/34 >>>[-<<<<<+>>>>>]
                dup35/37/38 <<<<[->>+>+<<<]
                mov38/35 >>>[-<<<+>>>]
            <<<<]
            >[-]
            >>[-]
            %21 = add i32 %15_ i32 9
            <<<<<<<[-]
            dup24/33/34 <<<<<<[->>>>>>>>>+>+<<<<<<<<<<]
            mov33/24 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_9
            +++++++++
            mov34/30 <[-<<<<+>>>>]
            >[
                -
                <<<<<+
            >>>>>]
            %22 = icmp ult i32 %21_ i32 19
            <<<<[-]
            dup30/33/34 <[->>>+>+<<<<]
            mov33/30 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_19
            +++++++++++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov35/36 <<<[->+<]
            >>>+
            <<<<[
                -
                
                >>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<+
            >>>>>]
            br i1 %22_ label %23_ label %14
            doing phi stuff
            %15 = phi i32 _ i32 %20_ %call_term_for_6 __ _ i32 %7_ %6 _
            <<<<<<<<<<<<[-]
            mov29/24 >>>>>[-<<<<<+>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/23_true
            >>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/14_false
            <<<<<<]
        >>>>>>>]
        >#B:%23
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<]
    >#deref_int_set
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/deref_int_set
            >>>>>>>-
            l26 <<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_deref_int_set
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int_set
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#%2_=_zext_i8_%0_to_i64(mult)
        >#%3_=_inttoptr_i64_%2_to_i32*(mult)
        >#%0
        <<<<<<#B:%no_block0_call_for_deref_int_set
        [
            -
            copy up args
            >>>>>>#arg_%0
            l2 <<
            mov0/14 <<<<<<<<<<<<[->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = zext i8 %0 to i64
            >>[-]
            mov12/10 >>[-<<+>>]
            %3 = inttoptr i64 %2 to i32*
            <[-]
            dup10/13/14 <[->>>+>+<<<<]
            mov13/10 >>>[-<<<+>>>]
            mov14/11 >[-<<<+>>>]
            store i32 98_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            <#constop_98
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup11/15/14 <<[->>>>+<+<<<]
            mov15/11 >>>>[-<<<<+>>>>]
            >#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/21/22 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<]
            mov21/0 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov21/23 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov23/18 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            mov13/19 <<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                mov17/16 <[-<+>]
                mov18/17 >[-<+>]
                mov19/18 >[-<+>]
                mov15/19 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            mov19/15 >>>>[-<<<<+>>>>]
            <<[
                mov20/16 >>>[-<<<<+>>>>]
                
                mov17/18 <<<[->+<]
                r1 >
                -
            ]
            call @putchar(i8 98)
            enable next block when we return
            <<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>#constop_98
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            <<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>]
    <<<<<<]
    >#deref_int
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/deref_int
            >>>>>>>-
            l26 <<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_deref_int
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#%2_=_zext_i8_%0_to_i64(mult)
        >#%3_=_inttoptr_i64_%2_to_i32*(mult)
        >#%4_=_load_i32*_%3__align_4(mult)
        >#%5_=_trunc_i32_%4_to_i8(mult)
        >#%0
        <<<<<<<<#B:%no_block0_call_for_deref_int
        [
            -
            copy up args
            >>>>>>>>#arg_%0
            l2 <<
            mov0/16 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = zext i8 %0 to i64
            >>[-]
            mov14/10 >>>>[-<<<<+>>>>]
            %3 = inttoptr i64 %2 to i32*
            <<<[-]
            dup10/15/16 <[->>>>>+>+<<<<<<]
            mov15/10 >>>>>[-<<<<<+>>>>>]
            mov16/11 >[-<<<<<+>>>>>]
            %4 = load i32* %3_ align 4
            <<<<[-]
            dup11/15/17 <[->>>>+>>+<<<<<<]
            mov15/11 >>>>[-<<<<+>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<<#stackptr_tmp
            l1 <
            dup0/17/22 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            mov17/0 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov21/23 <<<<[->>+<<]
            >>>>+
            <<<<<<<<[
                -
                >>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<]
            >>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov23/20 [-<<<+>>>]
                <<<++++++++++++++++++
            >>>]
            <[
                if neg
                <<++++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                mov19/18 <[-<+>]
                mov20/19 >[-<+>]
                
                mov17/20 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup17/18/20 <<<[->+>>+<<<]
            mov18/17 >[-<+>]
            >[
                mov21/18 >>[-<<<+>>>]
                mov20/21 <[->+<]
                mov19/20 <[->+<]
                r1 >
                -
            ]
            mov20/12 >[-<<<<<<<<+>>>>>>>>]
            %5 = trunc i32 %4 to i8
            <<<<<<<[-]
            dup12/15/16 <[->>>+>+<<<<]
            mov15/12 >>>[-<<<+>>>]
            mov16/13 >[-<<<+>>>]
            call @putchar(i8 %5)
            enable next block when we return
            <<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup13/15/16 >>>>[->>+>+<<<]
            mov15/13 >>[-<<+>>]
            >.
            [-]
        <<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>]
    <<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>>>>-
            <<<<<#dead_fn_pad/main
            >>>>>>>-
            l37 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_main
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#B:%call_term_for_6
        >#B:%call_term_for_7
        >#B:%call_term_for_8
        >#B:%call_term_for_9
        >#B:%call_term_for_10
        >#B:%call_term_for_11
        >#B:%call_term_for_12
        >#alloc_%1
        >#alloc_%2
        >#alloc_%3
        >#%4_=_bitcast_i32*_%1_to_i8*(mult)
        >#%5_=_bitcast_i32*_%2_to_i8*(mult)
        >#%6_=_bitcast_i32*_%3_to_i8*(mult)
        >#%7_=_ptrtoint_i32*_%1_to_i64(mult)
        >#%8_=_trunc_i64_%7_to_i8(mult)
        >#%9_=_ptrtoint_i32*_%2_to_i64(mult)
        >#%10_=_trunc_i64_%9_to_i8(mult)
        >#%11_=_ptrtoint_i32*_%3_to_i64(mult)
        >#%12_=_trunc_i64_%11_to_i8(mult)
        <<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            %4 = bitcast i32* %1 to i8*
            >>>>>>>>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++
            mov34/25 [-<<<<<<<<<+>>>>>>>>>]
            call @llvm_lifetime_start_p0i8(i64 4_ i8* %4)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_0
        [
            -
            store i32 112_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<<<[-]
            mov34/22 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            %5 = bitcast i32* %2 to i8*
            <<<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/35/37 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov37/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<<++++++++++++++++++++++++
            mov34/26 [-<<<<<<<<+>>>>>>>>]
            call @llvm_lifetime_start_p0i8(i64 4_ i8* %5)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_1
        [
            -
            store i32 116_ i32* %2_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>#constop_116
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<<[-]
            mov34/23 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            %6 = bitcast i32* %3 to i8*
            <<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++++
            mov34/27 [-<<<<<<<+>>>>>>>]
            call @llvm_lifetime_start_p0i8(i64 4_ i8* %6)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_2
        [
            -
            store i32 114_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>#constop_114
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<[-]
            mov34/24 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %7 = ptrtoint i32* %1 to i64
            <<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++
            mov34/28 [-<<<<<<+>>>>>>]
            %8 = trunc i64 %7 to i8
            <<<<<[-]
            dup28/34/35 <[->>>>>>+>+<<<<<<<]
            mov34/28 >>>>>>[-<<<<<<+>>>>>>]
            mov35/29 >[-<<<<<<+>>>>>>]
            call @deref_int(i8 %8)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            stack_width 37
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup29/34/35 <<<<<<<<<<<<<<<<[->>>>>+>+<<<<<<]
            mov34/29 >>>>>[-<<<<<+>>>>>]
            mov35/45 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/47/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov48/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r37 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>]
        >#B:%call_term_for_3
        [
            -
            %9 = ptrtoint i32* %2 to i64
            >>>>>>>>>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++++++
            mov34/30 [-<<<<+>>>>]
            %10 = trunc i64 %9 to i8
            <<<[-]
            dup30/34/35 <[->>>>+>+<<<<<]
            mov34/30 >>>>[-<<<<+>>>>]
            mov35/31 >[-<<<<+>>>>]
            call @deref_int(i8 %10)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            stack_width 37
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup31/34/35 <<<<<<<<<<<<<<[->>>+>+<<<<]
            mov34/31 >>>[-<<<+>>>]
            mov35/45 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/47/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov48/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r37 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>]
        >#B:%call_term_for_4
        [
            -
            %11 = ptrtoint i32* %3 to i64
            >>>>>>>>>>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++++
            mov34/32 [-<<+>>]
            %12 = trunc i64 %11 to i8
            <[-]
            dup32/34/35 <[->>+>+<<<]
            mov34/32 >>[-<<+>>]
            mov35/33 >[-<<+>>]
            call @deref_int(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_5
            +
            stack_width 37
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup33/34/35 <<<<<<<<<<<<[->+>+<<]
            mov34/33 >[-<+>]
            mov35/45 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/47/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov48/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r37 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>]
        >#B:%call_term_for_5
        [
            -
            call @deref_int_set(i8 %8)
            enable next block when we return
            >#caller/%call_term_for_6
            +
            stack_width 37
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup29/34/35 <<<<<<<<<<<<<<<<[->>>>>+>+<<<<<<]
            mov34/29 >>>>>[-<<<<<+>>>>>]
            mov35/45 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/47/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov48/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r37 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int_set
            +
            >>>#deref_int_set
            +
            >>>#deref_int_set/b0
            +
        >>>>>>>>]
        >#B:%call_term_for_6
        [
            -
            call @deref_int(i8 %8)
            enable next block when we return
            >#caller/%call_term_for_7
            +
            stack_width 37
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup29/34/35 <<<<<<<<<<<<<<<<[->>>>>+>+<<<<<<]
            mov34/29 >>>>>[-<<<<<+>>>>>]
            mov35/45 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/47/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov48/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r37 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>>>]
        >#B:%call_term_for_7
        [
            -
            call @deref_int(i8 %10)
            enable next block when we return
            >#caller/%call_term_for_8
            +
            stack_width 37
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup31/34/35 <<<<<<<<<<<<<<[->>>+>+<<<<]
            mov34/31 >>>[-<<<+>>>]
            mov35/45 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/47/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov48/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r37 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>>>>]
        >#B:%call_term_for_8
        [
            -
            call @deref_int(i8 %12)
            enable next block when we return
            >#caller/%call_term_for_9
            +
            stack_width 37
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup33/34/35 <<<<<<<<<<<<[->+>+<<]
            mov34/33 >[-<+>]
            mov35/45 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/47/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov48/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r37 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>>>>>]
        >#B:%call_term_for_9
        [
            -
            call @llvm_lifetime_end_p0i8(i64 4_ i8* %6)
            enable next block when we return
            >#caller/%call_term_for_10
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_10
        [
            -
            call @llvm_lifetime_end_p0i8(i64 4_ i8* %5)
            enable next block when we return
            >#caller/%call_term_for_11
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_11
        [
            -
            call @llvm_lifetime_end_p0i8(i64 4_ i8* %4)
            enable next block when we return
            >#caller/%call_term_for_12
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_12
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>>-
            l1 <
            <<<<<[-]
            r1 >
            l9 <<<<<<<<<
        >>>>>>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<]
<<<<<]
