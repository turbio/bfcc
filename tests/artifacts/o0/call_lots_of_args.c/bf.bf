r9 >>>>>>>>>
+++++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>>>#main
+
>#main/b0
+
<<<<<<<[
    >#putstr
    [
        >>>>>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/putstr
            >>>>>>>>-
            l28 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_putstr
        >#F:putstr
        >#F:putdec
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%6
        >#B:%call_term_for_2
        >#B:%11
        >#alloc_%2
        >#%4_=_load_i8**_%2__align_8(mult)
        >#%5_=_icmp_ne_i8*_%4__i8*_null(mult)
        >#%7_=_load_i8**_%2__align_8(mult)
        >#%8_=_ptrtoint_i8*_%7_to_i8(mult)
        >#%9_=_load_i8**_%2__align_8(mult)
        >#%10_=_getelementptr_i8*_%9__i32_1(mult)
        >#%0
        <<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/22 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i8*_ align 8
            store i8* %0_ i8** %2_ align 8
            >>>>>>>>>>>>>[-]
            mov20/13 >>>>>>>[-<<<<<<<+>>>>>>>]
            br label %3
            <<<<<<<<<<<+
        <<]
        >>#B:%3
        [
            -
            %4 = load i8** %2_ align 8
            >>>>>[-]
            dup13/14/21 <[->+>>>>>>>+<<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %5 = icmp ne i8* %4_ i8* null
            <<<<<<[-]
            dup14/22/21 <[->>>>>>>>+<+<<<<<<<]
            mov22/14 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov21/25 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<+
            >>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<+
            >>>>>>>>>]
            br i1 %5_ label %6_ label %11
            <<<<<<<<<<<<<<<<+
            >>>>>>>[
                -
                <<<<<<<-
                >>+
                #B:putstr/6_true
            >>>>>]
            <<<<<<<[
                -
                >>>>+
                #B:putstr/11_false
            <<<<]
        >]
        >#B:%6
        [
            -
            %7 = load i8** %2_ align 8
            >>>>>>[-]
            dup13/16/21 <<<[->>>+>>>>>+<<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %8 = ptrtoint i8* %7 to i8
            <<<<[-]
            dup16/21/22 <[->>>>>+>+<<<<<<]
            mov21/16 >>>>>[-<<<<<+>>>>>]
            mov22/17 >[-<<<<<+>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup17/21/22 >>>>>>[->>>>+>+<<<<<]
            mov21/17 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %9 = load i8** %2_ align 8
            >>>>>>>[-]
            dup13/18/21 <<<<<[->>>>>+>>>+<<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %10 = getelementptr i8* %9_ i32 1
            <<[-]
            dup18/21/22 <[->>>+>+<<<<]
            mov21/18 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov22/19 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i8* %10_ i8** %2_ align 8
            dup19/21/22 <<<<[->>+>+<<<]
            mov21/19 >>[-<<+>>]
            <<<<<<<<[-]
            mov22/13 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<+
        >>]
        >#B:%11
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<<<<]
    >#putdec
    [
        >>>>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/putdec
            >>>>>>>>-
            l51 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_putdec
        >#F:putstr
        >#F:putdec
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%6
        >#B:%call_term_for_1
        >#B:%7
        >#B:%8
        >#B:%13
        >#B:%16
        >#B:%17
        >#B:%20
        >#B:%call_term_for_8
        >#B:%29
        >#alloc_%2
        >#alloc_%3
        >#%4_=_load_i32*_%2__align_4(mult)
        >#%5_=_icmp_ne_i32_%4__i32_0(mult)
        >#%9_=_load_i32*_%2__align_4(mult)
        >#%10_=_load_i32*_%3__align_4(mult)
        >#%11_=_sdiv_i32_%9__i32_%10(mult)
        >#%12_=_icmp_sgt_i32_%11__i32_10(mult)
        >#%14_=_load_i32*_%3__align_4(mult)
        >#%15_=_mul_i32_%14__i32_10(mult)
        >#%18_=_load_i32*_%3__align_4(mult)
        >#%19_=_icmp_ne_i32_%18__i32_0(mult)
        >#%21_=_load_i32*_%2__align_4(mult)
        >#%22_=_load_i32*_%3__align_4(mult)
        >#%23_=_sdiv_i32_%21__i32_%22(mult)
        >#%24_=_srem_i32_%23__i32_10(mult)
        >#%25_=_add_i32_48__i32_%24(mult)
        >#%26_=_trunc_i32_%25_to_i8(mult)
        >#%27_=_load_i32*_%3__align_4(mult)
        >#%28_=_sdiv_i32_%27__i32_10(mult)
        >#%0
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/41 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            store i32 %0_ i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>[-]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %4 = load i32* %2_ align 4
            <<<<<<<<<<<<<<<<<<[-]
            dup19/21/40 <<[->>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %5 = icmp ne i32 %4_ i32 0
            <<<<<<<<<<<<<<<<<<[-]
            dup21/41/40 <[->>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<]
            mov41/21 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov40/44 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>]
            br i1 %5_ label %7_ label %6
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<-
                >>>+
                #B:putdec/7_true
            >>>>>>>>>>>]
            <<<<<<<<<<<<<<[
                -
                >+
                #B:putdec/6_false
            <]
        <]
        >>#B:%6
        [
            -
            call @putchar(i8 48)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            br label %29
            >>>>>>>>+
        <<<<<<<<]
        >#B:%7
        [
            -
            store i32 1_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_1
            +
            <<<<<<<<<<<<<<<<<<<<[-]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%8
        [
            -
            %9 = load i32* %2_ align 4
            >>>>>>>>>>>[-]
            dup19/23/40 <<<<[->>>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %10 = load i32* %3_ align 4
            <<<<<<<<<<<<<<<<[-]
            dup20/24/40 <<<<[->>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %11 = sdiv i32 %9_ i32 %10
            <<<<<<<<<<<<<<<[-]
            dup23/40/41 <<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov40/23 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            dup24/42/43 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov42/24 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            dup43/45/47 >[->>+>>+<<<<]
            mov47/43 >>>>[-<<<<+>>>>]
            <<<<<<[
                >>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov41/48 <<<<<<<<<[->>>>>>>+<<<<<<<]
                >>>>>>>>>+
                <<<<<[
                    -
                    <+
                    >>>>[
                        -
                        <<<<-
                        r1 >
                    >>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<]
                >>>>>-
                <<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>>>>>>]
                mov48/41 >>>>[-<<<<<<<+>>>>>>>]
                dup43/45/47 <<<<<[->>+>>+<<<<]
                mov47/43 >>>>[-<<<<+>>>>]
            <<<<<<]
            >>[-]
            >>[-]
            %12 = icmp sgt i32 %11_ i32 10
            <<<<<<<<<<<<<<<<<<<[-]
            dup25/40/41 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov40/25 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov41/43 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>]
            br i1 %12_ label %13_ label %16
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<-
                >>>>>+
                #B:putdec/13_true
            >>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/16_false
            <<<<<<]
        >>>>]
        >#B:%13
        [
            -
            %14 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup20/27/40 <<<<<<<[->>>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %15 = mul i32 %14_ i32 10
            <<<<<<<<<<<<[-]
            dup27/40/41 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov40/27 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            [
                -
                dup41/28/43 <[-<<<<<<<<<<<<<+>>>>>>>>>>>>>>>+<<]
                mov43/41 >>[-<<+>>]
            <]
            <[-]
            store i32 %15_ i32* %3_ align 4
            dup28/40/41 <<<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov40/28 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov41/20 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >]
        >#B:%16
        [
            -
            br label %17
            >+
        <]
        >#B:%17
        [
            -
            %18 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup20/29/40 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %19 = icmp ne i32 %18_ i32 0
            <<<<<<<<<<[-]
            dup29/40/41 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov40/29 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov41/44 <<<<<[->>>+<<<]
            >>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            br i1 %19_ label %20_ label %29
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/20_true
            >>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>+
                #B:putdec/29_false
            <<<<<<<<<<]
        >>>>>>>]
        >#B:%20
        [
            -
            %21 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>[-]
            dup19/31/40 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %22 = load i32* %3_ align 4
            <<<<<<<<[-]
            dup20/32/40 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %23 = sdiv i32 %21_ i32 %22
            <<<<<<<[-]
            dup31/40/41 <<[->>>>>>>>>+>+<<<<<<<<<<]
            mov40/31 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            dup32/42/43 <<<<<<<<[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov42/32 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            dup43/45/46 >[->>+>+<<<]
            mov46/43 >>>[-<<<+>>>]
            <<<<<[
                >>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov41/47 <<<<<<<<[->>>>>>+<<<<<<]
                >>>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<<<<<<<+
                >>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<-
                >>>>>>>>>>>]
                mov47/41 >>>[-<<<<<<+>>>>>>]
                dup43/45/46 <<<<[->>+>+<<<]
                mov46/43 >>>[-<<<+>>>]
            <<<<<]
            >>[-]
            >>[-]
            %24 = srem i32 %23_ i32 10
            <<<<<<<<<<<[-]
            dup33/40/41 <[->>>>>>>+>+<<<<<<<<]
            mov40/33 >>>>>>>[-<<<<<<<+>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup42/44/45 [->>+>+<<<]
            mov45/42 >>>[-<<<+>>>]
            <<<<#op0
            >#op1
            >#neg
            <<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov41/46 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                mov46/41 <<[-<<<<<+>>>>>]
                dup42/44/45 <<<<[->>+>+<<<]
                mov45/42 >>>[-<<<+>>>]
            <<<<]
            >>#neg
            [
                mov44/34 >[-<<<<<<<<<<+>>>>>>>>>>]
                <[
                    -
                    <<<<<<<<<-
                >>>>>>>>>]
            ]
            mov43/34 [-<<<<<<<<<+>>>>>>>>>]
            <[-]
            >>[-]
            %25 = add i32 48_ i32 %24
            <<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            dup34/41/42 <<<<<<[->>>>>>>+>+<<<<<<<<]
            mov41/34 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov40/35 <[-<<<<<+>>>>>]
            >>[
                -
                <<<<<<<+
            >>>>>>>]
            %26 = trunc i32 %25 to i8
            <<<<<<[-]
            dup35/40/41 <[->>>>>+>+<<<<<<]
            mov40/35 >>>>>[-<<<<<+>>>>>]
            mov41/36 >[-<<<<<+>>>>>]
            call @putchar(i8 %26)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_8
            +
            putchar intrinsic
            dup36/40/41 >>>>>>>>>>>>>>>>>>>[->>>>+>+<<<<<]
            mov40/36 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_8
        [
            -
            %27 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>[-]
            dup20/37/40 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %28 = sdiv i32 %27_ i32 10
            <<[-]
            dup37/40/41 <[->>>+>+<<<<]
            mov40/37 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup42/44/45 [->>+>+<<<]
            mov45/42 >>>[-<<<+>>>]
            <<<<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov41/46 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<+
                >>>>>[
                    [-]
                    <<<<<-
                >>>>>]
                mov46/41 >>>[-<<<<<+>>>>>]
                dup42/44/45 <<<<[->>+>+<<<]
                mov45/42 >>>[-<<<+>>>]
            <<<<]
            >[-]
            >>[-]
            store i32 %28_ i32* %3_ align 4
            dup38/40/41 <<<<<<[->>+>+<<<]
            mov40/38 >>[-<<+>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov41/20 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %17
            <<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>]
        >#B:%29
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<]
    >#three_args
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/three_args
            >>>>>>>>-
            l28 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_three_args
        >#F:putstr
        >#F:putdec
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_three_args
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#alloc_%4
        >#alloc_%5
        >#alloc_%6
        >#%7_=_load_i32*_%4__align_4(mult)
        >#%8_=_trunc_i32_%7_to_i8(mult)
        >#%9_=_load_i32*_%5__align_4(mult)
        >#%10_=_trunc_i32_%9_to_i8(mult)
        >#%11_=_load_i32*_%6__align_4(mult)
        >#%12_=_trunc_i32_%11_to_i8(mult)
        >#%0
        >#%1
        >#%2
        <<<<<<<<<<<<<<<<<#B:%no_block0_call_for_three_args
        [
            -
            copy up args
            >>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/24 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            mov0/26 <<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            mov0/28 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            br label %3
            >>>>>>>>>+
        <<]
        >>#B:%3
        [
            -
            %4 = alloca i32_ align 4
            %5 = alloca i32_ align 4
            %6 = alloca i32_ align 4
            store i32 %0_ i32* %4_ align 4
            >>>>[-]
            mov22/13 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            store i32 %1_ i32* %5_ align 4
            <<<<<<<<[-]
            mov23/14 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            store i32 %2_ i32* %6_ align 4
            <<<<<<<<[-]
            mov24/15 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            %7 = load i32* %4_ align 4
            <<<<<<<<[-]
            dup13/16/25 <<<[->>>+>>>>>>>>>+<<<<<<<<<<<<]
            mov25/13 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            %8 = trunc i32 %7 to i8
            <<<<<<<<[-]
            dup16/26/25 <[->>>>>>>>>>+<+<<<<<<<<<]
            mov26/16 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            mov25/17 <[-<<<<<<<<+>>>>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup17/25/27 >>>>>>>[->>>>>>>>+>>+<<<<<<<<<<]
            mov25/17 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            >>.
            [-]
        <<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            %9 = load i32* %5_ align 4
            >>>>>>>>[-]
            dup14/18/25 <<<<[->>>>+>>>>>>>+<<<<<<<<<<<]
            mov25/14 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            %10 = trunc i32 %9 to i8
            <<<<<<[-]
            dup18/25/26 <[->>>>>>>+>+<<<<<<<<]
            mov25/18 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov26/19 >[-<<<<<<<+>>>>>>>]
            call @putchar(i8 %10)
            enable next block when we return
            <<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            dup19/25/26 >>>>>>>>[->>>>>>+>+<<<<<<<]
            mov25/19 >>>>>>[-<<<<<<+>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %11 = load i32* %6_ align 4
            >>>>>>>>>[-]
            dup15/20/25 <<<<<[->>>>>+>>>>>+<<<<<<<<<<]
            mov25/15 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %12 = trunc i32 %11 to i8
            <<<<[-]
            dup20/25/26 <[->>>>>+>+<<<<<<]
            mov25/20 >>>>>[-<<<<<+>>>>>]
            mov26/21 >[-<<<<<+>>>>>]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup21/25/26 >>>>>>>>>[->>>>+>+<<<<<]
            mov25/21 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l13 <<<<<<<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<<]
    >#five_args
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/five_args
            >>>>>>>>-
            l38 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_five_args
        >#F:putstr
        >#F:putdec
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_five_args
        >#B:%ret_lading_pad
        >#B:%5
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#alloc_%6
        >#alloc_%7
        >#alloc_%8
        >#alloc_%9
        >#alloc_%10
        >#%11_=_load_i32*_%6__align_4(mult)
        >#%12_=_trunc_i32_%11_to_i8(mult)
        >#%13_=_load_i32*_%7__align_4(mult)
        >#%14_=_trunc_i32_%13_to_i8(mult)
        >#%15_=_load_i32*_%8__align_4(mult)
        >#%16_=_trunc_i32_%15_to_i8(mult)
        >#%17_=_load_i32*_%9__align_4(mult)
        >#%18_=_trunc_i32_%17_to_i8(mult)
        >#%19_=_load_i32*_%10__align_4(mult)
        >#%20_=_trunc_i32_%19_to_i8(mult)
        >#%0
        >#%1
        >#%2
        >#%3
        >#%4
        <<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_five_args
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/32 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            mov0/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            mov0/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%3
            l5 <<<<<
            mov0/38 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r5 >>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%4
            l6 <<<<<<
            mov0/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r6 >>>>>>
            br label %5
            >>>>>>>>>+
        <<]
        >>#B:%5
        [
            -
            %6 = alloca i32_ align 4
            %7 = alloca i32_ align 4
            %8 = alloca i32_ align 4
            %9 = alloca i32_ align 4
            %10 = alloca i32_ align 4
            store i32 %0_ i32* %6_ align 4
            >>>>>>[-]
            mov30/15 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            store i32 %1_ i32* %7_ align 4
            <<<<<<<<<<<<<<[-]
            mov31/16 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            store i32 %2_ i32* %8_ align 4
            <<<<<<<<<<<<<<[-]
            mov32/17 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            store i32 %3_ i32* %9_ align 4
            <<<<<<<<<<<<<<[-]
            mov33/18 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            store i32 %4_ i32* %10_ align 4
            <<<<<<<<<<<<<<[-]
            mov34/19 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            %11 = load i32* %6_ align 4
            <<<<<<<<<<<<<<[-]
            dup15/20/35 <<<<<[->>>>>+>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov35/15 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %12 = trunc i32 %11 to i8
            <<<<<<<<<<<<<<[-]
            dup20/36/35 <[->>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<]
            mov36/20 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            mov35/21 <[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup21/35/37 >>>>>>>>>>>[->>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<]
            mov35/21 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            >>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            %13 = load i32* %7_ align 4
            >>>>>>>>>>>>[-]
            dup16/22/35 <<<<<<[->>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            mov35/16 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            %14 = trunc i32 %13 to i8
            <<<<<<<<<<<<[-]
            dup22/35/36 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov35/22 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            mov36/23 >[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            call @putchar(i8 %14)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            dup23/35/36 >>>>>>>>>>>>[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov35/23 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %15 = load i32* %8_ align 4
            >>>>>>>>>>>>>[-]
            dup17/24/35 <<<<<<<[->>>>>>>+>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            mov35/17 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            %16 = trunc i32 %15 to i8
            <<<<<<<<<<[-]
            dup24/35/36 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov35/24 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            mov36/25 >[-<<<<<<<<<<<+>>>>>>>>>>>]
            call @putchar(i8 %16)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup25/35/36 >>>>>>>>>>>>>[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov35/25 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %17 = load i32* %9_ align 4
            >>>>>>>>>>>>>>[-]
            dup18/26/35 <<<<<<<<[->>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            mov35/18 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            %18 = trunc i32 %17 to i8
            <<<<<<<<[-]
            dup26/35/36 <[->>>>>>>>>+>+<<<<<<<<<<]
            mov35/26 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            mov36/27 >[-<<<<<<<<<+>>>>>>>>>]
            call @putchar(i8 %18)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            dup27/35/36 >>>>>>>>>>>>>>[->>>>>>>>+>+<<<<<<<<<]
            mov35/27 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_3
        [
            -
            %19 = load i32* %10_ align 4
            >>>>>>>>>>>>>>>[-]
            dup19/28/35 <<<<<<<<<[->>>>>>>>>+>>>>>>>+<<<<<<<<<<<<<<<<]
            mov35/19 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            %20 = trunc i32 %19 to i8
            <<<<<<[-]
            dup28/35/36 <[->>>>>>>+>+<<<<<<<<]
            mov35/28 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov36/29 >[-<<<<<<<+>>>>>>>]
            call @putchar(i8 %20)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            dup29/35/36 >>>>>>>>>>>>>>>[->>>>>>+>+<<<<<<<]
            mov35/29 >>>>>>[-<<<<<<+>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l15 <<<<<<<<<<<<<<<
        >>>>>>>>>>>>>>]
    <<<<<<<<<<]
    >#twelve_args
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>>>-
            <<<<<#dead_fn_pad/twelve_args
            >>>>>>>>-
            l66 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_twelve_args
        >#F:putstr
        >#F:putdec
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_twelve_args
        >#B:%ret_lading_pad
        >#B:%12
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#alloc_%13
        >#alloc_%14
        >#alloc_%15
        >#alloc_%16
        >#alloc_%17
        >#alloc_%18
        >#alloc_%19
        >#alloc_%20
        >#alloc_%21
        >#alloc_%22
        >#alloc_%23
        >#alloc_%24
        >#%25_=_load_i32*_%13__align_4(mult)
        >#%26_=_load_i32*_%14__align_4(mult)
        >#%27_=_load_i32*_%15__align_4(mult)
        >#%28_=_load_i32*_%16__align_4(mult)
        >#%29_=_load_i32*_%17__align_4(mult)
        >#%30_=_load_i32*_%18__align_4(mult)
        >#%31_=_load_i32*_%19__align_4(mult)
        >#%32_=_load_i32*_%20__align_4(mult)
        >#%33_=_load_i32*_%21__align_4(mult)
        >#%34_=_trunc_i32_%33_to_i8(mult)
        >#%35_=_load_i32*_%22__align_4(mult)
        >#%36_=_trunc_i32_%35_to_i8(mult)
        >#%37_=_load_i32*_%23__align_4(mult)
        >#%38_=_trunc_i32_%37_to_i8(mult)
        >#%39_=_load_i32*_%24__align_4(mult)
        >#%40_=_trunc_i32_%39_to_i8(mult)
        >#%0
        >#%1
        >#%2
        >#%3
        >#%4
        >#%5
        >#%6
        >#%7
        >#%8
        >#%9
        >#%10
        >#%11
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_twelve_args
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/46 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            mov0/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            mov0/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%3
            l5 <<<<<
            mov0/52 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r5 >>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%4
            l6 <<<<<<
            mov0/54 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r6 >>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%5
            l7 <<<<<<<
            mov0/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r7 >>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%6
            l8 <<<<<<<<
            mov0/58 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r8 >>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%7
            l9 <<<<<<<<<
            mov0/60 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r9 >>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%8
            l10 <<<<<<<<<<
            mov0/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r10 >>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%9
            l11 <<<<<<<<<<<
            mov0/64 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r11 >>>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%10
            l12 <<<<<<<<<<<<
            mov0/66 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r12 >>>>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%11
            l13 <<<<<<<<<<<<<
            mov0/68 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r13 >>>>>>>>>>>>>
            br label %12
            >>>>>>>>>+
        <<]
        >>#B:%12
        [
            -
            %13 = alloca i32_ align 4
            %14 = alloca i32_ align 4
            %15 = alloca i32_ align 4
            %16 = alloca i32_ align 4
            %17 = alloca i32_ align 4
            %18 = alloca i32_ align 4
            %19 = alloca i32_ align 4
            %20 = alloca i32_ align 4
            %21 = alloca i32_ align 4
            %22 = alloca i32_ align 4
            %23 = alloca i32_ align 4
            %24 = alloca i32_ align 4
            store i32 %0_ i32* %13_ align 4
            >>>>>>>[-]
            mov44/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %1_ i32* %14_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov45/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %2_ i32* %15_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov46/18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %3_ i32* %16_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov47/19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %4_ i32* %17_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov48/20 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %5_ i32* %18_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov49/21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %6_ i32* %19_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov50/22 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %7_ i32* %20_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov51/23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %8_ i32* %21_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov52/24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %9_ i32* %22_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov53/25 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %10_ i32* %23_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov54/26 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %11_ i32* %24_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov55/27 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %25 = load i32* %13_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup16/28/56 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %26 = load i32* %14_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup17/29/57 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov57/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %27 = load i32* %15_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup18/30/56 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            call @three_args(i32 %25_ i32 %26_ i32 %27)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            stack_width 66
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup28/56/58 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/28 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov58/77 >>[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>#arg_1
            dup29/57/59 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov57/29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov59/76 >>[->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>#arg_2
            dup30/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov60/30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov61/75 >[->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/79/80 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov80/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r66 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>>#caller/jump_pad_blk
            +
            r13 >>>>>>>>>>>>>
            <<<<<<<<#===FRAME_three_args
            +
            >>>#three_args
            +
            >>>>#three_args/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            %28 = load i32* %16_ align 4
            >>>>>>>>>>>>>>>>>>>>>[-]
            dup19/31/56 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %29 = load i32* %17_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup20/32/56 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/20 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %30 = load i32* %18_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<[-]
            dup21/33/56 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %31 = load i32* %19_ align 4
            <<<<<<<<<<<<<<<<<<<<<<[-]
            dup22/34/56 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/22 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %32 = load i32* %20_ align 4
            <<<<<<<<<<<<<<<<<<<<<[-]
            dup23/35/56 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            call @five_args(i32 %28_ i32 %29_ i32 %30_ i32 %31_ i32 %32)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            stack_width 66
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup31/56/57 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/31 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov57/79 >[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>#arg_1
            dup32/58/59 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov58/32 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov59/78 >[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>#arg_2
            dup33/60/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov60/33 >>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov62/77 >>[->>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>#arg_3
            dup34/61/63 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov61/34 >>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov63/76 >>[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>#arg_4
            dup35/64/65 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov64/35 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov65/75 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/81/82 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov82/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r66 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>>#caller/jump_pad_blk
            +
            r15 >>>>>>>>>>>>>>>
            <<<<<<<<#===FRAME_five_args
            +
            >>>>#five_args
            +
            >>>#five_args/b0
            +
        >>>]
        >#B:%call_term_for_1
        [
            -
            %33 = load i32* %21_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup24/36/56 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %34 = trunc i32 %33 to i8
            <<<<<<<<<<<<<<<<<<<[-]
            dup36/56/57 <[->>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<]
            mov56/36 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            mov57/37 >[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            call @putchar(i8 %34)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup37/56/57 >>>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<]
            mov56/37 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %35 = load i32* %22_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup25/38/56 <<<<<<<<<<<<<[->>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/25 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %36 = trunc i32 %35 to i8
            <<<<<<<<<<<<<<<<<[-]
            dup38/56/57 <[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov56/38 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            mov57/39 >[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            call @putchar(i8 %36)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            dup39/56/57 >>>>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov56/39 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_3
        [
            -
            %37 = load i32* %23_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup26/40/56 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/26 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %38 = trunc i32 %37 to i8
            <<<<<<<<<<<<<<<[-]
            dup40/56/57 <[->>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<]
            mov56/40 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            mov57/41 >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            call @putchar(i8 %38)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            dup41/56/57 >>>>>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov56/41 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_4
        [
            -
            %39 = load i32* %24_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup27/42/56 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/27 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %40 = trunc i32 %39 to i8
            <<<<<<<<<<<<<[-]
            dup42/56/57 <[->>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<]
            mov56/42 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            mov57/43 >[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            call @putchar(i8 %40)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_5
            +
            putchar intrinsic
            dup43/56/57 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov56/43 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_5
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>>-
            l1 <
            <<<<<[-]
            r1 >
            l22 <<<<<<<<<<<<<<<<<<<<<<
        >>>>>>>>>>>>>>>]
    <<<<<<<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>>>>-
            <<<<<<#dead_fn_pad/main
            >>>>>>>>-
            l27 <<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_main
        >#F:putstr
        >#F:putdec
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        <<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            call @three_args(i32 79_ i32 119_ i32 79)
            enable next block when we return
            >#caller/%call_term_for_0
            +
            stack_width 27
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<#constop_79
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov15/38 [->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>#arg_1
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<#constop_119
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov16/37 [->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>#arg_2
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<#constop_79
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov17/36 [->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/40/41 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov41/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r13 >>>>>>>>>>>>>
            <<<<<<<<#===FRAME_three_args
            +
            >>>#three_args
            +
            >>>>#three_args/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            call @putchar(i8 10)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>#constop_10
            ++++++++++
            .
            [-]
        <<<<<]
        >#B:%call_term_for_1
        [
            -
            call @five_args(i32 122_ i32 97_ i32 100_ i32 100_ i32 121)
            enable next block when we return
            >#caller/%call_term_for_2
            +
            stack_width 27
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<#constop_122
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov15/40 [->>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>>>#arg_1
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov16/39 [->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>>>#arg_2
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov18/38 [->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>>>>>#arg_3
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov17/37 [->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>>>>>>>#arg_4
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<#constop_121
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov19/36 [->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/42/43 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov43/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r15 >>>>>>>>>>>>>>>
            <<<<<<<<#===FRAME_five_args
            +
            >>>>#five_args
            +
            >>>#five_args/b0
            +
        >>>>]
        >#B:%call_term_for_2
        [
            -
            call @putchar(i8 10)
            enable next block when we return
            >#caller/%call_term_for_3
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            .
            [-]
        <<<]
        >#B:%call_term_for_3
        [
            -
            call @twelve_args(i32 108_ i32 109_ i32 97_ i32 111_ i32 109_ i32 121_ i32 100_ i32 117_ i32 100_ i32 101_ i32 33_ i32 63)
            enable next block when we return
            >#caller/%call_term_for_4
            +
            stack_width 27
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_108
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov15/47 [->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_1
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_109
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov16/46 [->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_2
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov17/45 [->>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_3
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<#constop_111
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov18/44 [->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>>>>>>>>>>>>>#arg_4
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<#constop_109
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov20/43 [->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 5
            >>>>>>>>>>>>>>>>>>>>>>#arg_5
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<#constop_121
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov19/42 [->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 6
            >>>>>>>>>>>>>>>>>>>>>>#arg_6
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov21/41 [->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            copy up arg 7
            >>>>>>>>>>>>>>>>>>>#arg_7
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<#constop_117
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov22/40 [->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 8
            >>>>>>>>>>>>>>>>>#arg_8
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov23/39 [->>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<]
            copy up arg 9
            >>>>>>>>>>>>>>>#arg_9
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<#constop_101
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov24/38 [->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            copy up arg 10
            >>>>>>>>>>>>>#arg_10
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<#constop_33
            +++++++++++++++++++++++++++++++++
            mov25/37 [->>>>>>>>>>>>+<<<<<<<<<<<<]
            copy up arg 11
            >>>>>>>>>>>#arg_11
            op_to_reg storing const value in temp address
            <<<<<<<<<<#constop_63
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            mov26/36 [->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/49/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r22 >>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<#===FRAME_twelve_args
            +
            >>>>>#twelve_args
            +
            >>#twelve_args/b0
            +
        >>>>>>]
        >#B:%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            <<<<<<<<<<<<<<-
            #dead_frame
            >>>>>>-
            l1 <
            <<<<<<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>>>>>>]
    <<<<<<<<]
<<<<<<]
