r8 >>>>>>>>
++++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>>#main
+
>#main/b0
+
<<<<<<[
    >#putstr
    [
        >>>>>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/putstr
            >>>>>>>-
            l27 <<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_putstr
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%6
        >#B:%call_term_for_2
        >#B:%11
        >#alloc_%2
        >#%4_=_load_i8**_%2__align_8(mult)
        >#%5_=_icmp_ne_i8*_%4__i8*_null(mult)
        >#%7_=_load_i8**_%2__align_8(mult)
        >#%8_=_ptrtoint_i8*_%7_to_i8(mult)
        >#%9_=_load_i8**_%2__align_8(mult)
        >#%10_=_getelementptr_i8*_%9__i32_1(mult)
        >#%0
        <<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/21 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i8*_ align 8
            store i8* %0_ i8** %2_ align 8
            >>>>>>>>>>>>[-]
            mov19/12 >>>>>>>[-<<<<<<<+>>>>>>>]
            br label %3
            <<<<<<<<<<<+
        <<]
        >>#B:%3
        [
            -
            %4 = load i8** %2_ align 8
            >>>>>[-]
            dup12/13/20 <[->+>>>>>>>+<<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %5 = icmp ne i8* %4_ i8* null
            <<<<<<[-]
            dup13/21/20 <[->>>>>>>>+<+<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov20/24 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<+
            >>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<+
            >>>>>>>>>]
            br i1 %5_ label %6_ label %11
            <<<<<<<<<<<<<<<<+
            >>>>>>>[
                -
                <<<<<<<-
                >>+
                #B:putstr/6_true
            >>>>>]
            <<<<<<<[
                -
                >>>>+
                #B:putstr/11_false
            <<<<]
        >]
        >#B:%6
        [
            -
            %7 = load i8** %2_ align 8
            >>>>>>[-]
            dup12/15/20 <<<[->>>+>>>>>+<<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %8 = ptrtoint i8* %7 to i8
            <<<<[-]
            dup15/20/21 <[->>>>>+>+<<<<<<]
            mov20/15 >>>>>[-<<<<<+>>>>>]
            mov21/16 >[-<<<<<+>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup16/20/21 >>>>>>[->>>>+>+<<<<<]
            mov20/16 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %9 = load i8** %2_ align 8
            >>>>>>>[-]
            dup12/17/20 <<<<<[->>>>>+>>>+<<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %10 = getelementptr i8* %9_ i32 1
            <<[-]
            dup17/20/21 <[->>>+>+<<<<]
            mov20/17 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov21/18 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i8* %10_ i8** %2_ align 8
            dup18/20/21 <<<<[->>+>+<<<]
            mov20/18 >>[-<<+>>]
            <<<<<<<<[-]
            mov21/12 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<+
        >>]
        >#B:%11
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>>>]
    <<<<<<<<<<]
    >#putdec
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/putdec
            >>>>>>>-
            l50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_putdec
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%6
        >#B:%call_term_for_1
        >#B:%7
        >#B:%8
        >#B:%13
        >#B:%16
        >#B:%17
        >#B:%20
        >#B:%call_term_for_8
        >#B:%29
        >#alloc_%2
        >#alloc_%3
        >#%4_=_load_i32*_%2__align_4(mult)
        >#%5_=_icmp_ne_i32_%4__i32_0(mult)
        >#%9_=_load_i32*_%2__align_4(mult)
        >#%10_=_load_i32*_%3__align_4(mult)
        >#%11_=_sdiv_i32_%9__i32_%10(mult)
        >#%12_=_icmp_sgt_i32_%11__i32_10(mult)
        >#%14_=_load_i32*_%3__align_4(mult)
        >#%15_=_mul_i32_%14__i32_10(mult)
        >#%18_=_load_i32*_%3__align_4(mult)
        >#%19_=_icmp_ne_i32_%18__i32_0(mult)
        >#%21_=_load_i32*_%2__align_4(mult)
        >#%22_=_load_i32*_%3__align_4(mult)
        >#%23_=_sdiv_i32_%21__i32_%22(mult)
        >#%24_=_srem_i32_%23__i32_10(mult)
        >#%25_=_add_i32_48__i32_%24(mult)
        >#%26_=_trunc_i32_%25_to_i8(mult)
        >#%27_=_load_i32*_%3__align_4(mult)
        >#%28_=_sdiv_i32_%27__i32_10(mult)
        >#%0
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            store i32 %0_ i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>[-]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %4 = load i32* %2_ align 4
            <<<<<<<<<<<<<<<<<<[-]
            dup18/20/39 <<[->>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %5 = icmp ne i32 %4_ i32 0
            <<<<<<<<<<<<<<<<<<[-]
            dup20/40/39 <[->>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov39/43 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>]
            br i1 %5_ label %7_ label %6
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<-
                >>>+
                #B:putdec/7_true
            >>>>>>>>>>>]
            <<<<<<<<<<<<<<[
                -
                >+
                #B:putdec/6_false
            <]
        <]
        >>#B:%6
        [
            -
            call @putchar(i8 48)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            br label %29
            >>>>>>>>+
        <<<<<<<<]
        >#B:%7
        [
            -
            store i32 1_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_1
            +
            <<<<<<<<<<<<<<<<<<<<[-]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%8
        [
            -
            %9 = load i32* %2_ align 4
            >>>>>>>>>>>[-]
            dup18/22/39 <<<<[->>>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %10 = load i32* %3_ align 4
            <<<<<<<<<<<<<<<<[-]
            dup19/23/39 <<<<[->>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %11 = sdiv i32 %9_ i32 %10
            <<<<<<<<<<<<<<<[-]
            dup22/39/40 <<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov39/22 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            dup23/41/42 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov41/23 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            dup42/44/46 >[->>+>>+<<<<]
            mov46/42 >>>>[-<<<<+>>>>]
            <<<<<<[
                >>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov40/47 <<<<<<<<<[->>>>>>>+<<<<<<<]
                >>>>>>>>>+
                <<<<<[
                    -
                    <+
                    >>>>[
                        -
                        <<<<-
                        r1 >
                    >>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<]
                >>>>>-
                <<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>>>>>>]
                mov47/40 >>>>[-<<<<<<<+>>>>>>>]
                dup42/44/46 <<<<<[->>+>>+<<<<]
                mov46/42 >>>>[-<<<<+>>>>]
            <<<<<<]
            >>[-]
            >>[-]
            %12 = icmp sgt i32 %11_ i32 10
            <<<<<<<<<<<<<<<<<<<[-]
            dup24/39/40 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov39/24 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov40/42 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>]
            br i1 %12_ label %13_ label %16
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<-
                >>>>>+
                #B:putdec/13_true
            >>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/16_false
            <<<<<<]
        >>>>]
        >#B:%13
        [
            -
            %14 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup19/26/39 <<<<<<<[->>>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %15 = mul i32 %14_ i32 10
            <<<<<<<<<<<<[-]
            dup26/39/40 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov39/26 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            [
                -
                dup40/27/42 <[-<<<<<<<<<<<<<+>>>>>>>>>>>>>>>+<<]
                mov42/40 >>[-<<+>>]
            <]
            <[-]
            store i32 %15_ i32* %3_ align 4
            dup27/39/40 <<<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov39/27 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >]
        >#B:%16
        [
            -
            br label %17
            >+
        <]
        >#B:%17
        [
            -
            %18 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup19/28/39 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %19 = icmp ne i32 %18_ i32 0
            <<<<<<<<<<[-]
            dup28/39/40 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov39/28 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov40/43 <<<<<[->>>+<<<]
            >>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            br i1 %19_ label %20_ label %29
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/20_true
            >>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>+
                #B:putdec/29_false
            <<<<<<<<<<]
        >>>>>>>]
        >#B:%20
        [
            -
            %21 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>[-]
            dup18/30/39 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %22 = load i32* %3_ align 4
            <<<<<<<<[-]
            dup19/31/39 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %23 = sdiv i32 %21_ i32 %22
            <<<<<<<[-]
            dup30/39/40 <<[->>>>>>>>>+>+<<<<<<<<<<]
            mov39/30 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            dup31/41/42 <<<<<<<<[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov41/31 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            dup42/44/45 >[->>+>+<<<]
            mov45/42 >>>[-<<<+>>>]
            <<<<<[
                >>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov40/46 <<<<<<<<[->>>>>>+<<<<<<]
                >>>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<<<<<<<+
                >>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<-
                >>>>>>>>>>>]
                mov46/40 >>>[-<<<<<<+>>>>>>]
                dup42/44/45 <<<<[->>+>+<<<]
                mov45/42 >>>[-<<<+>>>]
            <<<<<]
            >>[-]
            >>[-]
            %24 = srem i32 %23_ i32 10
            <<<<<<<<<<<[-]
            dup32/39/40 <[->>>>>>>+>+<<<<<<<<]
            mov39/32 >>>>>>>[-<<<<<<<+>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup41/43/44 [->>+>+<<<]
            mov44/41 >>>[-<<<+>>>]
            <<<<#op0
            >#op1
            >#neg
            <<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov40/45 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                mov45/40 <<[-<<<<<+>>>>>]
                dup41/43/44 <<<<[->>+>+<<<]
                mov44/41 >>>[-<<<+>>>]
            <<<<]
            >>#neg
            [
                mov43/33 >[-<<<<<<<<<<+>>>>>>>>>>]
                <[
                    -
                    <<<<<<<<<-
                >>>>>>>>>]
            ]
            mov42/33 [-<<<<<<<<<+>>>>>>>>>]
            <[-]
            >>[-]
            %25 = add i32 48_ i32 %24
            <<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            dup33/40/41 <<<<<<[->>>>>>>+>+<<<<<<<<]
            mov40/33 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov39/34 <[-<<<<<+>>>>>]
            >>[
                -
                <<<<<<<+
            >>>>>>>]
            %26 = trunc i32 %25 to i8
            <<<<<<[-]
            dup34/39/40 <[->>>>>+>+<<<<<<]
            mov39/34 >>>>>[-<<<<<+>>>>>]
            mov40/35 >[-<<<<<+>>>>>]
            call @putchar(i8 %26)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_8
            +
            putchar intrinsic
            dup35/39/40 >>>>>>>>>>>>>>>>>>>[->>>>+>+<<<<<]
            mov39/35 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_8
        [
            -
            %27 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>[-]
            dup19/36/39 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %28 = sdiv i32 %27_ i32 10
            <<[-]
            dup36/39/40 <[->>>+>+<<<<]
            mov39/36 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup41/43/44 [->>+>+<<<]
            mov44/41 >>>[-<<<+>>>]
            <<<<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov40/45 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<+
                >>>>>[
                    [-]
                    <<<<<-
                >>>>>]
                mov45/40 >>>[-<<<<<+>>>>>]
                dup41/43/44 <<<<[->>+>+<<<]
                mov44/41 >>>[-<<<+>>>]
            <<<<]
            >[-]
            >>[-]
            store i32 %28_ i32* %3_ align 4
            dup37/39/40 <<<<<<[->>+>+<<<]
            mov39/37 >>[-<<+>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %17
            <<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>]
        >#B:%29
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<]
    >#deref_int_set
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/deref_int_set
            >>>>>>>-
            l33 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_deref_int_set
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int_set
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#alloc_%2
        >#%3_=_load_i8*_%2__align_1(mult)
        >#%4_=_zext_i8_%3_to_i64(mult)
        >#%5_=_inttoptr_i64_%4_to_i32*(mult)
        >#%6_=_load_i8*_%2__align_1(mult)
        >#%7_=_zext_i8_%6_to_i64(mult)
        >#%8_=_inttoptr_i64_%7_to_i32*(mult)
        >#%9_=_load_i32*_%8__align_4(mult)
        >#%10_=_trunc_i32_%9_to_i8(mult)
        >#%0
        <<<<<<<<<<<<<#B:%no_block0_call_for_deref_int_set
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/21 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = alloca i8_ align 1
            store i8 %0_ i8* %2_ align 1
            >>[-]
            mov19/10 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            %3 = load i8* %2_ align 1
            <<<<<<<<[-]
            dup10/11/20 <[->+>>>>>>>>>+<<<<<<<<<<]
            mov20/10 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %4 = zext i8 %3 to i64
            <<<<<<<<[-]
            dup11/21/20 <[->>>>>>>>>>+<+<<<<<<<<<]
            mov21/11 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            mov20/12 <[-<<<<<<<<+>>>>>>>>]
            %5 = inttoptr i64 %4 to i32*
            <<<<<<<[-]
            dup12/20/22 <[->>>>>>>>+>>+<<<<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            mov22/13 >>[-<<<<<<<<<+>>>>>>>>>]
            store i32 98_ i32* %5_ align 4
            op_to_reg storing const value in temp address
            <<#constop_98
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup13/21/23 <<<<<<<[->>>>>>>>+>>+<<<<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >#stackptr
            <<<<<<#stackptr_tmp
            l1 <
            dup0/23/29 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>+>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov23/0 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov28/30 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov30/26 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            mov20/27 <<<<<<<<<[->>>>>>>+<<<<<<<]
            drive left! choo choo
            >>>>>>[
                mov25/24 <[-<+>]
                mov26/25 >[-<+>]
                mov27/26 >[-<+>]
                mov23/27 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            mov27/23 >>>>[-<<<<+>>>>]
            <<[
                mov28/24 >>>[-<<<<+>>>>]
                
                mov25/26 <<<[->+<]
                r1 >
                -
            ]
            %6 = load i8* %2_ align 1
            <<<<<<<<<<<[-]
            dup10/14/20 <<<<[->>>>+>>>>>>+<<<<<<<<<<]
            mov20/10 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %7 = zext i8 %6 to i64
            <<<<<[-]
            dup14/20/21 <[->>>>>>+>+<<<<<<<]
            mov20/14 >>>>>>[-<<<<<<+>>>>>>]
            mov21/15 >[-<<<<<<+>>>>>>]
            %8 = inttoptr i64 %7 to i32*
            <<<<<[-]
            dup15/20/21 <[->>>>>+>+<<<<<<]
            mov20/15 >>>>>[-<<<<<+>>>>>]
            mov21/16 >[-<<<<<+>>>>>]
            %9 = load i32* %8_ align 4
            <<<<[-]
            dup16/20/21 <[->>>>+>+<<<<<]
            mov20/16 >>>>[-<<<<+>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/26/27 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov26/0 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov26/28 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov28/24 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                mov23/22 <[-<+>]
                mov24/23 >[-<+>]
                
                mov21/24 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup21/22/24 <<<[->+>>+<<<]
            mov22/21 >[-<+>]
            >[
                mov25/22 >>[-<<<+>>>]
                mov24/25 <[->+<]
                mov23/24 <[->+<]
                r1 >
                -
            ]
            mov24/17 >[-<<<<<<<+>>>>>>>]
            %10 = trunc i32 %9 to i8
            <<<<<<[-]
            dup17/20/21 <[->>>+>+<<<<]
            mov20/17 >>>[-<<<+>>>]
            mov21/18 >[-<<<+>>>]
            call @putchar(i8 %10)
            enable next block when we return
            <<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup18/20/21 >>>>>>>>>[->>+>+<<<]
            mov20/18 >>[-<<+>>]
            >.
            [-]
        <<<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>]
    <<<<<<]
    >#deref_int
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/deref_int
            >>>>>>>-
            l28 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_deref_int
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#alloc_%2
        >#%3_=_load_i8*_%2__align_1(mult)
        >#%4_=_zext_i8_%3_to_i64(mult)
        >#%5_=_inttoptr_i64_%4_to_i32*(mult)
        >#%6_=_load_i32*_%5__align_4(mult)
        >#%7_=_trunc_i32_%6_to_i8(mult)
        >#%0
        <<<<<<<<<<#B:%no_block0_call_for_deref_int
        [
            -
            copy up args
            >>>>>>>>>>#arg_%0
            l2 <<
            mov0/18 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = alloca i8_ align 1
            store i8 %0_ i8* %2_ align 1
            >>[-]
            mov16/10 >>>>>>[-<<<<<<+>>>>>>]
            %3 = load i8* %2_ align 1
            <<<<<[-]
            dup10/11/17 <[->+>>>>>>+<<<<<<<]
            mov17/10 >>>>>>>[-<<<<<<<+>>>>>>>]
            %4 = zext i8 %3 to i64
            <<<<<[-]
            dup11/18/17 <[->>>>>>>+<+<<<<<<]
            mov18/11 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov17/12 <[-<<<<<+>>>>>]
            %5 = inttoptr i64 %4 to i32*
            <<<<[-]
            dup12/17/19 <[->>>>>+>>+<<<<<<<]
            mov17/12 >>>>>[-<<<<<+>>>>>]
            mov19/13 >>[-<<<<<<+>>>>>>]
            %6 = load i32* %5_ align 4
            <<<<<[-]
            dup13/17/18 <[->>>>+>+<<<<<]
            mov17/13 >>>>[-<<<<+>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<#stackptr_tmp
            l1 <
            dup0/20/24 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov20/0 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov23/25 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov25/22 [-<<<+>>>]
                <<<++++++++++++++++++++
            >>>]
            <[
                if neg
                <<++++++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                mov21/20 <[-<+>]
                mov22/21 >[-<+>]
                
                mov19/22 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup19/20/22 <<<[->+>>+<<<]
            mov20/19 >[-<+>]
            >[
                mov23/20 >>[-<<<+>>>]
                mov22/23 <[->+<]
                mov21/22 <[->+<]
                r1 >
                -
            ]
            mov22/14 >[-<<<<<<<<+>>>>>>>>]
            %7 = trunc i32 %6 to i8
            <<<<<<<[-]
            dup14/17/18 <[->>>+>+<<<<]
            mov17/14 >>>[-<<<+>>>]
            mov18/15 >[-<<<+>>>]
            call @putchar(i8 %7)
            enable next block when we return
            <<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup15/17/18 >>>>>>[->>+>+<<<]
            mov17/15 >>[-<<+>>]
            >.
            [-]
        <<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>]
    <<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>>>>-
            <<<<<#dead_fn_pad/main
            >>>>>>>-
            l29 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_main
        >#F:putstr
        >#F:putdec
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#B:%call_term_for_6
        >#alloc_%1
        >#alloc_%2
        >#alloc_%3
        >#%4_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%5_=_ptrtoint_i32*_%2_to_i8(mult)
        >#%6_=_ptrtoint_i32*_%3_to_i8(mult)
        >#%7_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%8_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%9_=_ptrtoint_i32*_%2_to_i8(mult)
        >#%10_=_ptrtoint_i32*_%3_to_i8(mult)
        <<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            store i32 112_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<[-]
            mov26/16 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            store i32 116_ i32* %2_ align 4
            op_to_reg storing const value in temp address
            >#constop_116
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<[-]
            mov27/17 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            store i32 114_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            <#constop_114
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<[-]
            mov26/18 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %4 = ptrtoint i32* %1 to i8
            <<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/27/29 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov29/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<<+++++++++++++++++
            mov26/19 [-<<<<<<<+>>>>>>>]
            call @deref_int(i8 %4)
            enable next block when we return
            <<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            stack_width 29
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup19/26/27 <<<<<<<<<<<<<<<<<<[->>>>>>>+>+<<<<<<<<]
            mov26/19 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov27/37 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            %5 = ptrtoint i32* %2 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/27/28 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++
            mov26/20 [-<<<<<<+>>>>>>]
            call @deref_int(i8 %5)
            enable next block when we return
            <<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            stack_width 29
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup20/26/27 <<<<<<<<<<<<<<<<<[->>>>>>+>+<<<<<<<]
            mov26/20 >>>>>>[-<<<<<<+>>>>>>]
            mov27/37 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>]
        >#B:%call_term_for_1
        [
            -
            %6 = ptrtoint i32* %3 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/27/28 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++
            mov26/21 [-<<<<<+>>>>>]
            call @deref_int(i8 %6)
            enable next block when we return
            <<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            stack_width 29
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup21/26/27 <<<<<<<<<<<<<<<<[->>>>>+>+<<<<<<]
            mov26/21 >>>>>[-<<<<<+>>>>>]
            mov27/37 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>]
        >#B:%call_term_for_2
        [
            -
            %7 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/27/28 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++
            mov26/22 [-<<<<+>>>>]
            call @deref_int_set(i8 %7)
            enable next block when we return
            <<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            stack_width 29
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup22/26/27 <<<<<<<<<<<<<<<[->>>>+>+<<<<<]
            mov26/22 >>>>[-<<<<+>>>>]
            mov27/37 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int_set
            +
            >>>#deref_int_set
            +
            >>>#deref_int_set/b0
            +
        >>>>>]
        >#B:%call_term_for_3
        [
            -
            %8 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/27/28 <<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++
            mov26/23 [-<<<+>>>]
            call @deref_int(i8 %8)
            enable next block when we return
            <<<<<<<<<<<<<#caller/%call_term_for_4
            +
            stack_width 29
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup23/26/27 <<<<<<<<<<<<<<[->>>+>+<<<<]
            mov26/23 >>>[-<<<+>>>]
            mov27/37 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>]
        >#B:%call_term_for_4
        [
            -
            %9 = ptrtoint i32* %2 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/27/28 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++
            mov26/24 [-<<+>>]
            call @deref_int(i8 %9)
            enable next block when we return
            <<<<<<<<<<<<#caller/%call_term_for_5
            +
            stack_width 29
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup24/26/27 <<<<<<<<<<<<<[->>+>+<<<]
            mov26/24 >>[-<<+>>]
            mov27/37 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>]
        >#B:%call_term_for_5
        [
            -
            %10 = ptrtoint i32* %3 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/27/28 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++
            mov26/25 [-<+>]
            call @deref_int(i8 %10)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_6
            +
            stack_width 29
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup25/26/27 <<<<<<<<<<<<[->+>+<<]
            mov26/25 >[-<+>]
            mov27/37 >[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r29 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r10 >>>>>>>>>>
            <<<<<<<#===FRAME_deref_int
            +
            >>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>>]
        >#B:%call_term_for_6
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>>-
            l1 <
            <<<<<[-]
            r1 >
            l9 <<<<<<<<<
        >>>>>>>>>>>>>>>]
    <<<<<<<<<<]
<<<<<]
