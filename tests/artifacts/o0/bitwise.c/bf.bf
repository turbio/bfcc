+++++++++++++++++++++++++++++++++++++++++++++++
r1 >

r1 >
r6 >>>>>>
++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>#main
+
>#main/b0
+
<<<<[
    >#putstr
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/putstr
            >>>>>-
            l25 <<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<#mainloop_putstr
        >#F:putstr
        >#F:putdec
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%6
        >#B:%call_term_for_2
        >#B:%11
        >#alloc_%2
        >#%4_=_load_i8**_%2__align_8(mult)
        >#%5_=_icmp_ne_i8*_%4__i8*_null(mult)
        >#%7_=_load_i8**_%2__align_8(mult)
        >#%8_=_ptrtoint_i8*_%7_to_i8(mult)
        >#%9_=_load_i8**_%2__align_8(mult)
        >#%10_=_getelementptr_i8*_%9__i32_1(mult)
        >#%0
        <<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/19 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i8*_ align 8
            store i8* %0_ i8** %2_ align 8
            >>>>>>>>>>[-]
            mov17/10 >>>>>>>[-<<<<<<<+>>>>>>>]
            br label %3
            <<<<<<<<<<<+
        <<]
        >>#B:%3
        [
            -
            %4 = load i8** %2_ align 8
            >>>>>[-]
            dup10/11/18 <[->+>>>>>>>+<<<<<<<<]
            mov18/10 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %5 = icmp ne i8* %4_ i8* null
            <<<<<<[-]
            dup11/19/18 <[->>>>>>>>+<+<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov18/22 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<+
            >>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<+
            >>>>>>>>>]
            br i1 %5_ label %6_ label %11
            <<<<<<<<<<<<<<<<+
            >>>>>>>[
                -
                <<<<<<<-
                >>+
                #B:putstr/6_true
            >>>>>]
            <<<<<<<[
                -
                >>>>+
                #B:putstr/11_false
            <<<<]
        >]
        >#B:%6
        [
            -
            %7 = load i8** %2_ align 8
            >>>>>>[-]
            dup10/13/18 <<<[->>>+>>>>>+<<<<<<<<]
            mov18/10 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %8 = ptrtoint i8* %7 to i8
            <<<<[-]
            dup13/18/19 <[->>>>>+>+<<<<<<]
            mov18/13 >>>>>[-<<<<<+>>>>>]
            mov19/14 >[-<<<<<+>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup14/18/19 >>>>>>[->>>>+>+<<<<<]
            mov18/14 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %9 = load i8** %2_ align 8
            >>>>>>>[-]
            dup10/15/18 <<<<<[->>>>>+>>>+<<<<<<<<]
            mov18/10 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %10 = getelementptr i8* %9_ i32 1
            <<[-]
            dup15/18/19 <[->>>+>+<<<<]
            mov18/15 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov19/16 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i8* %10_ i8** %2_ align 8
            dup16/18/19 <<<<[->>+>+<<<]
            mov18/16 >>[-<<+>>]
            <<<<<<<<[-]
            mov19/10 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<+
        >>]
        >#B:%11
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>>>]
    <<<<<<<<]
    >#putdec
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/putdec
            >>>>>-
            l48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<#mainloop_putdec
        >#F:putstr
        >#F:putdec
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%6
        >#B:%call_term_for_1
        >#B:%7
        >#B:%8
        >#B:%13
        >#B:%16
        >#B:%17
        >#B:%20
        >#B:%call_term_for_8
        >#B:%29
        >#alloc_%2
        >#alloc_%3
        >#%4_=_load_i32*_%2__align_4(mult)
        >#%5_=_icmp_ne_i32_%4__i32_0(mult)
        >#%9_=_load_i32*_%2__align_4(mult)
        >#%10_=_load_i32*_%3__align_4(mult)
        >#%11_=_sdiv_i32_%9__i32_%10(mult)
        >#%12_=_icmp_sgt_i32_%11__i32_10(mult)
        >#%14_=_load_i32*_%3__align_4(mult)
        >#%15_=_mul_i32_%14__i32_10(mult)
        >#%18_=_load_i32*_%3__align_4(mult)
        >#%19_=_icmp_ne_i32_%18__i32_0(mult)
        >#%21_=_load_i32*_%2__align_4(mult)
        >#%22_=_load_i32*_%3__align_4(mult)
        >#%23_=_sdiv_i32_%21__i32_%22(mult)
        >#%24_=_srem_i32_%23__i32_10(mult)
        >#%25_=_add_i32_48__i32_%24(mult)
        >#%26_=_trunc_i32_%25_to_i8(mult)
        >#%27_=_load_i32*_%3__align_4(mult)
        >#%28_=_sdiv_i32_%27__i32_10(mult)
        >#%0
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/38 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            store i32 %0_ i32* %2_ align 4
            >>>>>>>>>>>>>>>>[-]
            mov36/16 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %4 = load i32* %2_ align 4
            <<<<<<<<<<<<<<<<<<[-]
            dup16/18/37 <<[->>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov37/16 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %5 = icmp ne i32 %4_ i32 0
            <<<<<<<<<<<<<<<<<<[-]
            dup18/38/37 <[->>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov37/41 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>]
            br i1 %5_ label %7_ label %6
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<-
                >>>+
                #B:putdec/7_true
            >>>>>>>>>>>]
            <<<<<<<<<<<<<<[
                -
                >+
                #B:putdec/6_false
            <]
        <]
        >>#B:%6
        [
            -
            call @putchar(i8 48)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            br label %29
            >>>>>>>>+
        <<<<<<<<]
        >#B:%7
        [
            -
            store i32 1_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_1
            +
            <<<<<<<<<<<<<<<<<<<<[-]
            mov37/17 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%8
        [
            -
            %9 = load i32* %2_ align 4
            >>>>>>>>>>>[-]
            dup16/20/37 <<<<[->>>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov37/16 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %10 = load i32* %3_ align 4
            <<<<<<<<<<<<<<<<[-]
            dup17/21/37 <<<<[->>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov37/17 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %11 = sdiv i32 %9_ i32 %10
            <<<<<<<<<<<<<<<[-]
            dup20/37/38 <<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov37/20 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            dup21/39/40 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov39/21 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            dup40/42/44 >[->>+>>+<<<<]
            mov44/40 >>>>[-<<<<+>>>>]
            <<<<<<[
                >>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov38/45 <<<<<<<<<[->>>>>>>+<<<<<<<]
                >>>>>>>>>+
                <<<<<[
                    -
                    <+
                    >>>>[
                        -
                        <<<<-
                        r1 >
                    >>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<]
                >>>>>-
                <<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>>>>>>]
                mov45/38 >>>>[-<<<<<<<+>>>>>>>]
                dup40/42/44 <<<<<[->>+>>+<<<<]
                mov44/40 >>>>[-<<<<+>>>>]
            <<<<<<]
            >>[-]
            >>[-]
            %12 = icmp sgt i32 %11_ i32 10
            <<<<<<<<<<<<<<<<<<<[-]
            dup22/37/38 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov37/22 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov38/40 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>]
            br i1 %12_ label %13_ label %16
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<-
                >>>>>+
                #B:putdec/13_true
            >>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/16_false
            <<<<<<]
        >>>>]
        >#B:%13
        [
            -
            %14 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup17/24/37 <<<<<<<[->>>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov37/17 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %15 = mul i32 %14_ i32 10
            <<<<<<<<<<<<[-]
            dup24/37/38 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov37/24 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            [
                -
                dup38/25/40 <[-<<<<<<<<<<<<<+>>>>>>>>>>>>>>>+<<]
                mov40/38 >>[-<<+>>]
            <]
            <[-]
            store i32 %15_ i32* %3_ align 4
            dup25/37/38 <<<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov37/25 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov38/17 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >]
        >#B:%16
        [
            -
            br label %17
            >+
        <]
        >#B:%17
        [
            -
            %18 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup17/26/37 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov37/17 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %19 = icmp ne i32 %18_ i32 0
            <<<<<<<<<<[-]
            dup26/37/38 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov37/26 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov38/41 <<<<<[->>>+<<<]
            >>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            br i1 %19_ label %20_ label %29
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/20_true
            >>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>+
                #B:putdec/29_false
            <<<<<<<<<<]
        >>>>>>>]
        >#B:%20
        [
            -
            %21 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>[-]
            dup16/28/37 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov37/16 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %22 = load i32* %3_ align 4
            <<<<<<<<[-]
            dup17/29/37 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov37/17 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %23 = sdiv i32 %21_ i32 %22
            <<<<<<<[-]
            dup28/37/38 <<[->>>>>>>>>+>+<<<<<<<<<<]
            mov37/28 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            dup29/39/40 <<<<<<<<[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov39/29 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            dup40/42/43 >[->>+>+<<<]
            mov43/40 >>>[-<<<+>>>]
            <<<<<[
                >>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov38/44 <<<<<<<<[->>>>>>+<<<<<<]
                >>>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<<<<<<<+
                >>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<-
                >>>>>>>>>>>]
                mov44/38 >>>[-<<<<<<+>>>>>>]
                dup40/42/43 <<<<[->>+>+<<<]
                mov43/40 >>>[-<<<+>>>]
            <<<<<]
            >>[-]
            >>[-]
            %24 = srem i32 %23_ i32 10
            <<<<<<<<<<<[-]
            dup30/37/38 <[->>>>>>>+>+<<<<<<<<]
            mov37/30 >>>>>>>[-<<<<<<<+>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup39/41/42 [->>+>+<<<]
            mov42/39 >>>[-<<<+>>>]
            <<<<#op0
            >#op1
            >#neg
            <<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov38/43 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                mov43/38 <<[-<<<<<+>>>>>]
                dup39/41/42 <<<<[->>+>+<<<]
                mov42/39 >>>[-<<<+>>>]
            <<<<]
            >>#neg
            [
                mov41/31 >[-<<<<<<<<<<+>>>>>>>>>>]
                <[
                    -
                    <<<<<<<<<-
                >>>>>>>>>]
            ]
            mov40/31 [-<<<<<<<<<+>>>>>>>>>]
            <[-]
            >>[-]
            %25 = add i32 48_ i32 %24
            <<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            dup31/38/39 <<<<<<[->>>>>>>+>+<<<<<<<<]
            mov38/31 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov37/32 <[-<<<<<+>>>>>]
            >>[
                -
                <<<<<<<+
            >>>>>>>]
            %26 = trunc i32 %25 to i8
            <<<<<<[-]
            dup32/37/38 <[->>>>>+>+<<<<<<]
            mov37/32 >>>>>[-<<<<<+>>>>>]
            mov38/33 >[-<<<<<+>>>>>]
            call @putchar(i8 %26)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_8
            +
            putchar intrinsic
            dup33/37/38 >>>>>>>>>>>>>>>>>>>[->>>>+>+<<<<<]
            mov37/33 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_8
        [
            -
            %27 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>[-]
            dup17/34/37 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>+<<<<<<<<<<<<<<<<<<<<]
            mov37/17 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %28 = sdiv i32 %27_ i32 10
            <<[-]
            dup34/37/38 <[->>>+>+<<<<]
            mov37/34 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup39/41/42 [->>+>+<<<]
            mov42/39 >>>[-<<<+>>>]
            <<<<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov38/43 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<+
                >>>>>[
                    [-]
                    <<<<<-
                >>>>>]
                mov43/38 >>>[-<<<<<+>>>>>]
                dup39/41/42 <<<<[->>+>+<<<]
                mov42/39 >>>[-<<<+>>>]
            <<<<]
            >[-]
            >>[-]
            store i32 %28_ i32* %3_ align 4
            dup35/37/38 <<<<<<[->>+>+<<<]
            mov37/35 >>[-<<+>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov38/17 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %17
            <<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>]
        >#B:%29
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/main
            >>>>>-
            l59 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<#mainloop_main
        >#F:putstr
        >#F:putdec
        >#F:main
        >#B:%0
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%6
        >#B:%7
        >#B:%10
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#B:%call_term_for_6
        >#B:%call_term_for_7
        >#B:%call_term_for_8
        >#B:%call_term_for_9
        >#B:%20
        >#B:%23
        >#B:%24
        >#B:%27
        >#alloc_%1
        >#alloc_%2
        >#%4_=_load_i32*_%1__align_4(mult)
        >#%5_=_icmp_ult_i32_%4__i32_5(mult)
        >#%8_=_load_i32*_%2__align_4(mult)
        >#%9_=_icmp_ult_i32_%8__i32_5(mult)
        >#%11_=_load_i32*_%1__align_4(mult)
        >#%12_=_load_i32*_%2__align_4(mult)
        >#%13_=_or_i32_%11__i32_%12(mult)
        >#%14_=_load_i32*_%1__align_4(mult)
        >#%15_=_load_i32*_%2__align_4(mult)
        >#%16_=_and_i32_%14__i32_%15(mult)
        >#%17_=_load_i32*_%1__align_4(mult)
        >#%18_=_load_i32*_%2__align_4(mult)
        >#%19_=_xor_i32_%17__i32_%18(mult)
        >#%21_=_load_i32*_%2__align_4(mult)
        >#%22_=_add_i32_%21__i32_1(mult)
        >#%25_=_load_i32*_%1__align_4(mult)
        >#%26_=_add_i32_%25__i32_1(mult)
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%0
        [
            -
            copy up args
            %1 = alloca i32_ align 4
            %2 = alloca i32_ align 4
            store i32 0_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_0
            
            <<<<<<<<<<<<<<<<<<<[-]
            mov39/20 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <<]
        >>#B:%3
        [
            -
            %4 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>[-]
            dup20/22/40 <<[->>+>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %5 = icmp ult i32 %4_ i32 5
            <<<<<<<<<<<<<<<<<[-]
            dup22/39/41 <[->>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<]
            mov39/22 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_5
            +++++
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov40/42 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>]
            br i1 %5_ label %6_ label %27
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<-
                >>+
                #B:main/6_true
            >>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>+
                #B:main/27_false
            <<<<<<<<<<<<<<]
        >]
        >#B:%6
        [
            -
            store i32 0_ i32* %2_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_0
            
            <<<<<<<<<<<<<<<<<<[-]
            mov39/21 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            br label %7
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%7
        [
            -
            %8 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>[-]
            dup21/24/39 <<<[->>>+>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            mov39/21 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            %9 = icmp ult i32 %8_ i32 5
            <<<<<<<<<<<<<<[-]
            dup24/39/40 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov39/24 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_5
            +++++
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov41/45 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<<<<[
                -
                
                >>>>>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<]
            >>>>>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>]
            br i1 %9_ label %10_ label %23
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<-
                >>>>+
                #B:main/10_true
            >>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>+
                #B:main/23_false
            <<<<<<<<<<<<]
        >>>]
        >#B:%10
        [
            -
            %11 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>[-]
            dup20/26/39 <<<<<<[->>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            mov39/20 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            %12 = load i32* %2_ align 4
            <<<<<<<<<<<<[-]
            dup21/27/39 <<<<<<[->>>>>>+>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            mov39/21 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            %13 = or i32 %11_ i32 %12
            <<<<<<<<<<<[-]
            dup26/39/40 <<[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov39/26 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            dup27/41/42 <<<<<<<<<<<<[->>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<]
            mov41/27 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            >>#dub_scratch
            >>>#loop_ctrl
            >>#nth
            >#op0div
            >>>>>#op1div
            <<<<<#op0_v
            >#op0_0
            >#op0_1
            >#op0_h
            >#op0_l
            >#op1_v
            >#op1_0
            >#op1_1
            >#op1_h
            >#op1_l
            mov40/49 <<<<<<<<<<<<<<<<<<[->>>>>>>>>+<<<<<<<<<]
            mov42/54 >>[->>>>>>>>>>>>+<<<<<<<<<<<<]
            >>>>>>>>>+
            >>>>>+
            <<<<<<<<<<+
            [
                [-]
                >>>[
                    -
                    >>>+
                    <<<[
                        -
                        >>>>+
                    <<<]
                    >[
                    <]
                <]
                dup53/50/49 >>>>[-<<<+<+>>>>]
                mov50/53 <<<[->>>+<<<]
                >>>[
                    -
                    <-
                >]
                >[
                    -
                    >>>+
                    <<<[
                        -
                        >>>>+
                    <<<]
                    >[
                    <]
                <]
                dup58/55/54 >>>>[-<<<+<+>>>>]
                mov55/58 <<<[->>>+<<<]
                >>>[
                    -
                    <-
                >]
                <<<<<<[
                    mov52/43 [-<<<<<<<<<+>>>>>>>>>]
                    >>>>>[-]
                <<<<<]
                >>>>>[
                    mov57/43 [-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
                ]
                dup48/44/45 <<<<<<<<<[-<<<<+>+>>>]
                mov44/48 <<<<[->>>>+<<<<]
                >[
                    -
                    <<[
                        -
                        >++
                    <]
                    mov44/43 >[-<+>]
                >]
                mov43/28 <<[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
                continue?
                dup49/43/44 >>>>>>[-<<<<<<+>+>>>>>]
                mov43/49 <<<<<<[->>>>>>+<<<<<<]
                >[
                    [-]
                    >>+
                <<]
                dup54/43/44 >>>>>>>>>>[-<<<<<<<<<<<+>+>>>>>>>>>>]
                mov43/54 <<<<<<<<<<<[->>>>>>>>>>>+<<<<<<<<<<<]
                >[
                    [-]
                    >>+
                <<]
                >>>>+
            <<]
            >>>>>-
            >>>>>-
            <<<<<<<<[-]
            call @putdec(i32 %13)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            stack_width 59
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup28/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov39/28 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            mov40/65 >[->>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/67/68 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov68/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r59 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_putdec
            +
            >>#putdec
            +
            >>#putdec/b0
            +
        >>>>>]
        >#B:%call_term_for_4
        [
            -
            call @putstr(getelementptr inbounds (_2 x i8_* @_str_ i64 0_ i64 0))
            enable next block when we return
            >#caller/%call_term_for_5
            +
            stack_width 59
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<#constop_0
            
            mov39/65 [->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/67/68 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov68/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r59 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_putstr
            +
            >#putstr
            +
            >>>#putstr/b0
            +
        >>>>>>]
        >#B:%call_term_for_5
        [
            -
            %14 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>[-]
            dup20/29/39 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            mov39/20 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            %15 = load i32* %2_ align 4
            <<<<<<<<<[-]
            dup21/30/39 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            mov39/21 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            %16 = and i32 %14_ i32 %15
            <<<<<<<<[-]
            dup29/39/40 <<[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov39/29 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            dup30/41/42 <<<<<<<<<[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov41/30 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            >>#dub_scratch
            >>>#loop_ctrl
            >#nth
            >#op0div
            >>>>>#op1div
            <<<<<#op0_v
            >#op0_0
            >#op0_1
            >#op0_h
            >#op0_l
            >#op1_v
            >#op1_0
            >#op1_1
            >#op1_h
            >#op1_l
            mov40/48 <<<<<<<<<<<<<<<<<[->>>>>>>>+<<<<<<<<]
            mov42/53 >>[->>>>>>>>>>>+<<<<<<<<<<<]
            >>>>>>>>+
            >>>>>+
            <<<<<<<<<+
            [
                [-]
                >>[
                    -
                    >>>+
                    <<<[
                        -
                        >>>>+
                    <<<]
                    >[
                    <]
                <]
                dup52/49/48 >>>>[-<<<+<+>>>>]
                mov49/52 <<<[->>>+<<<]
                >>>[
                    -
                    <-
                >]
                >[
                    -
                    >>>+
                    <<<[
                        -
                        >>>>+
                    <<<]
                    >[
                    <]
                <]
                dup57/54/53 >>>>[-<<<+<+>>>>]
                mov54/57 <<<[->>>+<<<]
                >>>[
                    -
                    <-
                >]
                <<<<<<[
                    -
                    mov56/43 >>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
                <<<<<]
                >>>>>[-]
                dup47/44/45 <<<<<<<<<[-<<<+>+>>]
                mov44/47 <<<[->>>+<<<]
                >[
                    -
                    <<[
                        -
                        >++
                    <]
                    mov44/43 >[-<+>]
                >]
                mov43/31 <<[-<<<<<<<<<<<<+>>>>>>>>>>>>]
                continue?
                dup48/43/44 >>>>>[-<<<<<+>+>>>>]
                mov43/48 <<<<<[->>>>>+<<<<<]
                >[
                    [-]
                    >>+
                <<]
                dup53/43/44 >>>>>>>>>[-<<<<<<<<<<+>+>>>>>>>>>]
                mov43/53 <<<<<<<<<<[->>>>>>>>>>+<<<<<<<<<<]
                >[
                    [-]
                    >>+
                <<]
                >>>+
            <]
            >>>>-
            >>>>>-
            <<<<<<<<[-]
            call @putdec(i32 %16)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_6
            +
            stack_width 59
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup31/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>+>+<<<<<<<<<]
            mov39/31 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            mov40/65 >[->>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/67/68 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov68/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r59 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_putdec
            +
            >>#putdec
            +
            >>#putdec/b0
            +
        >>>>>>>]
        >#B:%call_term_for_6
        [
            -
            call @putstr(getelementptr inbounds (_2 x i8_* @_str_ i64 0_ i64 0))
            enable next block when we return
            >#caller/%call_term_for_7
            +
            stack_width 59
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<#constop_0
            
            mov39/65 [->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/67/68 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov68/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r59 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_putstr
            +
            >#putstr
            +
            >>>#putstr/b0
            +
        >>>>>>>>]
        >#B:%call_term_for_7
        [
            -
            %17 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>[-]
            dup20/32/39 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            mov39/20 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            %18 = load i32* %2_ align 4
            <<<<<<[-]
            dup21/33/39 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>+<<<<<<<<<<<<<<<<<<]
            mov39/21 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            %19 = xor i32 %17_ i32 %18
            <<<<<[-]
            dup32/39/40 <<[->>>>>>>+>+<<<<<<<<]
            mov39/32 >>>>>>>[-<<<<<<<+>>>>>>>]
            dup33/41/42 <<<<<<[->>>>>>>>+>+<<<<<<<<<]
            mov41/33 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            >>#dub_scratch
            >>>#loop_ctrl
            >#nth
            >#op0div
            >>>>>#op1div
            <<<<<#op0_v
            >#op0_0
            >#op0_1
            >#op0_h
            >#op0_l
            >#op1_v
            >#op1_0
            >#op1_1
            >#op1_h
            >#op1_l
            mov40/48 <<<<<<<<<<<<<<<<<[->>>>>>>>+<<<<<<<<]
            mov42/53 >>[->>>>>>>>>>>+<<<<<<<<<<<]
            >>>>>>>>+
            >>>>>+
            <<<<<<<<<+
            [
                [-]
                >>[
                    -
                    >>>+
                    <<<[
                        -
                        >>>>+
                    <<<]
                    >[
                    <]
                <]
                dup52/49/48 >>>>[-<<<+<+>>>>]
                mov49/52 <<<[->>>+<<<]
                >>>[
                    -
                    <-
                >]
                >[
                    -
                    >>>+
                    <<<[
                        -
                        >>>>+
                    <<<]
                    >[
                    <]
                <]
                dup57/54/53 >>>>[-<<<+<+>>>>]
                mov54/57 <<<[->>>+<<<]
                >>>[
                    -
                    <-
                >]
                <<<<<<[
                    -
                    <<<<<<<<+
                    >>>>>>>>>>>>>[
                        -
                        <<<<<<<<<<<<<-
                    >>>>>>>>>>>>>]
                <<<<<]
                >>>>>[
                    -
                    <<<<<<<<<<<<<+
                    >>>>>>>>[
                        -
                        <<<<<<<<-
                    >>>>>>>>]
                >>>>>]
                dup47/44/45 <<<<<<<<<[-<<<+>+>>]
                mov44/47 <<<[->>>+<<<]
                >[
                    -
                    <<[
                        -
                        >++
                    <]
                    mov44/43 >[-<+>]
                >]
                mov43/34 <<[-<<<<<<<<<+>>>>>>>>>]
                continue?
                dup48/43/44 >>>>>[-<<<<<+>+>>>>]
                mov43/48 <<<<<[->>>>>+<<<<<]
                >[
                    [-]
                    >>+
                <<]
                dup53/43/44 >>>>>>>>>[-<<<<<<<<<<+>+>>>>>>>>>]
                mov43/53 <<<<<<<<<<[->>>>>>>>>>+<<<<<<<<<<]
                >[
                    [-]
                    >>+
                <<]
                >>>+
            <]
            >>>>-
            >>>>>-
            <<<<<<<<[-]
            call @putdec(i32 %19)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_8
            +
            stack_width 59
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup34/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>+>+<<<<<<]
            mov39/34 >>>>>[-<<<<<+>>>>>]
            mov40/65 >[->>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/67/68 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov68/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r59 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_putdec
            +
            >>#putdec
            +
            >>#putdec/b0
            +
        >>>>>>>>>]
        >#B:%call_term_for_8
        [
            -
            call @putchar(i8 44)
            enable next block when we return
            >#caller/%call_term_for_9
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>#constop_44
            ++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_9
        [
            -
            br label %20
            >+
        <]
        >#B:%20
        [
            -
            %21 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>[-]
            dup21/35/39 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<]
            mov39/21 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            %22 = add i32 %21_ i32 1
            <<<[-]
            dup35/39/40 <[->>>>+>+<<<<<]
            mov39/35 >>>>[-<<<<+>>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov40/36 <[-<<<<+>>>>]
            >[
                -
                <<<<<+
            >>>>>]
            store i32 %22_ i32* %2_ align 4
            dup36/39/40 <<<<<[->>>+>+<<<<]
            mov39/36 >>>[-<<<+>>>]
            <<<<<<<<<<<<<<<<<<[-]
            mov40/21 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            br label %7
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>>>>>>]
        >#B:%23
        [
            -
            br label %24
            >+
        <]
        >#B:%24
        [
            -
            %25 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>[-]
            dup20/37/39 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<]
            mov39/20 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            %26 = add i32 %25_ i32 1
            <[-]
            dup37/39/40 <[->>+>+<<<]
            mov39/37 >>[-<<+>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov40/38 <[-<<+>>]
            >[
                -
                <<<+
            >>>]
            store i32 %26_ i32* %1_ align 4
            dup38/39/40 <<<[->+>+<<]
            mov39/38 >[-<+>]
            <<<<<<<<<<<<<<<<<<<[-]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>>>>>>>>>>]
        >#B:%27
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l7 <<<<<<<
        >>>>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<]
<<<]
