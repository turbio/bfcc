r8 >>>>>>>>
++++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>>#main
+
>#main/b0
+
<<<<<<[
    >#putstr
    [
        >>>>>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/putstr
            >>>>>>>-
            l27 <<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_putstr
        >#F:putstr
        >#F:putdec
        >#F:add
        >#F:sub
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%6
        >#B:%call_term_for_2
        >#B:%11
        >#alloc_%2
        >#%4_=_load_i8**_%2__align_8(mult)
        >#%5_=_icmp_ne_i8*_%4__i8*_null(mult)
        >#%7_=_load_i8**_%2__align_8(mult)
        >#%8_=_ptrtoint_i8*_%7_to_i8(mult)
        >#%9_=_load_i8**_%2__align_8(mult)
        >#%10_=_getelementptr_i8*_%9__i32_1(mult)
        >#%0
        <<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/21 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i8*_ align 8
            store i8* %0_ i8** %2_ align 8
            >>>>>>>>>>>>[-]
            mov19/12 >>>>>>>[-<<<<<<<+>>>>>>>]
            br label %3
            <<<<<<<<<<<+
        <<]
        >>#B:%3
        [
            -
            %4 = load i8** %2_ align 8
            >>>>>[-]
            dup12/13/20 <[->+>>>>>>>+<<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %5 = icmp ne i8* %4_ i8* null
            <<<<<<[-]
            dup13/21/20 <[->>>>>>>>+<+<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov20/24 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<+
            >>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<+
            >>>>>>>>>]
            br i1 %5_ label %6_ label %11
            <<<<<<<<<<<<<<<<+
            >>>>>>>[
                -
                <<<<<<<-
                >>+
                #B:putstr/6_true
            >>>>>]
            <<<<<<<[
                -
                >>>>+
                #B:putstr/11_false
            <<<<]
        >]
        >#B:%6
        [
            -
            %7 = load i8** %2_ align 8
            >>>>>>[-]
            dup12/15/20 <<<[->>>+>>>>>+<<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %8 = ptrtoint i8* %7 to i8
            <<<<[-]
            dup15/20/21 <[->>>>>+>+<<<<<<]
            mov20/15 >>>>>[-<<<<<+>>>>>]
            mov21/16 >[-<<<<<+>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup16/20/21 >>>>>>[->>>>+>+<<<<<]
            mov20/16 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %9 = load i8** %2_ align 8
            >>>>>>>[-]
            dup12/17/20 <<<<<[->>>>>+>>>+<<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %10 = getelementptr i8* %9_ i32 1
            <<[-]
            dup17/20/21 <[->>>+>+<<<<]
            mov20/17 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov21/18 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i8* %10_ i8** %2_ align 8
            dup18/20/21 <<<<[->>+>+<<<]
            mov20/18 >>[-<<+>>]
            <<<<<<<<[-]
            mov21/12 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<+
        >>]
        >#B:%11
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>>>]
    <<<<<<<<<<]
    >#putdec
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/putdec
            >>>>>>>-
            l50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_putdec
        >#F:putstr
        >#F:putdec
        >#F:add
        >#F:sub
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%6
        >#B:%call_term_for_1
        >#B:%7
        >#B:%8
        >#B:%13
        >#B:%16
        >#B:%17
        >#B:%20
        >#B:%call_term_for_8
        >#B:%29
        >#alloc_%2
        >#alloc_%3
        >#%4_=_load_i32*_%2__align_4(mult)
        >#%5_=_icmp_ne_i32_%4__i32_0(mult)
        >#%9_=_load_i32*_%2__align_4(mult)
        >#%10_=_load_i32*_%3__align_4(mult)
        >#%11_=_sdiv_i32_%9__i32_%10(mult)
        >#%12_=_icmp_sgt_i32_%11__i32_10(mult)
        >#%14_=_load_i32*_%3__align_4(mult)
        >#%15_=_mul_i32_%14__i32_10(mult)
        >#%18_=_load_i32*_%3__align_4(mult)
        >#%19_=_icmp_ne_i32_%18__i32_0(mult)
        >#%21_=_load_i32*_%2__align_4(mult)
        >#%22_=_load_i32*_%3__align_4(mult)
        >#%23_=_sdiv_i32_%21__i32_%22(mult)
        >#%24_=_srem_i32_%23__i32_10(mult)
        >#%25_=_add_i32_48__i32_%24(mult)
        >#%26_=_trunc_i32_%25_to_i8(mult)
        >#%27_=_load_i32*_%3__align_4(mult)
        >#%28_=_sdiv_i32_%27__i32_10(mult)
        >#%0
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            store i32 %0_ i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>[-]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %4 = load i32* %2_ align 4
            <<<<<<<<<<<<<<<<<<[-]
            dup18/20/39 <<[->>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %5 = icmp ne i32 %4_ i32 0
            <<<<<<<<<<<<<<<<<<[-]
            dup20/40/39 <[->>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov39/43 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>]
            br i1 %5_ label %7_ label %6
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<-
                >>>+
                #B:putdec/7_true
            >>>>>>>>>>>]
            <<<<<<<<<<<<<<[
                -
                >+
                #B:putdec/6_false
            <]
        <]
        >>#B:%6
        [
            -
            call @putchar(i8 48)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            br label %29
            >>>>>>>>+
        <<<<<<<<]
        >#B:%7
        [
            -
            store i32 1_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_1
            +
            <<<<<<<<<<<<<<<<<<<<[-]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%8
        [
            -
            %9 = load i32* %2_ align 4
            >>>>>>>>>>>[-]
            dup18/22/39 <<<<[->>>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %10 = load i32* %3_ align 4
            <<<<<<<<<<<<<<<<[-]
            dup19/23/39 <<<<[->>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %11 = sdiv i32 %9_ i32 %10
            <<<<<<<<<<<<<<<[-]
            dup22/39/40 <<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov39/22 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            dup23/41/42 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov41/23 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            dup42/44/46 >[->>+>>+<<<<]
            mov46/42 >>>>[-<<<<+>>>>]
            <<<<<<[
                >>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov40/47 <<<<<<<<<[->>>>>>>+<<<<<<<]
                >>>>>>>>>+
                <<<<<[
                    -
                    <+
                    >>>>[
                        -
                        <<<<-
                        r1 >
                    >>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<]
                >>>>>-
                <<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>>>>>>]
                mov47/40 >>>>[-<<<<<<<+>>>>>>>]
                dup42/44/46 <<<<<[->>+>>+<<<<]
                mov46/42 >>>>[-<<<<+>>>>]
            <<<<<<]
            >>[-]
            >>[-]
            %12 = icmp sgt i32 %11_ i32 10
            <<<<<<<<<<<<<<<<<<<[-]
            dup24/39/40 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov39/24 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov40/42 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>]
            br i1 %12_ label %13_ label %16
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<-
                >>>>>+
                #B:putdec/13_true
            >>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/16_false
            <<<<<<]
        >>>>]
        >#B:%13
        [
            -
            %14 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup19/26/39 <<<<<<<[->>>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %15 = mul i32 %14_ i32 10
            <<<<<<<<<<<<[-]
            dup26/39/40 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov39/26 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            [
                -
                dup40/27/42 <[-<<<<<<<<<<<<<+>>>>>>>>>>>>>>>+<<]
                mov42/40 >>[-<<+>>]
            <]
            <[-]
            store i32 %15_ i32* %3_ align 4
            dup27/39/40 <<<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov39/27 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >]
        >#B:%16
        [
            -
            br label %17
            >+
        <]
        >#B:%17
        [
            -
            %18 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup19/28/39 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %19 = icmp ne i32 %18_ i32 0
            <<<<<<<<<<[-]
            dup28/39/40 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov39/28 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov40/43 <<<<<[->>>+<<<]
            >>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            br i1 %19_ label %20_ label %29
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/20_true
            >>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>+
                #B:putdec/29_false
            <<<<<<<<<<]
        >>>>>>>]
        >#B:%20
        [
            -
            %21 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>[-]
            dup18/30/39 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %22 = load i32* %3_ align 4
            <<<<<<<<[-]
            dup19/31/39 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %23 = sdiv i32 %21_ i32 %22
            <<<<<<<[-]
            dup30/39/40 <<[->>>>>>>>>+>+<<<<<<<<<<]
            mov39/30 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            dup31/41/42 <<<<<<<<[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov41/31 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            dup42/44/45 >[->>+>+<<<]
            mov45/42 >>>[-<<<+>>>]
            <<<<<[
                >>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov40/46 <<<<<<<<[->>>>>>+<<<<<<]
                >>>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<<<<<<<+
                >>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<-
                >>>>>>>>>>>]
                mov46/40 >>>[-<<<<<<+>>>>>>]
                dup42/44/45 <<<<[->>+>+<<<]
                mov45/42 >>>[-<<<+>>>]
            <<<<<]
            >>[-]
            >>[-]
            %24 = srem i32 %23_ i32 10
            <<<<<<<<<<<[-]
            dup32/39/40 <[->>>>>>>+>+<<<<<<<<]
            mov39/32 >>>>>>>[-<<<<<<<+>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup41/43/44 [->>+>+<<<]
            mov44/41 >>>[-<<<+>>>]
            <<<<#op0
            >#op1
            >#neg
            <<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov40/45 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                mov45/40 <<[-<<<<<+>>>>>]
                dup41/43/44 <<<<[->>+>+<<<]
                mov44/41 >>>[-<<<+>>>]
            <<<<]
            >>#neg
            [
                mov43/33 >[-<<<<<<<<<<+>>>>>>>>>>]
                <[
                    -
                    <<<<<<<<<-
                >>>>>>>>>]
            ]
            mov42/33 [-<<<<<<<<<+>>>>>>>>>]
            <[-]
            >>[-]
            %25 = add i32 48_ i32 %24
            <<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            dup33/40/41 <<<<<<[->>>>>>>+>+<<<<<<<<]
            mov40/33 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov39/34 <[-<<<<<+>>>>>]
            >>[
                -
                <<<<<<<+
            >>>>>>>]
            %26 = trunc i32 %25 to i8
            <<<<<<[-]
            dup34/39/40 <[->>>>>+>+<<<<<<]
            mov39/34 >>>>>[-<<<<<+>>>>>]
            mov40/35 >[-<<<<<+>>>>>]
            call @putchar(i8 %26)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_8
            +
            putchar intrinsic
            dup35/39/40 >>>>>>>>>>>>>>>>>>>[->>>>+>+<<<<<]
            mov39/35 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_8
        [
            -
            %27 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>[-]
            dup19/36/39 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>+<<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %28 = sdiv i32 %27_ i32 10
            <<[-]
            dup36/39/40 <[->>>+>+<<<<]
            mov39/36 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup41/43/44 [->>+>+<<<]
            mov44/41 >>>[-<<<+>>>]
            <<<<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov40/45 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<+
                >>>>>[
                    [-]
                    <<<<<-
                >>>>>]
                mov45/40 >>>[-<<<<<+>>>>>]
                dup41/43/44 <<<<[->>+>+<<<]
                mov44/41 >>>[-<<<+>>>]
            <<<<]
            >[-]
            >>[-]
            store i32 %28_ i32* %3_ align 4
            dup37/39/40 <<<<<<[->>+>+<<<]
            mov39/37 >>[-<<+>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %17
            <<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>]
        >#B:%29
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<]
    >#add
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/add
            >>>>>>>-
            l23 <<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_add
        >#F:putstr
        >#F:putdec
        >#F:add
        >#F:sub
        >#F:main
        >#B:%no_block0_call_for_add
        >#B:%ret_lading_pad
        >#B:%2
        >#B:%call_term_for_0
        >#alloc_%3
        >#alloc_%4
        >#%5_=_load_i32*_%3__align_4(mult)
        >#%6_=_add_i32_65__i32_%5(mult)
        >#%7_=_load_i32*_%4__align_4(mult)
        >#%8_=_add_i32_%6__i32_%7(mult)
        >#%9_=_trunc_i32_%8_to_i8(mult)
        >#%0
        >#%1
        <<<<<<<<<<<<#B:%no_block0_call_for_add
        [
            -
            copy up args
            >>>>>>>>>>>#arg_%0
            l2 <<
            mov0/19 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            mov0/21 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            br label %2
            >>>>>>>>+
        <<]
        >>#B:%2
        [
            -
            %3 = alloca i32_ align 4
            %4 = alloca i32_ align 4
            store i32 %0_ i32* %3_ align 4
            >>[-]
            mov17/10 >>>>>>>[-<<<<<<<+>>>>>>>]
            store i32 %1_ i32* %4_ align 4
            <<<<<<[-]
            mov18/11 >>>>>>>[-<<<<<<<+>>>>>>>]
            %5 = load i32* %3_ align 4
            <<<<<<[-]
            dup10/12/19 <<[->>+>>>>>>>+<<<<<<<<<]
            mov19/10 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            %6 = add i32 65_ i32 %5
            <<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup12/19/21 <<<<<<<<[->>>>>>>+>>+<<<<<<<<<]
            mov19/12 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov20/13 >[-<<<<<<<+>>>>>>>]
            >[
                -
                <<<<<<<<+
            >>>>>>>>]
            %7 = load i32* %4_ align 4
            <<<<<<<[-]
            dup11/14/19 <<<[->>>+>>>>>+<<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %8 = add i32 %6_ i32 %7
            <<<<[-]
            dup13/19/20 <<[->>>>>>+>+<<<<<<<]
            mov19/13 >>>>>>[-<<<<<<+>>>>>>]
            dup14/22/21 <<<<<[->>>>>>>>+<+<<<<<<<]
            mov22/14 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            mov20/15 <<[-<<<<<+>>>>>]
            >[
                -
                <<<<<<+
            >>>>>>]
            %9 = trunc i32 %8 to i8
            <<<<<[-]
            dup15/19/20 <[->>>>+>+<<<<<]
            mov19/15 >>>>[-<<<<+>>>>]
            mov20/16 >[-<<<<+>>>>]
            call @putchar(i8 %9)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup16/19/20 >>>>>>>[->>>+>+<<<<]
            mov19/16 >>>[-<<<+>>>]
            >.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>]
    <<<<<<]
    >#sub
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/sub
            >>>>>>>-
            l23 <<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_sub
        >#F:putstr
        >#F:putdec
        >#F:add
        >#F:sub
        >#F:main
        >#B:%no_block0_call_for_sub
        >#B:%ret_lading_pad
        >#B:%2
        >#B:%call_term_for_0
        >#alloc_%3
        >#alloc_%4
        >#%5_=_load_i32*_%3__align_4(mult)
        >#%6_=_add_i32_65__i32_%5(mult)
        >#%7_=_load_i32*_%4__align_4(mult)
        >#%8_=_sub_i32_%6__i32_%7(mult)
        >#%9_=_trunc_i32_%8_to_i8(mult)
        >#%0
        >#%1
        <<<<<<<<<<<<#B:%no_block0_call_for_sub
        [
            -
            copy up args
            >>>>>>>>>>>#arg_%0
            l2 <<
            mov0/19 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            mov0/21 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            br label %2
            >>>>>>>>+
        <<]
        >>#B:%2
        [
            -
            %3 = alloca i32_ align 4
            %4 = alloca i32_ align 4
            store i32 %0_ i32* %3_ align 4
            >>[-]
            mov17/10 >>>>>>>[-<<<<<<<+>>>>>>>]
            store i32 %1_ i32* %4_ align 4
            <<<<<<[-]
            mov18/11 >>>>>>>[-<<<<<<<+>>>>>>>]
            %5 = load i32* %3_ align 4
            <<<<<<[-]
            dup10/12/19 <<[->>+>>>>>>>+<<<<<<<<<]
            mov19/10 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            %6 = add i32 65_ i32 %5
            <<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup12/19/21 <<<<<<<<[->>>>>>>+>>+<<<<<<<<<]
            mov19/12 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov20/13 >[-<<<<<<<+>>>>>>>]
            >[
                -
                <<<<<<<<+
            >>>>>>>>]
            %7 = load i32* %4_ align 4
            <<<<<<<[-]
            dup11/14/19 <<<[->>>+>>>>>+<<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %8 = sub i32 %6_ i32 %7
            <<<<[-]
            dup13/19/20 <<[->>>>>>+>+<<<<<<<]
            mov19/13 >>>>>>[-<<<<<<+>>>>>>]
            dup14/22/21 <<<<<[->>>>>>>>+<+<<<<<<<]
            mov22/14 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            mov20/15 <<[-<<<<<+>>>>>]
            >[
                -
                <<<<<<-
            >>>>>>]
            %9 = trunc i32 %8 to i8
            <<<<<[-]
            dup15/19/20 <[->>>>+>+<<<<<]
            mov19/15 >>>>[-<<<<+>>>>]
            mov20/16 >[-<<<<+>>>>]
            call @putchar(i8 %9)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup16/19/20 >>>>>>>[->>>+>+<<<<]
            mov19/16 >>>[-<<<+>>>]
            >.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>]
    <<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<<-
            #dead_frame
            >>>>>-
            <<<<<#dead_fn_pad/main
            >>>>>>>-
            l59 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<#mainloop_main
        >#F:putstr
        >#F:putdec
        >#F:add
        >#F:sub
        >#F:main
        >#B:%0
        >#B:%ret_lading_pad
        >#B:%5
        >#B:%8
        >#B:%9
        >#B:%12
        >#B:%call_term_for_4
        >#B:%15
        >#B:%18
        >#B:%19
        >#B:%22
        >#B:%23
        >#B:%26
        >#B:%27
        >#B:%30
        >#B:%call_term_for_13
        >#B:%33
        >#B:%36
        >#B:%37
        >#B:%40
        >#alloc_%1
        >#alloc_%2
        >#alloc_%3
        >#alloc_%4
        >#%6_=_load_i32*_%1__align_4(mult)
        >#%7_=_icmp_slt_i32_%6__i32_16(mult)
        >#%10_=_load_i32*_%2__align_4(mult)
        >#%11_=_icmp_slt_i32_%10__i32_16(mult)
        >#%13_=_load_i32*_%1__align_4(mult)
        >#%14_=_load_i32*_%2__align_4(mult)
        >#%16_=_load_i32*_%2__align_4(mult)
        >#%17_=_add_i32_%16__i32_1(mult)
        >#%20_=_load_i32*_%1__align_4(mult)
        >#%21_=_add_i32_%20__i32_1(mult)
        >#%24_=_load_i32*_%3__align_4(mult)
        >#%25_=_icmp_slt_i32_%24__i32_16(mult)
        >#%28_=_load_i32*_%4__align_4(mult)
        >#%29_=_icmp_slt_i32_%28__i32_16(mult)
        >#%31_=_load_i32*_%3__align_4(mult)
        >#%32_=_load_i32*_%4__align_4(mult)
        >#%34_=_load_i32*_%4__align_4(mult)
        >#%35_=_add_i32_%34__i32_1(mult)
        >#%38_=_load_i32*_%3__align_4(mult)
        >#%39_=_add_i32_%38__i32_1(mult)
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%0
        [
            -
            copy up args
            %1 = alloca i32_ align 4
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            %4 = alloca i32_ align 4
            store i32 0_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_0
            
            <<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov50/26 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            br label %5
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <<]
        >>#B:%5
        [
            -
            %6 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>[-]
            dup26/30/51 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov51/26 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            %7 = icmp slt i32 %6_ i32 16
            <<<<<<<<<<<<<<<<<<<<[-]
            dup30/50/52 <[->>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<]
            mov50/30 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_16
            ++++++++++++++++
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov51/53 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>]
            br i1 %7_ label %8_ label %22
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<-
                >>+
                #B:main/8_true
            >>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>+
                #B:main/22_false
            <<<<<<<<<]
        >]
        >#B:%8
        [
            -
            store i32 0_ i32* %2_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_0
            
            <<<<<<<<<<<<<<<<<<<<<<<[-]
            mov50/27 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            br label %9
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%9
        [
            -
            %10 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>>>>[-]
            dup27/32/50 <<<<<[->>>>>+>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/27 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            %11 = icmp slt i32 %10_ i32 16
            <<<<<<<<<<<<<<<<<[-]
            dup32/50/51 <[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov50/32 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_16
            ++++++++++++++++
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov52/56 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<<<<[
                -
                
                >>>>>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<]
            >>>>>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>]
            br i1 %11_ label %12_ label %18
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>+
                #B:main/12_true
            >>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>+
                #B:main/18_false
            <<<<<<<]
        >>>]
        >#B:%12
        [
            -
            %13 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>[-]
            dup26/34/50 <<<<<<<<[->>>>>>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/26 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            %14 = load i32* %2_ align 4
            <<<<<<<<<<<<<<<[-]
            dup27/35/50 <<<<<<<<[->>>>>>>>+>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/27 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            call @add(i32 %13_ i32 %14)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            stack_width 59
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup34/50/51 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<]
            mov50/34 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            mov51/68 >[->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>#arg_1
            dup35/52/53 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov52/35 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            mov53/67 >[->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/70/71 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov71/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r59 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<<#===FRAME_add
            +
            >>>#add
            +
            >>>#add/b0
            +
        >>>>>]
        >#B:%call_term_for_4
        [
            -
            br label %15
            >+
        <]
        >#B:%15
        [
            -
            %16 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>[-]
            dup27/36/50 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/27 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            %17 = add i32 %16_ i32 1
            <<<<<<<<<<<<<[-]
            dup36/50/51 <[->>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<]
            mov50/36 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov51/37 <[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            >[
                -
                <<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>]
            store i32 %17_ i32* %2_ align 4
            dup37/50/51 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov50/37 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<[-]
            mov51/27 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            br label %9
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>]
        >#B:%18
        [
            -
            br label %19
            >+
        <]
        >#B:%19
        [
            -
            %20 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>[-]
            dup26/38/50 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/26 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            %21 = add i32 %20_ i32 1
            <<<<<<<<<<<[-]
            dup38/50/51 <[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov50/38 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov51/39 <[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            >[
                -
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            store i32 %21_ i32* %1_ align 4
            dup39/50/51 <<<<<<<<<<<<<[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov50/39 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov51/26 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            br label %5
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>>>>>]
        >#B:%22
        [
            -
            store i32 0_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_0
            
            <<<<<<<<<<<<<<<<<<<<<<[-]
            mov50/28 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            br label %23
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%23
        [
            -
            %24 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>[-]
            dup28/40/50 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            mov50/28 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            %25 = icmp slt i32 %24_ i32 16
            <<<<<<<<<[-]
            dup40/50/51 <[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov50/40 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_16
            ++++++++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov52/53 <<<[->+<]
            >>>+
            <<<<[
                -
                
                >>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<+
            >>>>>>>>>>>>]
            br i1 %25_ label %26_ label %40
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>+
                #B:main/26_true
            >>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>+
                #B:main/40_false
            <<<<<<<<<<<<<<<<<<]
        >>>>>>>>>>]
        >#B:%26
        [
            -
            store i32 0_ i32* %4_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_0
            
            <<<<<<<<<<<<<<<<<<<<<[-]
            mov50/29 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %27
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%27
        [
            -
            %28 = load i32* %4_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>[-]
            dup29/42/50 <<<<<<<<<<<<<[->>>>>>>>>>>>>+>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov50/29 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %29 = icmp slt i32 %28_ i32 16
            <<<<<<<[-]
            dup42/50/51 <[->>>>>>>>+>+<<<<<<<<<]
            mov50/42 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_16
            ++++++++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov52/53 <<<[->+<]
            >>>+
            <<<<[
                -
                
                >>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<+
            >>>>>>>>>>]
            br i1 %29_ label %30_ label %36
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>>+
                #B:main/30_true
            >>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>+
                #B:main/36_false
            <<<<<<<<<<<<<<<<]
        >>>>>>>>>>>>]
        >#B:%30
        [
            -
            %31 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup28/44/50 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            mov50/28 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            %32 = load i32* %4_ align 4
            <<<<<[-]
            dup29/45/50 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov50/29 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            call @sub(i32 %31_ i32 %32)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_13
            +
            stack_width 59
            ret_pad_width 7
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            dup44/50/51 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>+>+<<<<<<<]
            mov50/44 >>>>>>[-<<<<<<+>>>>>>]
            mov51/68 >[->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>#arg_1
            dup45/52/53 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>+>+<<<<<<<<]
            mov52/45 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov53/67 >[->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/70/71 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov71/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r59 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<<#===FRAME_sub
            +
            >>>>#sub
            +
            >>#sub/b0
            +
        >>>>>>>>>>>>>>]
        >#B:%call_term_for_13
        [
            -
            br label %33
            >+
        <]
        >#B:%33
        [
            -
            %34 = load i32* %4_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup29/46/50 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov50/29 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %35 = add i32 %34_ i32 1
            <<<[-]
            dup46/50/51 <[->>>>+>+<<<<<]
            mov50/46 >>>>[-<<<<+>>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov51/47 <[-<<<<+>>>>]
            >[
                -
                <<<<<+
            >>>>>]
            store i32 %35_ i32* %4_ align 4
            dup47/50/51 <<<<<[->>>+>+<<<<]
            mov50/47 >>>[-<<<+>>>]
            <<<<<<<<<<<<<<<<<<<<<[-]
            mov51/29 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            br label %27
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>]
        >#B:%36
        [
            -
            br label %37
            >+
        <]
        >#B:%37
        [
            -
            %38 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup28/48/50 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<]
            mov50/28 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            %39 = add i32 %38_ i32 1
            <[-]
            dup48/50/51 <[->>+>+<<<]
            mov50/48 >>[-<<+>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov51/49 <[-<<+>>]
            >[
                -
                <<<+
            >>>]
            store i32 %39_ i32* %3_ align 4
            dup49/50/51 <<<[->+>+<<]
            mov50/49 >[-<+>]
            <<<<<<<<<<<<<<<<<<<<<<[-]
            mov51/28 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            br label %23
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>>>>>]
        >#B:%40
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>>-
            l1 <
            <<<<<[-]
            r1 >
            l9 <<<<<<<<<
        >>>>>>>>>>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<<<<<]
<<<<<]
