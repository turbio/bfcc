r9 >>>>>>>>>
+++++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>>>#main
+
>#main/b0
+
<<<<<<<[
    >#putstr
    [
        >>>>>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/putstr
            >>>>>>>>-
            l28 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_putstr
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%6
        >#B:%call_term_for_2
        >#B:%11
        >#alloc_%2
        >#%4_=_load_i8**_%2__align_8(mult)
        >#%5_=_icmp_ne_i8*_%4__i8*_null(mult)
        >#%7_=_load_i8**_%2__align_8(mult)
        >#%8_=_ptrtoint_i8*_%7_to_i8(mult)
        >#%9_=_load_i8**_%2__align_8(mult)
        >#%10_=_getelementptr_i8*_%9__i32_1(mult)
        >#%0
        <<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/22 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i8*_ align 8
            store i8* %0_ i8** %2_ align 8
            >>>>>>>>>>>>>[-]
            mov20/13 >>>>>>>[-<<<<<<<+>>>>>>>]
            br label %3
            <<<<<<<<<<<+
        <<]
        >>#B:%3
        [
            -
            %4 = load i8** %2_ align 8
            >>>>>[-]
            dup13/14/21 <[->+>>>>>>>+<<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %5 = icmp ne i8* %4_ i8* null
            <<<<<<[-]
            dup14/22/21 <[->>>>>>>>+<+<<<<<<<]
            mov22/14 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov21/25 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<+
            >>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<+
            >>>>>>>>>]
            br i1 %5_ label %6_ label %11
            <<<<<<<<<<<<<<<<+
            >>>>>>>[
                -
                <<<<<<<-
                >>+
                #B:putstr/6_true
            >>>>>]
            <<<<<<<[
                -
                >>>>+
                #B:putstr/11_false
            <<<<]
        >]
        >#B:%6
        [
            -
            %7 = load i8** %2_ align 8
            >>>>>>[-]
            dup13/16/21 <<<[->>>+>>>>>+<<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %8 = ptrtoint i8* %7 to i8
            <<<<[-]
            dup16/21/22 <[->>>>>+>+<<<<<<]
            mov21/16 >>>>>[-<<<<<+>>>>>]
            mov22/17 >[-<<<<<+>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup17/21/22 >>>>>>[->>>>+>+<<<<<]
            mov21/17 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %9 = load i8** %2_ align 8
            >>>>>>>[-]
            dup13/18/21 <<<<<[->>>>>+>>>+<<<<<<<<]
            mov21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %10 = getelementptr i8* %9_ i32 1
            <<[-]
            dup18/21/22 <[->>>+>+<<<<]
            mov21/18 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov22/19 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i8* %10_ i8** %2_ align 8
            dup19/21/22 <<<<[->>+>+<<<]
            mov21/19 >>[-<<+>>]
            <<<<<<<<[-]
            mov22/13 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<+
        >>]
        >#B:%11
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<<<<]
    >#putdec
    [
        >>>>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/putdec
            >>>>>>>>-
            l51 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_putdec
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%6
        >#B:%call_term_for_1
        >#B:%7
        >#B:%8
        >#B:%13
        >#B:%16
        >#B:%17
        >#B:%20
        >#B:%call_term_for_8
        >#B:%29
        >#alloc_%2
        >#alloc_%3
        >#%4_=_load_i32*_%2__align_4(mult)
        >#%5_=_icmp_ne_i32_%4__i32_0(mult)
        >#%9_=_load_i32*_%2__align_4(mult)
        >#%10_=_load_i32*_%3__align_4(mult)
        >#%11_=_sdiv_i32_%9__i32_%10(mult)
        >#%12_=_icmp_sgt_i32_%11__i32_10(mult)
        >#%14_=_load_i32*_%3__align_4(mult)
        >#%15_=_mul_i32_%14__i32_10(mult)
        >#%18_=_load_i32*_%3__align_4(mult)
        >#%19_=_icmp_ne_i32_%18__i32_0(mult)
        >#%21_=_load_i32*_%2__align_4(mult)
        >#%22_=_load_i32*_%3__align_4(mult)
        >#%23_=_sdiv_i32_%21__i32_%22(mult)
        >#%24_=_srem_i32_%23__i32_10(mult)
        >#%25_=_add_i32_48__i32_%24(mult)
        >#%26_=_trunc_i32_%25_to_i8(mult)
        >#%27_=_load_i32*_%3__align_4(mult)
        >#%28_=_sdiv_i32_%27__i32_10(mult)
        >#%0
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/41 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            store i32 %0_ i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>[-]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %4 = load i32* %2_ align 4
            <<<<<<<<<<<<<<<<<<[-]
            dup19/21/40 <<[->>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %5 = icmp ne i32 %4_ i32 0
            <<<<<<<<<<<<<<<<<<[-]
            dup21/41/40 <[->>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<]
            mov41/21 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov40/44 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>]
            br i1 %5_ label %7_ label %6
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<-
                >>>+
                #B:putdec/7_true
            >>>>>>>>>>>]
            <<<<<<<<<<<<<<[
                -
                >+
                #B:putdec/6_false
            <]
        <]
        >>#B:%6
        [
            -
            call @putchar(i8 48)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            br label %29
            >>>>>>>>+
        <<<<<<<<]
        >#B:%7
        [
            -
            store i32 1_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_1
            +
            <<<<<<<<<<<<<<<<<<<<[-]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%8
        [
            -
            %9 = load i32* %2_ align 4
            >>>>>>>>>>>[-]
            dup19/23/40 <<<<[->>>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %10 = load i32* %3_ align 4
            <<<<<<<<<<<<<<<<[-]
            dup20/24/40 <<<<[->>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %11 = sdiv i32 %9_ i32 %10
            <<<<<<<<<<<<<<<[-]
            dup23/40/41 <<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov40/23 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            dup24/42/43 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov42/24 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            dup43/45/47 >[->>+>>+<<<<]
            mov47/43 >>>>[-<<<<+>>>>]
            <<<<<<[
                >>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov41/48 <<<<<<<<<[->>>>>>>+<<<<<<<]
                >>>>>>>>>+
                <<<<<[
                    -
                    <+
                    >>>>[
                        -
                        <<<<-
                        r1 >
                    >>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<]
                >>>>>-
                <<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>>>>>>]
                mov48/41 >>>>[-<<<<<<<+>>>>>>>]
                dup43/45/47 <<<<<[->>+>>+<<<<]
                mov47/43 >>>>[-<<<<+>>>>]
            <<<<<<]
            >>[-]
            >>[-]
            %12 = icmp sgt i32 %11_ i32 10
            <<<<<<<<<<<<<<<<<<<[-]
            dup25/40/41 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov40/25 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov41/43 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>]
            br i1 %12_ label %13_ label %16
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<-
                >>>>>+
                #B:putdec/13_true
            >>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/16_false
            <<<<<<]
        >>>>]
        >#B:%13
        [
            -
            %14 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup20/27/40 <<<<<<<[->>>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %15 = mul i32 %14_ i32 10
            <<<<<<<<<<<<[-]
            dup27/40/41 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov40/27 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            [
                -
                dup41/28/43 <[-<<<<<<<<<<<<<+>>>>>>>>>>>>>>>+<<]
                mov43/41 >>[-<<+>>]
            <]
            <[-]
            store i32 %15_ i32* %3_ align 4
            dup28/40/41 <<<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov40/28 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov41/20 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >]
        >#B:%16
        [
            -
            br label %17
            >+
        <]
        >#B:%17
        [
            -
            %18 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup20/29/40 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %19 = icmp ne i32 %18_ i32 0
            <<<<<<<<<<[-]
            dup29/40/41 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov40/29 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov41/44 <<<<<[->>>+<<<]
            >>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            br i1 %19_ label %20_ label %29
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/20_true
            >>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>+
                #B:putdec/29_false
            <<<<<<<<<<]
        >>>>>>>]
        >#B:%20
        [
            -
            %21 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>[-]
            dup19/31/40 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov40/19 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %22 = load i32* %3_ align 4
            <<<<<<<<[-]
            dup20/32/40 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %23 = sdiv i32 %21_ i32 %22
            <<<<<<<[-]
            dup31/40/41 <<[->>>>>>>>>+>+<<<<<<<<<<]
            mov40/31 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            dup32/42/43 <<<<<<<<[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov42/32 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            dup43/45/46 >[->>+>+<<<]
            mov46/43 >>>[-<<<+>>>]
            <<<<<[
                >>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov41/47 <<<<<<<<[->>>>>>+<<<<<<]
                >>>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<<<<<<<+
                >>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<-
                >>>>>>>>>>>]
                mov47/41 >>>[-<<<<<<+>>>>>>]
                dup43/45/46 <<<<[->>+>+<<<]
                mov46/43 >>>[-<<<+>>>]
            <<<<<]
            >>[-]
            >>[-]
            %24 = srem i32 %23_ i32 10
            <<<<<<<<<<<[-]
            dup33/40/41 <[->>>>>>>+>+<<<<<<<<]
            mov40/33 >>>>>>>[-<<<<<<<+>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup42/44/45 [->>+>+<<<]
            mov45/42 >>>[-<<<+>>>]
            <<<<#op0
            >#op1
            >#neg
            <<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov41/46 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                mov46/41 <<[-<<<<<+>>>>>]
                dup42/44/45 <<<<[->>+>+<<<]
                mov45/42 >>>[-<<<+>>>]
            <<<<]
            >>#neg
            [
                mov44/34 >[-<<<<<<<<<<+>>>>>>>>>>]
                <[
                    -
                    <<<<<<<<<-
                >>>>>>>>>]
            ]
            mov43/34 [-<<<<<<<<<+>>>>>>>>>]
            <[-]
            >>[-]
            %25 = add i32 48_ i32 %24
            <<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            dup34/41/42 <<<<<<[->>>>>>>+>+<<<<<<<<]
            mov41/34 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov40/35 <[-<<<<<+>>>>>]
            >>[
                -
                <<<<<<<+
            >>>>>>>]
            %26 = trunc i32 %25 to i8
            <<<<<<[-]
            dup35/40/41 <[->>>>>+>+<<<<<<]
            mov40/35 >>>>>[-<<<<<+>>>>>]
            mov41/36 >[-<<<<<+>>>>>]
            call @putchar(i8 %26)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_8
            +
            putchar intrinsic
            dup36/40/41 >>>>>>>>>>>>>>>>>>>[->>>>+>+<<<<<]
            mov40/36 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_8
        [
            -
            %27 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>[-]
            dup20/37/40 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>+<<<<<<<<<<<<<<<<<<<<]
            mov40/20 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %28 = sdiv i32 %27_ i32 10
            <<[-]
            dup37/40/41 <[->>>+>+<<<<]
            mov40/37 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup42/44/45 [->>+>+<<<]
            mov45/42 >>>[-<<<+>>>]
            <<<<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov41/46 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<+
                >>>>>[
                    [-]
                    <<<<<-
                >>>>>]
                mov46/41 >>>[-<<<<<+>>>>>]
                dup42/44/45 <<<<[->>+>+<<<]
                mov45/42 >>>[-<<<+>>>]
            <<<<]
            >[-]
            >>[-]
            store i32 %28_ i32* %3_ align 4
            dup38/40/41 <<<<<<[->>+>+<<<]
            mov40/38 >>[-<<+>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov41/20 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %17
            <<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>]
        >#B:%29
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<]
    >#deref_int_inc
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/deref_int_inc
            >>>>>>>>-
            l31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_deref_int_inc
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#alloc_%2
        >#%3_=_load_i8*_%2__align_1(mult)
        >#%4_=_zext_i8_%3_to_i64(mult)
        >#%5_=_inttoptr_i64_%4_to_i32*(mult)
        >#%6_=_load_i32*_%5__align_4(mult)
        >#%7_=_add_i32_%6__i32_1(mult)
        >#%0
        <<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>#arg_%0
            l2 <<
            mov0/17 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i8_ align 1
            store i8 %0_ i8* %2_ align 1
            >>>>>>>>>[-]
            mov15/9 >>>>>>[-<<<<<<+>>>>>>]
            %3 = load i8* %2_ align 1
            <<<<<[-]
            dup9/10/16 <[->+>>>>>>+<<<<<<<]
            mov16/9 >>>>>>>[-<<<<<<<+>>>>>>>]
            %4 = zext i8 %3 to i64
            <<<<<[-]
            dup10/17/16 <[->>>>>>>+<+<<<<<<]
            mov17/10 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov16/11 <[-<<<<<+>>>>>]
            %5 = inttoptr i64 %4 to i32*
            <<<<[-]
            dup11/16/18 <[->>>>>+>>+<<<<<<<]
            mov16/11 >>>>>[-<<<<<+>>>>>]
            mov18/12 >>[-<<<<<<+>>>>>>]
            %6 = load i32* %5_ align 4
            <<<<<[-]
            dup12/16/17 <[->>>>+>+<<<<<]
            mov16/12 >>>>[-<<<<+>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<#stackptr_tmp
            l1 <
            dup0/19/23 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            mov19/0 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov22/24 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov24/21 [-<<<+>>>]
                <<<+++++++++++++++++++
            >>>]
            <[
                if neg
                <<+++++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                mov20/19 <[-<+>]
                mov21/20 >[-<+>]
                
                mov18/21 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup18/19/21 <<<[->+>>+<<<]
            mov19/18 >[-<+>]
            >[
                mov22/19 >>[-<<<+>>>]
                mov21/22 <[->+<]
                mov20/21 <[->+<]
                r1 >
                -
            ]
            mov21/13 >[-<<<<<<<<+>>>>>>>>]
            %7 = add i32 %6_ i32 1
            <<<<<<<[-]
            dup13/16/17 <[->>>+>+<<<<]
            mov16/13 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov17/14 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i32 %7_ i32* %5_ align 4
            dup14/16/17 <<<<[->>+>+<<<]
            mov16/14 >>[-<<+>>]
            dup12/18/19 <<<<[->>>>>>+>+<<<<<<<]
            mov18/12 >>>>>>[-<<<<<<+>>>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/25/26 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov25/0 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov25/28 <<<<<[->>>+<<<]
            >>>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov28/22 [-<<<<<<+>>>>>>]
                <<<<<<++++++++++++++++++++
            >>>>>>]
            <[
                if neg
                <<<<<++++++++++++++++++++
                >>>>>[
                    -
                    <<<<<-
                >>>>>]
            ]
            mov17/23 <<<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                mov21/20 <[-<+>]
                mov22/21 >[-<+>]
                mov23/22 >[-<+>]
                mov19/23 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            mov23/19 >>>>[-<<<<+>>>>]
            <<[
                mov24/20 >>>[-<<<<+>>>>]
                
                mov21/22 <<<[->+<]
                r1 >
                -
            ]
            ret void
            zero all function allocs
            <<<<<<<<<<<<[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>]
    <<<<]
    >#deref_int_inc2
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/deref_int_inc2
            >>>>>>>>-
            l34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_deref_int_inc2
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#alloc_%2
        >#%3_=_load_i8*_%2__align_1(mult)
        >#%4_=_zext_i8_%3_to_i64(mult)
        >#%5_=_inttoptr_i64_%4_to_i32*(mult)
        >#%6_=_load_i32*_%5__align_4(mult)
        >#%7_=_add_i32_%6__i32_1(mult)
        >#%8_=_load_i8*_%2__align_1(mult)
        >#%9_=_zext_i8_%8_to_i64(mult)
        >#%10_=_inttoptr_i64_%9_to_i32*(mult)
        >#%0
        <<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>#arg_%0
            l2 <<
            mov0/20 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i8_ align 1
            store i8 %0_ i8* %2_ align 1
            >>>>>>>>>[-]
            mov18/9 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            %3 = load i8* %2_ align 1
            <<<<<<<<[-]
            dup9/10/19 <[->+>>>>>>>>>+<<<<<<<<<<]
            mov19/9 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %4 = zext i8 %3 to i64
            <<<<<<<<[-]
            dup10/20/19 <[->>>>>>>>>>+<+<<<<<<<<<]
            mov20/10 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            mov19/11 <[-<<<<<<<<+>>>>>>>>]
            %5 = inttoptr i64 %4 to i32*
            <<<<<<<[-]
            dup11/19/21 <[->>>>>>>>+>>+<<<<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            mov21/12 >>[-<<<<<<<<<+>>>>>>>>>]
            %6 = load i32* %5_ align 4
            <<<<<<<<[-]
            dup12/19/20 <[->>>>>>>+>+<<<<<<<<]
            mov19/12 >>>>>>>[-<<<<<<<+>>>>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<#stackptr_tmp
            l1 <
            dup0/22/26 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov22/0 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov25/27 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov27/24 [-<<<+>>>]
                <<<++++++++++++++++++++++
            >>>]
            <[
                if neg
                <<++++++++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                mov23/22 <[-<+>]
                mov24/23 >[-<+>]
                
                mov21/24 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup21/22/24 <<<[->+>>+<<<]
            mov22/21 >[-<+>]
            >[
                mov25/22 >>[-<<<+>>>]
                mov24/25 <[->+<]
                mov23/24 <[->+<]
                r1 >
                -
            ]
            mov24/13 >[-<<<<<<<<<<<+>>>>>>>>>>>]
            %7 = add i32 %6_ i32 1
            <<<<<<<<<<[-]
            dup13/19/20 <[->>>>>>+>+<<<<<<<]
            mov19/13 >>>>>>[-<<<<<<+>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov20/14 <[-<<<<<<+>>>>>>]
            >[
                -
                <<<<<<<+
            >>>>>>>]
            %8 = load i8* %2_ align 1
            <<<<<<[-]
            dup9/15/19 <<<<<<[->>>>>>+>>>>+<<<<<<<<<<]
            mov19/9 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %9 = zext i8 %8 to i64
            <<<[-]
            dup15/19/20 <[->>>>+>+<<<<<]
            mov19/15 >>>>[-<<<<+>>>>]
            mov20/16 >[-<<<<+>>>>]
            %10 = inttoptr i64 %9 to i32*
            <<<[-]
            dup16/19/20 <[->>>+>+<<<<]
            mov19/16 >>>[-<<<+>>>]
            mov20/17 >[-<<<+>>>]
            store i32 %7_ i32* %10_ align 4
            dup14/19/20 <<<<<<[->>>>>+>+<<<<<<]
            mov19/14 >>>>>[-<<<<<+>>>>>]
            dup17/21/22 <<[->>>>+>+<<<<<]
            mov21/17 >>>>[-<<<<+>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/28/29 <<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov28/31 <<<<<[->>>+<<<]
            >>>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov31/25 [-<<<<<<+>>>>>>]
                <<<<<<+++++++++++++++++++++++
            >>>>>>]
            <[
                if neg
                <<<<<+++++++++++++++++++++++
                >>>>>[
                    -
                    <<<<<-
                >>>>>]
            ]
            mov20/26 <<<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                mov24/23 <[-<+>]
                mov25/24 >[-<+>]
                mov26/25 >[-<+>]
                mov22/26 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            mov26/22 >>>>[-<<<<+>>>>]
            <<[
                mov27/23 >>>[-<<<<+>>>>]
                
                mov24/25 <<<[->+<]
                r1 >
                -
            ]
            ret void
            zero all function allocs
            <<<<<<<<<<<<<<<[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>]
    <<<]
    >#deref_int
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>>>-
            <<<<<#dead_fn_pad/deref_int
            >>>>>>>>-
            l29 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_deref_int
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#alloc_%2
        >#%3_=_load_i8*_%2__align_1(mult)
        >#%4_=_zext_i8_%3_to_i64(mult)
        >#%5_=_inttoptr_i64_%4_to_i32*(mult)
        >#%6_=_load_i32*_%5__align_4(mult)
        >#%7_=_trunc_i32_%6_to_i8(mult)
        >#%0
        <<<<<<<<<<#B:%no_block0_call_for_deref_int
        [
            -
            copy up args
            >>>>>>>>>>#arg_%0
            l2 <<
            mov0/19 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = alloca i8_ align 1
            store i8 %0_ i8* %2_ align 1
            >>[-]
            mov17/11 >>>>>>[-<<<<<<+>>>>>>]
            %3 = load i8* %2_ align 1
            <<<<<[-]
            dup11/12/18 <[->+>>>>>>+<<<<<<<]
            mov18/11 >>>>>>>[-<<<<<<<+>>>>>>>]
            %4 = zext i8 %3 to i64
            <<<<<[-]
            dup12/19/18 <[->>>>>>>+<+<<<<<<]
            mov19/12 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov18/13 <[-<<<<<+>>>>>]
            %5 = inttoptr i64 %4 to i32*
            <<<<[-]
            dup13/18/20 <[->>>>>+>>+<<<<<<<]
            mov18/13 >>>>>[-<<<<<+>>>>>]
            mov20/14 >>[-<<<<<<+>>>>>>]
            %6 = load i32* %5_ align 4
            <<<<<[-]
            dup14/18/19 <[->>>>+>+<<<<<]
            mov18/14 >>>>[-<<<<+>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<#stackptr_tmp
            l1 <
            dup0/21/25 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov21/0 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov24/26 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov26/23 [-<<<+>>>]
                <<<+++++++++++++++++++++
            >>>]
            <[
                if neg
                <<+++++++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                mov22/21 <[-<+>]
                mov23/22 >[-<+>]
                
                mov20/23 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup20/21/23 <<<[->+>>+<<<]
            mov21/20 >[-<+>]
            >[
                mov24/21 >>[-<<<+>>>]
                mov23/24 <[->+<]
                mov22/23 <[->+<]
                r1 >
                -
            ]
            mov23/15 >[-<<<<<<<<+>>>>>>>>]
            %7 = trunc i32 %6 to i8
            <<<<<<<[-]
            dup15/18/19 <[->>>+>+<<<<]
            mov18/15 >>>[-<<<+>>>]
            mov19/16 >[-<<<+>>>]
            call @putchar(i8 %7)
            enable next block when we return
            <<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup16/18/19 >>>>>>[->>+>+<<<]
            mov18/16 >>[-<<+>>]
            >.
            [-]
        <<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>>-
            l1 <
            <<<<<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>]
    <<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<<<-
            #dead_frame
            >>>>>>-
            <<<<<<#dead_fn_pad/main
            >>>>>>>>-
            l20 <<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<<<#mainloop_main
        >#F:putstr
        >#F:putdec
        >#F:deref_int_inc
        >#F:deref_int_inc2
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#alloc_%1
        >#%2_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%3_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%4_=_ptrtoint_i32*_%1_to_i8(mult)
        <<<<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            store i32 97_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<[-]
            mov17/13 >>>>[-<<<<+>>>>]
            %2 = ptrtoint i32* %1 to i8
            <<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/19/18 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<]
            mov18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            ++++++++++++++
            mov18/14 [-<<<<+>>>>]
            call @deref_int(i8 %2)
            enable next block when we return
            <<<<<<<<#caller/%call_term_for_0
            +
            stack_width 20
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>#arg_0
            dup14/17/19 <<<<<<<<<<<<<<<[->>>+>>+<<<<<]
            mov17/14 >>>[-<<<+>>>]
            mov19/29 >>[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++
            l1 <
            dup0/31/32 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov32/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r20 >>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<<<#===FRAME_deref_int
            +
            >>>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            %3 = ptrtoint i32* %1 to i8
            >>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/18/19 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov19/0 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++
            mov17/15 [-<<+>>]
            call @deref_int_inc(i8 %3)
            enable next block when we return
            <<<<<<#caller/%call_term_for_1
            +
            stack_width 20
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>>#arg_0
            dup15/17/18 <<<<<<<<<<<<<<[->>+>+<<<]
            mov17/15 >>[-<<+>>]
            mov18/29 >[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++
            l1 <
            dup0/31/32 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov32/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r20 >>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<<<#===FRAME_deref_int_inc
            +
            >>>#deref_int_inc
            +
            >>>>#deref_int_inc/b0
            +
        >>>]
        >#B:%call_term_for_1
        [
            -
            %4 = ptrtoint i32* %1 to i8
            >>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/18/19 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov19/0 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++
            mov17/16 [-<+>]
            call @deref_int(i8 %4)
            enable next block when we return
            <<<<<#caller/%call_term_for_2
            +
            stack_width 20
            ret_pad_width 8
            copy up arg 0
            >>>>>>>>>>>>>>>>>#arg_0
            dup16/17/18 <<<<<<<<<<<<<[->+>+<<]
            mov17/16 >[-<+>]
            mov18/29 >[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++
            l1 <
            dup0/31/32 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov32/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r20 >>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<<<#===FRAME_deref_int
            +
            >>>>>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>]
        >#B:%call_term_for_2
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>>>-
            l1 <
            <<<<<<[-]
            r1 >
            l10 <<<<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<]
<<<<<<]
