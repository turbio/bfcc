r7 >>>>>>>
+++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>#main
+
>#main/b0
+
<<<<<[
    >#putstr
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/putstr
            >>>>>>-
            l26 <<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_putstr
        >#F:putstr
        >#F:putdec
        >#F:call_me
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%6
        >#B:%call_term_for_2
        >#B:%11
        >#alloc_%2
        >#%4_=_load_i8**_%2__align_8(mult)
        >#%5_=_icmp_ne_i8*_%4__i8*_null(mult)
        >#%7_=_load_i8**_%2__align_8(mult)
        >#%8_=_ptrtoint_i8*_%7_to_i8(mult)
        >#%9_=_load_i8**_%2__align_8(mult)
        >#%10_=_getelementptr_i8*_%9__i32_1(mult)
        >#%0
        <<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/20 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i8*_ align 8
            store i8* %0_ i8** %2_ align 8
            >>>>>>>>>>>[-]
            mov18/11 >>>>>>>[-<<<<<<<+>>>>>>>]
            br label %3
            <<<<<<<<<<<+
        <<]
        >>#B:%3
        [
            -
            %4 = load i8** %2_ align 8
            >>>>>[-]
            dup11/12/19 <[->+>>>>>>>+<<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %5 = icmp ne i8* %4_ i8* null
            <<<<<<[-]
            dup12/20/19 <[->>>>>>>>+<+<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov19/23 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<+
            >>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<+
            >>>>>>>>>]
            br i1 %5_ label %6_ label %11
            <<<<<<<<<<<<<<<<+
            >>>>>>>[
                -
                <<<<<<<-
                >>+
                #B:putstr/6_true
            >>>>>]
            <<<<<<<[
                -
                >>>>+
                #B:putstr/11_false
            <<<<]
        >]
        >#B:%6
        [
            -
            %7 = load i8** %2_ align 8
            >>>>>>[-]
            dup11/14/19 <<<[->>>+>>>>>+<<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %8 = ptrtoint i8* %7 to i8
            <<<<[-]
            dup14/19/20 <[->>>>>+>+<<<<<<]
            mov19/14 >>>>>[-<<<<<+>>>>>]
            mov20/15 >[-<<<<<+>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup15/19/20 >>>>>>[->>>>+>+<<<<<]
            mov19/15 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %9 = load i8** %2_ align 8
            >>>>>>>[-]
            dup11/16/19 <<<<<[->>>>>+>>>+<<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %10 = getelementptr i8* %9_ i32 1
            <<[-]
            dup16/19/20 <[->>>+>+<<<<]
            mov19/16 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov20/17 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i8* %10_ i8** %2_ align 8
            dup17/19/20 <<<<[->>+>+<<<]
            mov19/17 >>[-<<+>>]
            <<<<<<<<[-]
            mov20/11 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<+
        >>]
        >#B:%11
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l9 <<<<<<<<<
        >>>>>>>>>>]
    <<<<<<<<<]
    >#putdec
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/putdec
            >>>>>>-
            l49 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_putdec
        >#F:putstr
        >#F:putdec
        >#F:call_me
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%6
        >#B:%call_term_for_1
        >#B:%7
        >#B:%8
        >#B:%13
        >#B:%16
        >#B:%17
        >#B:%20
        >#B:%call_term_for_8
        >#B:%29
        >#alloc_%2
        >#alloc_%3
        >#%4_=_load_i32*_%2__align_4(mult)
        >#%5_=_icmp_ne_i32_%4__i32_0(mult)
        >#%9_=_load_i32*_%2__align_4(mult)
        >#%10_=_load_i32*_%3__align_4(mult)
        >#%11_=_sdiv_i32_%9__i32_%10(mult)
        >#%12_=_icmp_sgt_i32_%11__i32_10(mult)
        >#%14_=_load_i32*_%3__align_4(mult)
        >#%15_=_mul_i32_%14__i32_10(mult)
        >#%18_=_load_i32*_%3__align_4(mult)
        >#%19_=_icmp_ne_i32_%18__i32_0(mult)
        >#%21_=_load_i32*_%2__align_4(mult)
        >#%22_=_load_i32*_%3__align_4(mult)
        >#%23_=_sdiv_i32_%21__i32_%22(mult)
        >#%24_=_srem_i32_%23__i32_10(mult)
        >#%25_=_add_i32_48__i32_%24(mult)
        >#%26_=_trunc_i32_%25_to_i8(mult)
        >#%27_=_load_i32*_%3__align_4(mult)
        >#%28_=_sdiv_i32_%27__i32_10(mult)
        >#%0
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/39 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            store i32 %0_ i32* %2_ align 4
            >>>>>>>>>>>>>>>>>[-]
            mov37/17 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %4 = load i32* %2_ align 4
            <<<<<<<<<<<<<<<<<<[-]
            dup17/19/38 <<[->>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov38/17 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %5 = icmp ne i32 %4_ i32 0
            <<<<<<<<<<<<<<<<<<[-]
            dup19/39/38 <[->>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov38/42 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>]
            br i1 %5_ label %7_ label %6
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<-
                >>>+
                #B:putdec/7_true
            >>>>>>>>>>>]
            <<<<<<<<<<<<<<[
                -
                >+
                #B:putdec/6_false
            <]
        <]
        >>#B:%6
        [
            -
            call @putchar(i8 48)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            br label %29
            >>>>>>>>+
        <<<<<<<<]
        >#B:%7
        [
            -
            store i32 1_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_1
            +
            <<<<<<<<<<<<<<<<<<<<[-]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%8
        [
            -
            %9 = load i32* %2_ align 4
            >>>>>>>>>>>[-]
            dup17/21/38 <<<<[->>>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov38/17 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %10 = load i32* %3_ align 4
            <<<<<<<<<<<<<<<<[-]
            dup18/22/38 <<<<[->>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %11 = sdiv i32 %9_ i32 %10
            <<<<<<<<<<<<<<<[-]
            dup21/38/39 <<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov38/21 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            dup22/40/41 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov40/22 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            dup41/43/45 >[->>+>>+<<<<]
            mov45/41 >>>>[-<<<<+>>>>]
            <<<<<<[
                >>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov39/46 <<<<<<<<<[->>>>>>>+<<<<<<<]
                >>>>>>>>>+
                <<<<<[
                    -
                    <+
                    >>>>[
                        -
                        <<<<-
                        r1 >
                    >>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<]
                >>>>>-
                <<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>>>>>>]
                mov46/39 >>>>[-<<<<<<<+>>>>>>>]
                dup41/43/45 <<<<<[->>+>>+<<<<]
                mov45/41 >>>>[-<<<<+>>>>]
            <<<<<<]
            >>[-]
            >>[-]
            %12 = icmp sgt i32 %11_ i32 10
            <<<<<<<<<<<<<<<<<<<[-]
            dup23/38/39 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov38/23 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov39/41 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>]
            br i1 %12_ label %13_ label %16
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<-
                >>>>>+
                #B:putdec/13_true
            >>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/16_false
            <<<<<<]
        >>>>]
        >#B:%13
        [
            -
            %14 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup18/25/38 <<<<<<<[->>>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %15 = mul i32 %14_ i32 10
            <<<<<<<<<<<<[-]
            dup25/38/39 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov38/25 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            [
                -
                dup39/26/41 <[-<<<<<<<<<<<<<+>>>>>>>>>>>>>>>+<<]
                mov41/39 >>[-<<+>>]
            <]
            <[-]
            store i32 %15_ i32* %3_ align 4
            dup26/38/39 <<<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov38/26 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >]
        >#B:%16
        [
            -
            br label %17
            >+
        <]
        >#B:%17
        [
            -
            %18 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup18/27/38 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %19 = icmp ne i32 %18_ i32 0
            <<<<<<<<<<[-]
            dup27/38/39 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov38/27 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov39/42 <<<<<[->>>+<<<]
            >>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            br i1 %19_ label %20_ label %29
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/20_true
            >>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>+
                #B:putdec/29_false
            <<<<<<<<<<]
        >>>>>>>]
        >#B:%20
        [
            -
            %21 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>[-]
            dup17/29/38 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov38/17 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %22 = load i32* %3_ align 4
            <<<<<<<<[-]
            dup18/30/38 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %23 = sdiv i32 %21_ i32 %22
            <<<<<<<[-]
            dup29/38/39 <<[->>>>>>>>>+>+<<<<<<<<<<]
            mov38/29 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            dup30/40/41 <<<<<<<<[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov40/30 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            dup41/43/44 >[->>+>+<<<]
            mov44/41 >>>[-<<<+>>>]
            <<<<<[
                >>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov39/45 <<<<<<<<[->>>>>>+<<<<<<]
                >>>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<<<<<<<+
                >>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<-
                >>>>>>>>>>>]
                mov45/39 >>>[-<<<<<<+>>>>>>]
                dup41/43/44 <<<<[->>+>+<<<]
                mov44/41 >>>[-<<<+>>>]
            <<<<<]
            >>[-]
            >>[-]
            %24 = srem i32 %23_ i32 10
            <<<<<<<<<<<[-]
            dup31/38/39 <[->>>>>>>+>+<<<<<<<<]
            mov38/31 >>>>>>>[-<<<<<<<+>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup40/42/43 [->>+>+<<<]
            mov43/40 >>>[-<<<+>>>]
            <<<<#op0
            >#op1
            >#neg
            <<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov39/44 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                mov44/39 <<[-<<<<<+>>>>>]
                dup40/42/43 <<<<[->>+>+<<<]
                mov43/40 >>>[-<<<+>>>]
            <<<<]
            >>#neg
            [
                mov42/32 >[-<<<<<<<<<<+>>>>>>>>>>]
                <[
                    -
                    <<<<<<<<<-
                >>>>>>>>>]
            ]
            mov41/32 [-<<<<<<<<<+>>>>>>>>>]
            <[-]
            >>[-]
            %25 = add i32 48_ i32 %24
            <<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            dup32/39/40 <<<<<<[->>>>>>>+>+<<<<<<<<]
            mov39/32 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov38/33 <[-<<<<<+>>>>>]
            >>[
                -
                <<<<<<<+
            >>>>>>>]
            %26 = trunc i32 %25 to i8
            <<<<<<[-]
            dup33/38/39 <[->>>>>+>+<<<<<<]
            mov38/33 >>>>>[-<<<<<+>>>>>]
            mov39/34 >[-<<<<<+>>>>>]
            call @putchar(i8 %26)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_8
            +
            putchar intrinsic
            dup34/38/39 >>>>>>>>>>>>>>>>>>>[->>>>+>+<<<<<]
            mov38/34 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_8
        [
            -
            %27 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>[-]
            dup18/35/38 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %28 = sdiv i32 %27_ i32 10
            <<[-]
            dup35/38/39 <[->>>+>+<<<<]
            mov38/35 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup40/42/43 [->>+>+<<<]
            mov43/40 >>>[-<<<+>>>]
            <<<<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov39/44 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<+
                >>>>>[
                    [-]
                    <<<<<-
                >>>>>]
                mov44/39 >>>[-<<<<<+>>>>>]
                dup40/42/43 <<<<[->>+>+<<<]
                mov43/40 >>>[-<<<+>>>]
            <<<<]
            >[-]
            >>[-]
            store i32 %28_ i32* %3_ align 4
            dup36/38/39 <<<<<<[->>+>+<<<]
            mov38/36 >>[-<<+>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %17
            <<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>]
        >#B:%29
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l9 <<<<<<<<<
        >>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<]
    >#call_me
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/call_me
            >>>>>>-
            l26 <<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_call_me
        >#F:putstr
        >#F:putdec
        >#F:call_me
        >#F:main
        >#B:%no_block0_call_for_call_me
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#alloc_%4
        >#alloc_%5
        >#alloc_%6
        >#%7_=_load_i32*_%4__align_4(mult)
        >#%8_=_trunc_i32_%7_to_i8(mult)
        >#%9_=_load_i32*_%5__align_4(mult)
        >#%10_=_trunc_i32_%9_to_i8(mult)
        >#%11_=_load_i32*_%6__align_4(mult)
        >#%12_=_trunc_i32_%11_to_i8(mult)
        >#%0
        >#%1
        >#%2
        <<<<<<<<<<<<<<<<<#B:%no_block0_call_for_call_me
        [
            -
            copy up args
            >>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/22 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            mov0/24 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            mov0/26 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            br label %3
            >>>>>>>+
        <<]
        >>#B:%3
        [
            -
            %4 = alloca i32_ align 4
            %5 = alloca i32_ align 4
            %6 = alloca i32_ align 4
            store i32 %0_ i32* %4_ align 4
            >>>>[-]
            mov20/11 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            store i32 %1_ i32* %5_ align 4
            <<<<<<<<[-]
            mov21/12 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            store i32 %2_ i32* %6_ align 4
            <<<<<<<<[-]
            mov22/13 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            %7 = load i32* %4_ align 4
            <<<<<<<<[-]
            dup11/14/23 <<<[->>>+>>>>>>>>>+<<<<<<<<<<<<]
            mov23/11 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            %8 = trunc i32 %7 to i8
            <<<<<<<<[-]
            dup14/24/23 <[->>>>>>>>>>+<+<<<<<<<<<]
            mov24/14 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            mov23/15 <[-<<<<<<<<+>>>>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup15/23/25 >>>>>>>[->>>>>>>>+>>+<<<<<<<<<<]
            mov23/15 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            >>.
            [-]
        <<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            %9 = load i32* %5_ align 4
            >>>>>>>>[-]
            dup12/16/23 <<<<[->>>>+>>>>>>>+<<<<<<<<<<<]
            mov23/12 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            %10 = trunc i32 %9 to i8
            <<<<<<[-]
            dup16/23/24 <[->>>>>>>+>+<<<<<<<<]
            mov23/16 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov24/17 >[-<<<<<<<+>>>>>>>]
            call @putchar(i8 %10)
            enable next block when we return
            <<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            dup17/23/24 >>>>>>>>[->>>>>>+>+<<<<<<<]
            mov23/17 >>>>>>[-<<<<<<+>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %11 = load i32* %6_ align 4
            >>>>>>>>>[-]
            dup13/18/23 <<<<<[->>>>>+>>>>>+<<<<<<<<<<]
            mov23/13 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %12 = trunc i32 %11 to i8
            <<<<[-]
            dup18/23/24 <[->>>>>+>+<<<<<<]
            mov23/18 >>>>>[-<<<<<+>>>>>]
            mov24/19 >[-<<<<<+>>>>>]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup19/23/24 >>>>>>>>>[->>>>+>+<<<<<]
            mov23/19 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>]
    <<<<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/main
            >>>>>>-
            l12 <<<<<<<<<<<<
        ]
        <<<<<<#mainloop_main
        >#F:putstr
        >#F:putdec
        >#F:call_me
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        <<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            call @call_me(i32 49_ i32 50_ i32 51)
            enable next block when we return
            >#caller/%call_term_for_0
            +
            stack_width 12
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>#arg_0
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<#constop_49
            +++++++++++++++++++++++++++++++++++++++++++++++++
            mov9/21 [->>>>>>>>>>>>+<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>#arg_1
            op_to_reg storing const value in temp address
            <<<<<<<<<<#constop_50
            ++++++++++++++++++++++++++++++++++++++++++++++++++
            mov10/20 [->>>>>>>>>>+<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>#arg_2
            op_to_reg storing const value in temp address
            <<<<<<<<#constop_51
            +++++++++++++++++++++++++++++++++++++++++++++++++++
            mov11/19 [->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++
            l1 <
            dup0/23/24 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov24/0 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r12 >>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<#===FRAME_call_me
            +
            >>>#call_me
            +
            >>#call_me/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            <<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>>]
    <<<<]
<<<<]
