r7 >>>>>>>
+++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>#main
+
>#main/b0
+
<<<<<[
    >#putstr
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/putstr
            >>>>>>-
            l26 <<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_putstr
        >#F:putstr
        >#F:putdec
        >#F:another_stack
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%6
        >#B:%call_term_for_2
        >#B:%11
        >#alloc_%2
        >#%4_=_load_i8**_%2__align_8(mult)
        >#%5_=_icmp_ne_i8*_%4__i8*_null(mult)
        >#%7_=_load_i8**_%2__align_8(mult)
        >#%8_=_ptrtoint_i8*_%7_to_i8(mult)
        >#%9_=_load_i8**_%2__align_8(mult)
        >#%10_=_getelementptr_i8*_%9__i32_1(mult)
        >#%0
        <<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/20 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i8*_ align 8
            store i8* %0_ i8** %2_ align 8
            >>>>>>>>>>>[-]
            mov18/11 >>>>>>>[-<<<<<<<+>>>>>>>]
            br label %3
            <<<<<<<<<<<+
        <<]
        >>#B:%3
        [
            -
            %4 = load i8** %2_ align 8
            >>>>>[-]
            dup11/12/19 <[->+>>>>>>>+<<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %5 = icmp ne i8* %4_ i8* null
            <<<<<<[-]
            dup12/20/19 <[->>>>>>>>+<+<<<<<<<]
            mov20/12 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov19/23 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<+
            >>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<+
            >>>>>>>>>]
            br i1 %5_ label %6_ label %11
            <<<<<<<<<<<<<<<<+
            >>>>>>>[
                -
                <<<<<<<-
                >>+
                #B:putstr/6_true
            >>>>>]
            <<<<<<<[
                -
                >>>>+
                #B:putstr/11_false
            <<<<]
        >]
        >#B:%6
        [
            -
            %7 = load i8** %2_ align 8
            >>>>>>[-]
            dup11/14/19 <<<[->>>+>>>>>+<<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %8 = ptrtoint i8* %7 to i8
            <<<<[-]
            dup14/19/20 <[->>>>>+>+<<<<<<]
            mov19/14 >>>>>[-<<<<<+>>>>>]
            mov20/15 >[-<<<<<+>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup15/19/20 >>>>>>[->>>>+>+<<<<<]
            mov19/15 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %9 = load i8** %2_ align 8
            >>>>>>>[-]
            dup11/16/19 <<<<<[->>>>>+>>>+<<<<<<<<]
            mov19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %10 = getelementptr i8* %9_ i32 1
            <<[-]
            dup16/19/20 <[->>>+>+<<<<]
            mov19/16 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            mov20/17 <[-<<<+>>>]
            >[
                -
                <<<<+
            >>>>]
            store i8* %10_ i8** %2_ align 8
            dup17/19/20 <<<<[->>+>+<<<]
            mov19/17 >>[-<<+>>]
            <<<<<<<<[-]
            mov20/11 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<+
        >>]
        >#B:%11
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l9 <<<<<<<<<
        >>>>>>>>>>]
    <<<<<<<<<]
    >#putdec
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/putdec
            >>>>>>-
            l49 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_putdec
        >#F:putstr
        >#F:putdec
        >#F:another_stack
        >#F:main
        >#B:%1
        >#B:%ret_lading_pad
        >#B:%6
        >#B:%call_term_for_1
        >#B:%7
        >#B:%8
        >#B:%13
        >#B:%16
        >#B:%17
        >#B:%20
        >#B:%call_term_for_8
        >#B:%29
        >#alloc_%2
        >#alloc_%3
        >#%4_=_load_i32*_%2__align_4(mult)
        >#%5_=_icmp_ne_i32_%4__i32_0(mult)
        >#%9_=_load_i32*_%2__align_4(mult)
        >#%10_=_load_i32*_%3__align_4(mult)
        >#%11_=_sdiv_i32_%9__i32_%10(mult)
        >#%12_=_icmp_sgt_i32_%11__i32_10(mult)
        >#%14_=_load_i32*_%3__align_4(mult)
        >#%15_=_mul_i32_%14__i32_10(mult)
        >#%18_=_load_i32*_%3__align_4(mult)
        >#%19_=_icmp_ne_i32_%18__i32_0(mult)
        >#%21_=_load_i32*_%2__align_4(mult)
        >#%22_=_load_i32*_%3__align_4(mult)
        >#%23_=_sdiv_i32_%21__i32_%22(mult)
        >#%24_=_srem_i32_%23__i32_10(mult)
        >#%25_=_add_i32_48__i32_%24(mult)
        >#%26_=_trunc_i32_%25_to_i8(mult)
        >#%27_=_load_i32*_%3__align_4(mult)
        >#%28_=_sdiv_i32_%27__i32_10(mult)
        >#%0
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%1
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            mov0/39 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            store i32 %0_ i32* %2_ align 4
            >>>>>>>>>>>>>>>>>[-]
            mov37/17 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %4 = load i32* %2_ align 4
            <<<<<<<<<<<<<<<<<<[-]
            dup17/19/38 <<[->>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov38/17 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %5 = icmp ne i32 %4_ i32 0
            <<<<<<<<<<<<<<<<<<[-]
            dup19/39/38 <[->>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<]
            mov39/19 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov38/42 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>]
            br i1 %5_ label %7_ label %6
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<-
                >>>+
                #B:putdec/7_true
            >>>>>>>>>>>]
            <<<<<<<<<<<<<<[
                -
                >+
                #B:putdec/6_false
            <]
        <]
        >>#B:%6
        [
            -
            call @putchar(i8 48)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            br label %29
            >>>>>>>>+
        <<<<<<<<]
        >#B:%7
        [
            -
            store i32 1_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_1
            +
            <<<<<<<<<<<<<<<<<<<<[-]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        <]
        >#B:%8
        [
            -
            %9 = load i32* %2_ align 4
            >>>>>>>>>>>[-]
            dup17/21/38 <<<<[->>>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov38/17 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %10 = load i32* %3_ align 4
            <<<<<<<<<<<<<<<<[-]
            dup18/22/38 <<<<[->>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %11 = sdiv i32 %9_ i32 %10
            <<<<<<<<<<<<<<<[-]
            dup21/38/39 <<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov38/21 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            dup22/40/41 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov40/22 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            dup41/43/45 >[->>+>>+<<<<]
            mov45/41 >>>>[-<<<<+>>>>]
            <<<<<<[
                >>>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov39/46 <<<<<<<<<[->>>>>>>+<<<<<<<]
                >>>>>>>>>+
                <<<<<[
                    -
                    <+
                    >>>>[
                        -
                        <<<<-
                        r1 >
                    >>>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<<]
                >>>>>-
                <<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>>>>>>>>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>>>>>>]
                mov46/39 >>>>[-<<<<<<<+>>>>>>>]
                dup41/43/45 <<<<<[->>+>>+<<<<]
                mov45/41 >>>>[-<<<<+>>>>]
            <<<<<<]
            >>[-]
            >>[-]
            %12 = icmp sgt i32 %11_ i32 10
            <<<<<<<<<<<<<<<<<<<[-]
            dup23/38/39 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov38/23 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov39/41 <<<<[->>+<<]
            >>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>]
            br i1 %12_ label %13_ label %16
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<-
                >>>>>+
                #B:putdec/13_true
            >>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<[
                -
                >>>>>>+
                #B:putdec/16_false
            <<<<<<]
        >>>>]
        >#B:%13
        [
            -
            %14 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup18/25/38 <<<<<<<[->>>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %15 = mul i32 %14_ i32 10
            <<<<<<<<<<<<[-]
            dup25/38/39 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov38/25 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            [
                -
                dup39/26/41 <[-<<<<<<<<<<<<<+>>>>>>>>>>>>>>>+<<]
                mov41/39 >>[-<<+>>]
            <]
            <[-]
            store i32 %15_ i32* %3_ align 4
            dup26/38/39 <<<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            mov38/26 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >]
        >#B:%16
        [
            -
            br label %17
            >+
        <]
        >#B:%17
        [
            -
            %18 = load i32* %3_ align 4
            >>>>>>>>>>>>>>[-]
            dup18/27/38 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %19 = icmp ne i32 %18_ i32 0
            <<<<<<<<<<[-]
            dup27/38/39 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov38/27 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_0
            
            >>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov39/42 <<<<<[->>>+<<<]
            >>>>>+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            br i1 %19_ label %20_ label %29
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>+
                #B:putdec/20_true
            >>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>+
                #B:putdec/29_false
            <<<<<<<<<<]
        >>>>>>>]
        >#B:%20
        [
            -
            %21 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>[-]
            dup17/29/38 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            mov38/17 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %22 = load i32* %3_ align 4
            <<<<<<<<[-]
            dup18/30/38 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %23 = sdiv i32 %21_ i32 %22
            <<<<<<<[-]
            dup29/38/39 <<[->>>>>>>>>+>+<<<<<<<<<<]
            mov38/29 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            dup30/40/41 <<<<<<<<[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov40/30 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            dup41/43/44 >[->>+>+<<<]
            mov44/41 >>>[-<<<+>>>]
            <<<<<[
                >>>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov39/45 <<<<<<<<[->>>>>>+<<<<<<]
                >>>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<<<<<<<+
                >>>>>>>>>>>[
                    [-]
                    <<<<<<<<<<<-
                >>>>>>>>>>>]
                mov45/39 >>>[-<<<<<<+>>>>>>]
                dup41/43/44 <<<<[->>+>+<<<]
                mov44/41 >>>[-<<<+>>>]
            <<<<<]
            >>[-]
            >>[-]
            %24 = srem i32 %23_ i32 10
            <<<<<<<<<<<[-]
            dup31/38/39 <[->>>>>>>+>+<<<<<<<<]
            mov38/31 >>>>>>>[-<<<<<<<+>>>>>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup40/42/43 [->>+>+<<<]
            mov43/40 >>>[-<<<+>>>]
            <<<<#op0
            >#op1
            >#neg
            <<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov39/44 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                mov44/39 <<[-<<<<<+>>>>>]
                dup40/42/43 <<<<[->>+>+<<<]
                mov43/40 >>>[-<<<+>>>]
            <<<<]
            >>#neg
            [
                mov42/32 >[-<<<<<<<<<<+>>>>>>>>>>]
                <[
                    -
                    <<<<<<<<<-
                >>>>>>>>>]
            ]
            mov41/32 [-<<<<<<<<<+>>>>>>>>>]
            <[-]
            >>[-]
            %25 = add i32 48_ i32 %24
            <<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>#constop_48
            ++++++++++++++++++++++++++++++++++++++++++++++++
            dup32/39/40 <<<<<<[->>>>>>>+>+<<<<<<<<]
            mov39/32 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov38/33 <[-<<<<<+>>>>>]
            >>[
                -
                <<<<<<<+
            >>>>>>>]
            %26 = trunc i32 %25 to i8
            <<<<<<[-]
            dup33/38/39 <[->>>>>+>+<<<<<<]
            mov38/33 >>>>>[-<<<<<+>>>>>]
            mov39/34 >[-<<<<<+>>>>>]
            call @putchar(i8 %26)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_8
            +
            putchar intrinsic
            dup34/38/39 >>>>>>>>>>>>>>>>>>>[->>>>+>+<<<<<]
            mov38/34 >>>>[-<<<<+>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_8
        [
            -
            %27 = load i32* %3_ align 4
            >>>>>>>>>>>>>>>>>>>>[-]
            dup18/35/38 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>+<<<<<<<<<<<<<<<<<<<<]
            mov38/18 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %28 = sdiv i32 %27_ i32 10
            <<[-]
            dup35/38/39 <[->>>+>+<<<<]
            mov38/35 >>>[-<<<+>>>]
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            dup40/42/43 [->>+>+<<<]
            mov43/40 >>>[-<<<+>>>]
            <<<<[
                >>>>>#subnu_tmpb
                >#subnu_tmp0
                >#subnu_tmp1
                mov39/44 <<<<<<<[->>>>>+<<<<<]
                >>>>>>>+
                <<<<[
                    -
                    <+
                    >>>[
                        -
                        <<<-
                        r1 >
                    >>>]
                    r1 >
                    [
                        l1 <
                    ]
                    l1 <
                <<]
                >>>>-
                <<<<<<<<<<+
                >>>>>[
                    [-]
                    <<<<<-
                >>>>>]
                mov44/39 >>>[-<<<<<+>>>>>]
                dup40/42/43 <<<<[->>+>+<<<]
                mov43/40 >>>[-<<<+>>>]
            <<<<]
            >[-]
            >>[-]
            store i32 %28_ i32* %3_ align 4
            dup36/38/39 <<<<<<[->>+>+<<<]
            mov38/36 >>[-<<+>>]
            <<<<<<<<<<<<<<<<<<<<[-]
            mov39/18 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            br label %17
            <<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>]
        >#B:%29
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l9 <<<<<<<<<
        >>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<]
    >#another_stack
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/another_stack
            >>>>>>-
            l65 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_another_stack
        >#F:putstr
        >#F:putdec
        >#F:another_stack
        >#F:main
        >#B:%no_block0_call_for_another_stack
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#alloc_%1
        >#alloc_%2
        >#alloc_%3
        >#alloc_%4
        >#alloc_%5
        >#%6_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%7_=_load_i8*_%2__align_1(mult)
        >#%8_=_zext_i8_%7_to_i32(mult)
        >#%9_=_icmp_sgt_i32_%8__i32_0(mult)
        >#%10_=_zext_i1_%9_to_i32(mult)
        >#%11_=_add_i32_65__i32_%10(mult)
        >#%12_=_trunc_i32_%11_to_i8(mult)
        >#%13_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%14_=_zext_i8_%13_to_i32(mult)
        >#%15_=_load_i8*_%2__align_1(mult)
        >#%16_=_zext_i8_%15_to_i32(mult)
        >#%17_=_icmp_eq_i32_%14__i32_%16(mult)
        >#%18_=_zext_i1_%17_to_i32(mult)
        >#%19_=_add_i32_65__i32_%18(mult)
        >#%20_=_trunc_i32_%19_to_i8(mult)
        >#%21_=_load_i8*_%2__align_1(mult)
        >#%22_=_zext_i8_%21_to_i64(mult)
        >#%23_=_inttoptr_i64_%22_to_i32*(mult)
        >#%24_=_icmp_eq_i32*_%1__i32*_%23(mult)
        >#%25_=_zext_i1_%24_to_i32(mult)
        >#%26_=_add_i32_65__i32_%25(mult)
        >#%27_=_trunc_i32_%26_to_i8(mult)
        >#%28_=_load_i32**_%3__align_8(mult)
        >#%29_=_load_i32*_%28__align_4(mult)
        >#%30_=_load_i32*_%4__align_4(mult)
        >#%31_=_trunc_i32_%30_to_i8(mult)
        >#%32_=_load_i32**_%3__align_8(mult)
        >#%33_=_load_i32**_%3__align_8(mult)
        >#%34_=_load_i32*_%33__align_4(mult)
        >#%35_=_load_i32*_%5__align_4(mult)
        >#%36_=_trunc_i32_%35_to_i8(mult)
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_another_stack
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            %2 = alloca i8_ align 1
            %3 = alloca i32*_ align 8
            %4 = alloca i32_ align 4
            %5 = alloca i32_ align 4
            store i32 112_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov49/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %6 = ptrtoint i32* %1 to i8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/51/50 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            ++++++++++++++
            mov50/18 [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i8 %6_ i8* %2_ align 1
            dup18/49/51 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov51/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32* %1_ i32** %3_ align 8
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/50/51 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov51/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov49/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %7 = load i8* %2_ align 1
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup14/19/49 <<<<<[->>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %8 = zext i8 %7 to i32
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup19/49/50 <[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov50/20 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %9 = icmp sgt i32 %8_ i32 0
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup20/49/50 <[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/20 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>>#constop_0
            
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov50/53 <<<<<[->>>+<<<]
            >>>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %10 = zext i1 %9 to i32
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup21/49/50 <[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov50/22 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %11 = add i32 65_ i32 %10
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup22/50/51 <<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/22 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov49/23 <[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            >>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %12 = trunc i32 %11 to i8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup23/49/50 <[->>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/23 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov50/24 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup24/49/50 >>>>>>>>>>>>>>>>[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/24 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            %13 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/50/51 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov51/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++
            mov49/25 [-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            %14 = zext i8 %13 to i32
            <<<<<<<<<<<<<<<<<<<<<<<[-]
            dup25/49/50 <[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/25 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            mov50/26 >[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            %15 = load i8* %2_ align 1
            <<<<<<<<<<<<<<<<<<<<<<<[-]
            dup14/27/49 <<<<<<<<<<<<<[->>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %16 = zext i8 %15 to i32
            <<<<<<<<<<<<<<<<<<<<<[-]
            dup27/49/50 <[->>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/27 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            mov50/28 >[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            %17 = icmp eq i32 %14_ i32 %16
            <<<<<<<<<<<<<<<<<<<<<[-]
            dup26/49/50 <<<[->>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/26 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            dup28/51/52 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov51/28 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            >>>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov52/56 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<<<<<[
                -
                >>>+
                >>>[
                    -
                    <<<-
                    r1 >
                >>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<]
            >>>>>>>>-
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>>>>>>]
            %18 = zext i1 %17 to i32
            <<<<<<<<<<<<<<<<<<<<<<<[-]
            dup29/49/50 <[->>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<]
            mov49/29 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            mov50/30 >[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %19 = add i32 65_ i32 %18
            <<<<<<<<<<<<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup30/50/51 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<]
            mov50/30 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            mov49/31 <[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            >>[
                -
                <<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>]
            %20 = trunc i32 %19 to i8
            <<<<<<<<<<<<<<<<<<<[-]
            dup31/49/50 <[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov49/31 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            mov50/32 >[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            call @putchar(i8 %20)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            dup32/49/50 >>>>>>>>>>>>>>>>>>>>>>>[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov49/32 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %21 = load i8* %2_ align 1
            >>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup14/33/49 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %22 = zext i8 %21 to i64
            <<<<<<<<<<<<<<<[-]
            dup33/49/50 <[->>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<]
            mov49/33 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            mov50/34 >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            %23 = inttoptr i64 %22 to i32*
            <<<<<<<<<<<<<<<[-]
            dup34/49/50 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov49/34 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            mov50/35 >[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            %24 = icmp eq i32* %1_ i32* %23
            <<<<<<<<<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/50/51 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov51/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++
            dup35/51/52 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<]
            mov51/35 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov52/54 <<<<[->>+<<]
            >>>>+
            <<<<<<<[
                -
                >>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<]
            >>>>>>>-
            <<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>]
            %25 = zext i1 %24 to i32
            <<<<<<<<<<<<<<<<[-]
            dup36/49/50 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov49/36 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            mov50/37 >[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            %26 = add i32 65_ i32 %25
            <<<<<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup37/50/51 <<<<<<<<<<<<[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov50/37 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            mov49/38 <[-<<<<<<<<<<<+>>>>>>>>>>>]
            >>[
                -
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            %27 = trunc i32 %26 to i8
            <<<<<<<<<<<<[-]
            dup38/49/50 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov49/38 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            mov50/39 >[-<<<<<<<<<<<+>>>>>>>>>>>]
            call @putchar(i8 %27)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup39/49/50 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov49/39 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %28 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup15/40/49 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %29 = load i32* %28_ align 4
            <<<<<<<<[-]
            dup40/49/50 <[->>>>>>>>>+>+<<<<<<<<<<]
            mov49/40 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov55/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov55/59 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<<<<<<<<[
                -
                >>>>>>+
                >>>[
                    -
                    <<<-
                    r1 >
                >>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov59/53 [-<<<<<<+>>>>>>]
                <<<<<<+++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>>]
            <<<[
                if neg
                <<<+++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                mov52/51 <[-<+>]
                mov53/52 >[-<+>]
                
                mov50/53 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup50/51/53 <<<[->+>>+<<<]
            mov51/50 >[-<+>]
            >[
                mov54/51 >>[-<<<+>>>]
                mov53/54 <[->+<]
                mov52/53 <[->+<]
                r1 >
                -
            ]
            mov53/41 >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            store i32 %29_ i32* %4_ align 4
            dup41/49/50 <<<<<<<<<<<<[->>>>>>>>+>+<<<<<<<<<]
            mov49/41 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov50/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %30 = load i32* %4_ align 4
            <<<<<<<<[-]
            dup16/42/49 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %31 = trunc i32 %30 to i8
            <<<<<<[-]
            dup42/49/50 <[->>>>>>>+>+<<<<<<<<]
            mov49/42 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov50/43 >[-<<<<<<<+>>>>>>>]
            call @putchar(i8 %31)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            dup43/49/50 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>+>+<<<<<<<]
            mov49/43 >>>>>>[-<<<<<<+>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_3
        [
            -
            %32 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup15/44/49 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 97_ i32* %32_ align 4
            op_to_reg storing const value in temp address
            #constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup44/50/51 <<<<<[->>>>>>+>+<<<<<<<]
            mov50/44 >>>>>>[-<<<<<<+>>>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/57/58 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov57/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov57/62 <<<<<<<[->>>>>+<<<<<]
            >>>>>>>+
            <<<<<<<<<<<<<[
                -
                >>>>>>>+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<]
            >>>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov62/54 [-<<<<<<<<+>>>>>>>>]
                <<<<<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>>>>]
            <<<<[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            mov49/55 <<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                mov53/52 <[-<+>]
                mov54/53 >[-<+>]
                mov55/54 >[-<+>]
                mov51/55 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            mov55/51 >>>>[-<<<<+>>>>]
            <<[
                mov56/52 >>>[-<<<<+>>>>]
                
                mov53/54 <<<[->+<]
                r1 >
                -
            ]
            %33 = load i32** %3_ align 8
            <<<<<<<<[-]
            dup15/45/49 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %34 = load i32* %33_ align 4
            <<<[-]
            dup45/49/50 <[->>>>+>+<<<<<]
            mov49/45 >>>>[-<<<<+>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov55/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov55/57 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov57/53 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                mov52/51 <[-<+>]
                mov53/52 >[-<+>]
                
                mov50/53 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup50/51/53 <<<[->+>>+<<<]
            mov51/50 >[-<+>]
            >[
                mov54/51 >>[-<<<+>>>]
                mov53/54 <[->+<]
                mov52/53 <[->+<]
                r1 >
                -
            ]
            mov53/46 >[-<<<<<<<+>>>>>>>]
            store i32 %34_ i32* %5_ align 4
            dup46/49/50 <<<<<<<[->>>+>+<<<<]
            mov49/46 >>>[-<<<+>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov50/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %35 = load i32* %5_ align 4
            <<<[-]
            dup17/47/49 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov49/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %36 = trunc i32 %35 to i8
            <[-]
            dup47/49/50 <[->>+>+<<<]
            mov49/47 >>[-<<+>>]
            mov50/48 >[-<<+>>]
            call @putchar(i8 %36)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            dup48/49/50 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->+>+<<]
            mov49/48 >[-<+>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/main
            >>>>>>-
            l66 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_main
        >#F:putstr
        >#F:putdec
        >#F:another_stack
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#alloc_%1
        >#alloc_%2
        >#alloc_%3
        >#alloc_%4
        >#alloc_%5
        >#%6_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%7_=_load_i8*_%2__align_1(mult)
        >#%8_=_zext_i8_%7_to_i32(mult)
        >#%9_=_icmp_sgt_i32_%8__i32_0(mult)
        >#%10_=_zext_i1_%9_to_i32(mult)
        >#%11_=_add_i32_65__i32_%10(mult)
        >#%12_=_trunc_i32_%11_to_i8(mult)
        >#%13_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%14_=_zext_i8_%13_to_i32(mult)
        >#%15_=_load_i8*_%2__align_1(mult)
        >#%16_=_zext_i8_%15_to_i32(mult)
        >#%17_=_icmp_eq_i32_%14__i32_%16(mult)
        >#%18_=_zext_i1_%17_to_i32(mult)
        >#%19_=_add_i32_65__i32_%18(mult)
        >#%20_=_trunc_i32_%19_to_i8(mult)
        >#%21_=_load_i8*_%2__align_1(mult)
        >#%22_=_zext_i8_%21_to_i64(mult)
        >#%23_=_inttoptr_i64_%22_to_i32*(mult)
        >#%24_=_icmp_eq_i32*_%1__i32*_%23(mult)
        >#%25_=_zext_i1_%24_to_i32(mult)
        >#%26_=_add_i32_65__i32_%25(mult)
        >#%27_=_trunc_i32_%26_to_i8(mult)
        >#%28_=_load_i32**_%3__align_8(mult)
        >#%29_=_load_i32*_%28__align_4(mult)
        >#%30_=_load_i32*_%4__align_4(mult)
        >#%31_=_trunc_i32_%30_to_i8(mult)
        >#%32_=_load_i32**_%3__align_8(mult)
        >#%33_=_load_i32**_%3__align_8(mult)
        >#%34_=_load_i32*_%33__align_4(mult)
        >#%35_=_load_i32*_%5__align_4(mult)
        >#%36_=_trunc_i32_%35_to_i8(mult)
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            %2 = alloca i8_ align 1
            %3 = alloca i32*_ align 8
            %4 = alloca i32_ align 4
            %5 = alloca i32_ align 4
            store i32 112_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov50/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %6 = ptrtoint i32* %1 to i8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/52/51 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov51/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            +++++++++++++++
            mov51/19 [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i8 %6_ i8* %2_ align 1
            dup19/50/52 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/19 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov52/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32* %1_ i32** %3_ align 8
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/51/52 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov52/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov50/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %7 = load i8* %2_ align 1
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup15/20/50 <<<<<[->>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %8 = zext i8 %7 to i32
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup20/50/51 <[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/20 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov51/21 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %9 = icmp sgt i32 %8_ i32 0
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup21/50/51 <[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            op_to_reg storing const value in temp address
            >>>#constop_0
            
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov51/54 <<<<<[->>>+<<<]
            >>>>>+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %10 = zext i1 %9 to i32
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup22/50/51 <[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/22 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov51/23 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %11 = add i32 65_ i32 %10
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup23/51/52 <<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov51/23 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov50/24 <[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            >>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %12 = trunc i32 %11 to i8
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            dup24/50/51 <[->>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/24 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            mov51/25 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            dup25/50/51 >>>>>>>>>>>>>>>>>[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/25 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            %13 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/51/52 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov52/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++
            mov50/26 [-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            %14 = zext i8 %13 to i32
            <<<<<<<<<<<<<<<<<<<<<<<[-]
            dup26/50/51 <[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/26 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            mov51/27 >[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            %15 = load i8* %2_ align 1
            <<<<<<<<<<<<<<<<<<<<<<<[-]
            dup15/28/50 <<<<<<<<<<<<<[->>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %16 = zext i8 %15 to i32
            <<<<<<<<<<<<<<<<<<<<<[-]
            dup28/50/51 <[->>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/28 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            mov51/29 >[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            %17 = icmp eq i32 %14_ i32 %16
            <<<<<<<<<<<<<<<<<<<<<[-]
            dup27/50/51 <<<[->>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/27 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            dup29/52/53 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<]
            mov52/29 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            >>>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov53/57 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<<<<<[
                -
                >>>+
                >>>[
                    -
                    <<<-
                    r1 >
                >>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<]
            >>>>>>>>-
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>>>>>>]
            %18 = zext i1 %17 to i32
            <<<<<<<<<<<<<<<<<<<<<<<[-]
            dup30/50/51 <[->>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<]
            mov50/30 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            mov51/31 >[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %19 = add i32 65_ i32 %18
            <<<<<<<<<<<<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup31/51/52 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<]
            mov51/31 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            mov50/32 <[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            >>[
                -
                <<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>]
            %20 = trunc i32 %19 to i8
            <<<<<<<<<<<<<<<<<<<[-]
            dup32/50/51 <[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            mov50/32 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            mov51/33 >[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            call @putchar(i8 %20)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            dup33/50/51 >>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            mov50/33 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %21 = load i8* %2_ align 1
            >>>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup15/34/50 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %22 = zext i8 %21 to i64
            <<<<<<<<<<<<<<<[-]
            dup34/50/51 <[->>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<]
            mov50/34 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            mov51/35 >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            %23 = inttoptr i64 %22 to i32*
            <<<<<<<<<<<<<<<[-]
            dup35/50/51 <[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            mov50/35 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            mov51/36 >[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            %24 = icmp eq i32* %1_ i32* %23
            <<<<<<<<<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            dup0/51/52 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov52/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++
            dup36/52/53 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<]
            mov52/36 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov53/55 <<<<[->>+<<]
            >>>>+
            <<<<<<<[
                -
                >>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<]
            >>>>>>>-
            <<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>]
            %25 = zext i1 %24 to i32
            <<<<<<<<<<<<<<<<[-]
            dup37/50/51 <[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov50/37 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            mov51/38 >[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            %26 = add i32 65_ i32 %25
            <<<<<<<<<<<<[-]
            op_to_reg storing const value in temp address
            >>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup38/51/52 <<<<<<<<<<<<[->>>>>>>>>>>>>+>+<<<<<<<<<<<<<<]
            mov51/38 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            mov50/39 <[-<<<<<<<<<<<+>>>>>>>>>>>]
            >>[
                -
                <<<<<<<<<<<<<+
            >>>>>>>>>>>>>]
            %27 = trunc i32 %26 to i8
            <<<<<<<<<<<<[-]
            dup39/50/51 <[->>>>>>>>>>>+>+<<<<<<<<<<<<]
            mov50/39 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            mov51/40 >[-<<<<<<<<<<<+>>>>>>>>>>>]
            call @putchar(i8 %27)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            dup40/50/51 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>>>>>+>+<<<<<<<<<<<]
            mov50/40 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %28 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup16/41/50 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %29 = load i32* %28_ align 4
            <<<<<<<<[-]
            dup41/50/51 <[->>>>>>>>>+>+<<<<<<<<<<]
            mov50/41 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/56/57 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov56/60 <<<<<<[->>>>+<<<<]
            >>>>>>+
            <<<<<<<<<<<[
                -
                >>>>>>+
                >>>[
                    -
                    <<<-
                    r1 >
                >>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov60/54 [-<<<<<<+>>>>>>]
                <<<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>>]
            <<<[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                mov53/52 <[-<+>]
                mov54/53 >[-<+>]
                
                mov51/54 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup51/52/54 <<<[->+>>+<<<]
            mov52/51 >[-<+>]
            >[
                mov55/52 >>[-<<<+>>>]
                mov54/55 <[->+<]
                mov53/54 <[->+<]
                r1 >
                -
            ]
            mov54/42 >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            store i32 %29_ i32* %4_ align 4
            dup42/50/51 <<<<<<<<<<<<[->>>>>>>>+>+<<<<<<<<<]
            mov50/42 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov51/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %30 = load i32* %4_ align 4
            <<<<<<<<[-]
            dup17/43/50 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %31 = trunc i32 %30 to i8
            <<<<<<[-]
            dup43/50/51 <[->>>>>>>+>+<<<<<<<<]
            mov50/43 >>>>>>>[-<<<<<<<+>>>>>>>]
            mov51/44 >[-<<<<<<<+>>>>>>>]
            call @putchar(i8 %31)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            dup44/50/51 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->>>>>>+>+<<<<<<<]
            mov50/44 >>>>>>[-<<<<<<+>>>>>>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_3
        [
            -
            %32 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            dup16/45/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 97_ i32* %32_ align 4
            op_to_reg storing const value in temp address
            #constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            dup45/51/52 <<<<<[->>>>>>+>+<<<<<<<]
            mov51/45 >>>>>>[-<<<<<<+>>>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/58/59 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov58/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov58/63 <<<<<<<[->>>>>+<<<<<]
            >>>>>>>+
            <<<<<<<<<<<<<[
                -
                >>>>>>>+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<]
            >>>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov63/55 [-<<<<<<<<+>>>>>>>>]
                <<<<<<<<+++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>>>>]
            <<<<[
                if neg
                <<<<+++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            mov50/56 <<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                mov54/53 <[-<+>]
                mov55/54 >[-<+>]
                mov56/55 >[-<+>]
                mov52/56 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            mov56/52 >>>>[-<<<<+>>>>]
            <<[
                mov57/53 >>>[-<<<<+>>>>]
                
                mov54/55 <<<[->+<]
                r1 >
                -
            ]
            %33 = load i32** %3_ align 8
            <<<<<<<<[-]
            dup16/46/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %34 = load i32* %33_ align 4
            <<<[-]
            dup46/50/51 <[->>>>+>+<<<<<]
            mov50/46 >>>>[-<<<<+>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            dup0/56/57 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            mov56/58 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                mov58/54 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                mov53/52 <[-<+>]
                mov54/53 >[-<+>]
                
                mov51/54 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            dup51/52/54 <<<[->+>>+<<<]
            mov52/51 >[-<+>]
            >[
                mov55/52 >>[-<<<+>>>]
                mov54/55 <[->+<]
                mov53/54 <[->+<]
                r1 >
                -
            ]
            mov54/47 >[-<<<<<<<+>>>>>>>]
            store i32 %34_ i32* %5_ align 4
            dup47/50/51 <<<<<<<[->>>+>+<<<<]
            mov50/47 >>>[-<<<+>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            mov51/18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %35 = load i32* %5_ align 4
            <<<[-]
            dup18/48/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov50/18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %36 = trunc i32 %35 to i8
            <[-]
            dup48/50/51 <[->>+>+<<<]
            mov50/48 >>[-<<+>>]
            mov51/49 >[-<<+>>]
            call @putchar(i8 %36)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            dup49/50/51 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->+>+<<]
            mov50/49 >[-<+>]
            >.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_4
        [
            -
            call @another_stack()
            enable next block when we return
            >#caller/%call_term_for_5
            +
            stack_width 66
            ret_pad_width 6
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            dup0/74/75 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            mov75/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r66 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<<#===FRAME_another_stack
            +
            >>>#another_stack
            +
            >>#another_stack/b0
            +
        >>>>>>>]
        >#B:%call_term_for_5
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>>>>>>>]
    <<<<<<<<<]
<<<<]
