r7 >>>>>>>
+++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>#main
+
>#main/b0
+
<<<<<[
    >#three_args
    [
        >>>>>#three_args/RET_LANDING_PAD
        [
            <<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/three_args
            >>>>>>-
            l18 <<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_three_args
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_b0_call_for_three_args
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#alloc_%4
        >#alloc_%5
        >#alloc_%6
        <<<<<<<<[
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/32 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            m0/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            br label %3
            >>>>>>>+
        <<]
        >>[
            -
            %4 = alloca i32_ align 4
            %5 = alloca i32_ align 4
            %6 = alloca i32_ align 4
            store i32 %0_ i32* %4_ align 4
            store sitch: alloca Some(11)
            store sitch: from LocalOperand { name: Number(0)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(11) __
            >>>>[-]
            m28/11 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            store i32 %1_ i32* %5_ align 4
            store sitch: alloca Some(12)
            store sitch: from LocalOperand { name: Number(1)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(12) __
            <<<<<<<<<<<<<<<<[-]
            m29/12 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            store i32 %2_ i32* %6_ align 4
            store sitch: alloca Some(13)
            store sitch: from LocalOperand { name: Number(2)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(13) __
            <<<<<<<<<<<<<<<<[-]
            m30/13 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            %7 = load i32* %4_ align 4
            >#load_ret_%7
            #load_thru_%4_to_%7
            <<<<<<<<<<<<<<#tmp0_for_load
            d11/17/31 <<<<<<[->>>>>>+>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            m17/11 >>>>>>[-<<<<<<+>>>>>>]
            %8 = trunc i32 %7 to i8
            >>>>>>>>>>>>>>#trunc_op_i32_%7
            >#trunc_ret_%8
            m31/32 <[->+<]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %9 = load i32* %5_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%9
            #load_thru_%5_to_%9
            <<<<<<<<<<<<<<<<<#tmp0_for_load
            d12/16/33 <<<<[->>>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            m16/12 >>>>[-<<<<+>>>>]
            %10 = trunc i32 %9 to i8
            >>>>>>>>>>>>>>>>>#trunc_op_i32_%9
            >#trunc_ret_%10
            m33/34 <[->+<]
            call @putchar(i8 %10)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %11 = load i32* %6_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%11
            #load_thru_%6_to_%11
            <<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d13/16/35 <<<[->>>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            m16/13 >>>[-<<<+>>>]
            %12 = trunc i32 %11 to i8
            >>>>>>>>>>>>>>>>>>>#trunc_op_i32_%11
            >#trunc_ret_%12
            m35/36 <[->+<]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>]
    <<<<<<<<<]
    >#five_args
    [
        >>>>#five_args/RET_LANDING_PAD
        [
            <<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/five_args
            >>>>>>-
            l22 <<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_five_args
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_b0_call_for_five_args
        >#B:%ret_lading_pad
        >#B:%5
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#alloc_%6
        >#alloc_%7
        >#alloc_%8
        >#alloc_%9
        >#alloc_%10
        <<<<<<<<<<<<[
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            m0/38 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%3
            l5 <<<<<
            m0/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r5 >>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%4
            l6 <<<<<<
            m0/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r6 >>>>>>
            br label %5
            >>>>>>>+
        <<]
        >>[
            -
            %6 = alloca i32_ align 4
            %7 = alloca i32_ align 4
            %8 = alloca i32_ align 4
            %9 = alloca i32_ align 4
            %10 = alloca i32_ align 4
            store i32 %0_ i32* %6_ align 4
            store sitch: alloca Some(13)
            store sitch: from LocalOperand { name: Number(0)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(13) __
            >>>>>>[-]
            m32/13 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            store i32 %1_ i32* %7_ align 4
            store sitch: alloca Some(14)
            store sitch: from LocalOperand { name: Number(1)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(14) __
            <<<<<<<<<<<<<<<<<<[-]
            m33/14 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            store i32 %2_ i32* %8_ align 4
            store sitch: alloca Some(15)
            store sitch: from LocalOperand { name: Number(2)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(15) __
            <<<<<<<<<<<<<<<<<<[-]
            m34/15 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            store i32 %3_ i32* %9_ align 4
            store sitch: alloca Some(16)
            store sitch: from LocalOperand { name: Number(3)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(16) __
            <<<<<<<<<<<<<<<<<<[-]
            m35/16 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            store i32 %4_ i32* %10_ align 4
            store sitch: alloca Some(17)
            store sitch: from LocalOperand { name: Number(4)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(17) __
            <<<<<<<<<<<<<<<<<<[-]
            m36/17 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            %11 = load i32* %6_ align 4
            >#load_ret_%11
            #load_thru_%6_to_%11
            <<<<<<<<<<<<<<<<#tmp0_for_load
            d13/21/37 <<<<<<<<[->>>>>>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            m21/13 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %12 = trunc i32 %11 to i8
            >>>>>>>>>>>>>>>>#trunc_op_i32_%11
            >#trunc_ret_%12
            m37/38 <[->+<]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %13 = load i32* %7_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%13
            #load_thru_%7_to_%13
            <<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d14/20/39 <<<<<<[->>>>>>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            m20/14 >>>>>>[-<<<<<<+>>>>>>]
            %14 = trunc i32 %13 to i8
            >>>>>>>>>>>>>>>>>>>#trunc_op_i32_%13
            >#trunc_ret_%14
            m39/40 <[->+<]
            call @putchar(i8 %14)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %15 = load i32* %8_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%15
            #load_thru_%8_to_%15
            <<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d15/20/41 <<<<<[->>>>>+>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m20/15 >>>>>[-<<<<<+>>>>>]
            %16 = trunc i32 %15 to i8
            >>>>>>>>>>>>>>>>>>>>>#trunc_op_i32_%15
            >#trunc_ret_%16
            m41/42 <[->+<]
            call @putchar(i8 %16)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %17 = load i32* %9_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%17
            #load_thru_%9_to_%17
            <<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d16/20/43 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m20/16 >>>>[-<<<<+>>>>]
            %18 = trunc i32 %17 to i8
            >>>>>>>>>>>>>>>>>>>>>>>#trunc_op_i32_%17
            >#trunc_ret_%18
            m43/44 <[->+<]
            call @putchar(i8 %18)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %19 = load i32* %10_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%19
            #load_thru_%10_to_%19
            <<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d17/20/45 <<<[->>>+>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m20/17 >>>[-<<<+>>>]
            %20 = trunc i32 %19 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>>#trunc_op_i32_%19
            >#trunc_ret_%20
            m45/46 <[->+<]
            call @putchar(i8 %20)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l13 <<<<<<<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<<<]
    >#twelve_args
    [
        >>>#twelve_args/RET_LANDING_PAD
        [
            <<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/twelve_args
            >>>>>>-
            l30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_twelve_args
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_b0_call_for_twelve_args
        >#B:%ret_lading_pad
        >#B:%12
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#alloc_%13
        >#alloc_%14
        >#alloc_%15
        >#alloc_%16
        >#alloc_%17
        >#alloc_%18
        >#alloc_%19
        >#alloc_%20
        >#alloc_%21
        >#alloc_%22
        >#alloc_%23
        >#alloc_%24
        <<<<<<<<<<<<<<<<<<<<[
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            m0/46 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%3
            l5 <<<<<
            m0/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r5 >>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%4
            l6 <<<<<<
            m0/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r6 >>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%5
            l7 <<<<<<<
            m0/52 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r7 >>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%6
            l8 <<<<<<<<
            m0/54 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r8 >>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%7
            l9 <<<<<<<<<
            m0/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r9 >>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%8
            l10 <<<<<<<<<<
            m0/58 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r10 >>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%9
            l11 <<<<<<<<<<<
            m0/60 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r11 >>>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%10
            l12 <<<<<<<<<<<<
            m0/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r12 >>>>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%11
            l13 <<<<<<<<<<<<<
            m0/64 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r13 >>>>>>>>>>>>>
            br label %12
            >>>>>>>+
        <<]
        >>[
            -
            %13 = alloca i32_ align 4
            %14 = alloca i32_ align 4
            %15 = alloca i32_ align 4
            %16 = alloca i32_ align 4
            %17 = alloca i32_ align 4
            %18 = alloca i32_ align 4
            %19 = alloca i32_ align 4
            %20 = alloca i32_ align 4
            %21 = alloca i32_ align 4
            %22 = alloca i32_ align 4
            %23 = alloca i32_ align 4
            %24 = alloca i32_ align 4
            store i32 %0_ i32* %13_ align 4
            store sitch: alloca Some(14)
            store sitch: from LocalOperand { name: Number(0)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(14) __
            >>>>>>>[-]
            m40/14 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %1_ i32* %14_ align 4
            store sitch: alloca Some(15)
            store sitch: from LocalOperand { name: Number(1)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(15) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m41/15 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %2_ i32* %15_ align 4
            store sitch: alloca Some(16)
            store sitch: from LocalOperand { name: Number(2)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(16) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m42/16 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %3_ i32* %16_ align 4
            store sitch: alloca Some(17)
            store sitch: from LocalOperand { name: Number(3)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(17) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m43/17 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %4_ i32* %17_ align 4
            store sitch: alloca Some(18)
            store sitch: from LocalOperand { name: Number(4)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(18) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m44/18 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %5_ i32* %18_ align 4
            store sitch: alloca Some(19)
            store sitch: from LocalOperand { name: Number(5)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(19) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m45/19 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %6_ i32* %19_ align 4
            store sitch: alloca Some(20)
            store sitch: from LocalOperand { name: Number(6)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(20) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m46/20 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %7_ i32* %20_ align 4
            store sitch: alloca Some(21)
            store sitch: from LocalOperand { name: Number(7)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(21) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m47/21 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %8_ i32* %21_ align 4
            store sitch: alloca Some(22)
            store sitch: from LocalOperand { name: Number(8)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(22) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m48/22 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %9_ i32* %22_ align 4
            store sitch: alloca Some(23)
            store sitch: from LocalOperand { name: Number(9)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(23) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m49/23 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %10_ i32* %23_ align 4
            store sitch: alloca Some(24)
            store sitch: from LocalOperand { name: Number(10)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(24) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m50/24 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 %11_ i32* %24_ align 4
            store sitch: alloca Some(25)
            store sitch: from LocalOperand { name: Number(11)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(25) __
            <<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m51/25 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %25 = load i32* %13_ align 4
            >#load_ret_%25
            #load_thru_%13_to_%25
            <<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d14/29/52 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m29/14 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            %26 = load i32* %14_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%26
            #load_thru_%14_to_%26
            <<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d15/28/53 <<<<<<<<<<<<<[->>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/15 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            %27 = load i32* %15_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%27
            #load_thru_%15_to_%27
            <<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d16/28/54 <<<<<<<<<<<<[->>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/16 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            call @three_args(i32 %25_ i32 %26_ i32 %27)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            stack_width 30
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m52/39 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            copy up arg 1
            <<<<<<<<<<<<<<#arg_1
            m53/38 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            copy up arg 2
            <<<<<<<<<<<<<<<<#arg_2
            m54/37 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            give callee a stack pointer
            <<<<<<<<<<<<<<#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<#===FRAME_three_args
            +
            >#three_args
            +
            >>>>#three_args/b0
            +
        >>]
        >[
            -
            %28 = load i32* %16_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%28
            #load_thru_%16_to_%28
            <<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d17/28/55 <<<<<<<<<<<[->>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/17 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            %29 = load i32* %17_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%29
            #load_thru_%17_to_%29
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d18/28/56 <<<<<<<<<<[->>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/18 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %30 = load i32* %18_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%30
            #load_thru_%18_to_%30
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d19/28/57 <<<<<<<<<[->>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/19 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            %31 = load i32* %19_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%31
            #load_thru_%19_to_%31
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d20/28/58 <<<<<<<<[->>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/20 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %32 = load i32* %20_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%32
            #load_thru_%20_to_%32
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d21/28/59 <<<<<<<[->>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/21 >>>>>>>[-<<<<<<<+>>>>>>>]
            call @five_args(i32 %28_ i32 %29_ i32 %30_ i32 %31_ i32 %32)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            stack_width 30
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m55/41 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            copy up arg 1
            <<<<<<<<<<<<<<<#arg_1
            m56/40 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            copy up arg 2
            <<<<<<<<<<<<<<<<<#arg_2
            m57/39 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            copy up arg 3
            <<<<<<<<<<<<<<<<<<<#arg_3
            m58/38 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            copy up arg 4
            <<<<<<<<<<<<<<<<<<<<<#arg_4
            m59/37 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            give callee a stack pointer
            <<<<<<<<<<<<<<<<<#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/43/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m44/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>>#caller/jump_pad_blk
            +
            r13 >>>>>>>>>>>>>
            <<<<<<#===FRAME_five_args
            +
            >>#five_args
            +
            >>>#five_args/b0
            +
        >>>]
        >[
            -
            %33 = load i32* %21_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%33
            #load_thru_%21_to_%33
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d22/28/60 <<<<<<[->>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/22 >>>>>>[-<<<<<<+>>>>>>]
            %34 = trunc i32 %33 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#trunc_op_i32_%33
            >#trunc_ret_%34
            m60/61 <[->+<]
            call @putchar(i8 %34)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %35 = load i32* %22_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%35
            #load_thru_%22_to_%35
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d23/28/62 <<<<<[->>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/23 >>>>>[-<<<<<+>>>>>]
            %36 = trunc i32 %35 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#trunc_op_i32_%35
            >#trunc_ret_%36
            m62/63 <[->+<]
            call @putchar(i8 %36)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %37 = load i32* %23_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%37
            #load_thru_%23_to_%37
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d24/28/64 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/24 >>>>[-<<<<+>>>>]
            %38 = trunc i32 %37 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#trunc_op_i32_%37
            >#trunc_ret_%38
            m64/65 <[->+<]
            call @putchar(i8 %38)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %39 = load i32* %24_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%39
            #load_thru_%24_to_%39
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d25/28/66 <<<[->>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/25 >>>[-<<<+>>>]
            %40 = trunc i32 %39 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#trunc_op_i32_%39
            >#trunc_ret_%40
            m66/67 <[->+<]
            call @putchar(i8 %40)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_5
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l20 <<<<<<<<<<<<<<<<<<<<
        >>>>>>>>>>>>>]
    <<<<<<<<<<]
    >#main
    [
        >>#main/RET_LANDING_PAD
        [
            <<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/main
            >>>>>>-
            l25 <<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_main
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_b0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        <<<<<<<[
            -
            copy up args
            br label %0
            >>+
        <<]
        >>[
            -
            call @three_args(i32 79_ i32 119_ i32 79)
            op_to_reg storing const value in temp address
            >>>>>>#constop_79
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_119
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_79
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<<#caller/%call_term_for_0
            +
            stack_width 25
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m13/34 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>#arg_1
            m14/33 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>#arg_2
            m15/32 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++
            l1 <
            d0/36/37 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m37/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r25 >>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<#===FRAME_three_args
            +
            >#three_args
            +
            >>>>#three_args/b0
            +
        >>]
        >[
            -
            call @putchar(i8 10)
            op_to_reg storing const value in temp address
            >>>>>#constop_10
            ++++++++++
            enable next block when we return
            <<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>.
            [-]
        <<<<<]
        >[
            -
            call @five_args(i32 122_ i32 97_ i32 100_ i32 100_ i32 121)
            op_to_reg storing const value in temp address
            >>>>#constop_122
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >>#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            <#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >>#constop_121
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<<#caller/%call_term_for_2
            +
            stack_width 25
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m13/36 <<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>#arg_1
            m14/35 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>#arg_2
            m16/34 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>>>#arg_3
            m15/33 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>>>>>#arg_4
            m17/32 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++
            l1 <
            d0/38/39 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m39/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r25 >>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r13 >>>>>>>>>>>>>
            <<<<<<#===FRAME_five_args
            +
            >>#five_args
            +
            >>>#five_args/b0
            +
        >>>>]
        >[
            -
            call @putchar(i8 10)
            op_to_reg storing const value in temp address
            >>>#constop_10
            ++++++++++
            enable next block when we return
            <<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>.
            [-]
        <<<]
        >[
            -
            call @twelve_args(i32 108_ i32 109_ i32 97_ i32 111_ i32 109_ i32 121_ i32 100_ i32 117_ i32 100_ i32 101_ i32 33_ i32 63)
            op_to_reg storing const value in temp address
            >>#constop_108
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_109
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_111
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >>#constop_109
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            <#constop_121
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >>#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_117
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_101
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_33
            +++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_63
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<<<<<<<#caller/%call_term_for_4
            +
            stack_width 25
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m13/43 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_1
            m14/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_2
            m15/41 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>>>>>>>>>>>#arg_3
            m16/40 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>>>>>>>>>>>#arg_4
            m18/39 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 5
            >>>>>>>>>>>>>>>>>>>>#arg_5
            m17/38 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 6
            >>>>>>>>>>>>>>>>>>>>#arg_6
            m19/37 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 7
            >>>>>>>>>>>>>>>>>#arg_7
            m20/36 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<]
            copy up arg 8
            >>>>>>>>>>>>>>>#arg_8
            m21/35 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            copy up arg 9
            >>>>>>>>>>>>>#arg_9
            m22/34 <<<<<<<<<<<<[->>>>>>>>>>>>+<<<<<<<<<<<<]
            copy up arg 10
            >>>>>>>>>>>#arg_10
            m23/33 <<<<<<<<<<[->>>>>>>>>>+<<<<<<<<<<]
            copy up arg 11
            >>>>>>>>>#arg_11
            m24/32 <<<<<<<<[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++
            l1 <
            d0/45/46 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m46/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r25 >>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r20 >>>>>>>>>>>>>>>>>>>>
            <<<<<<#===FRAME_twelve_args
            +
            >>>#twelve_args
            +
            >>#twelve_args/b0
            +
        >>>>>>]
        >[
            -
            ret void
            zero all function allocs
            <<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<]
<<<<]
