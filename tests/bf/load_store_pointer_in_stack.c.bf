r5 >>>>>
+++++
r1 >
runtime init:
#===TOP_FRAME
+
>>#main
+
>#main/b0
+
<<<[
    >#another_stack
    [
        >>>#another_stack/RET_LANDING_PAD
        [
            <<<<-
            #dead_frame
            >-
            <#dead_fn_pad/another_stack
            >>>>-
            l31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <#B:another_stack/%call_never_first_foranother_stack
        [
            -
            br label %0
            >>#B:another_stack/%0
            +
        <<]
        >>#B:another_stack/%0
        [
            -
            %1 = alloca i32_ align 4
            >>>>>>#alloca_%1
            %2 = alloca i8_ align 1
            >#alloca_%2
            %3 = alloca i32*_ align 8
            >#alloca_%3
            %4 = alloca i32_ align 4
            >#alloca_%4
            %5 = alloca i32_ align 4
            >#alloca_%5
            store i32 112_ i32* %1_ align 4
            store sitch: alloca Some(11)
            grab the value we're storing
            op_to_reg storing const value in temp address
            >#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            and the destination
            op_to_reg giving known register address
            <<<<<[-]
            m16/11 >>>>>[-<<<<<+>>>>>]
            %6 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>>#%%6_ptrtoi_%i32*_%1
            l1 <
            d0/18/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>>>>>>>>>>>>++++++++++++
            store i8 %6_ i8* %2_ align 1
            store sitch: alloca Some(12)
            grab the value we're storing
            op_to_reg giving known register address
            and the destination
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m41/12 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32* %1_ i32** %3_ align 8
            store sitch: alloca Some(13)
            grab the value we're storing
            op_to_reg storing pointer value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<#tmp_allocptr_%1
            l1 <
            d0/17/19 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<]
            m19/0 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<<++++++++++++
            and the destination
            op_to_reg giving known register address
            <<<[-]
            m16/13 >>>[-<<<+>>>]
            %7 = load i8* %2_ align 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%2_to_%7
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d12/16/42 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m16/12 >>>>[-<<<<+>>>>]
            %8 = zext i8 %7 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#%8_zext_i8_%7
            m42/43 <[->+<]
            %9 = icmp sgt i32 %8_ i32 0
            op_to_reg giving known register address
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<#constop_0
            
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#%9_icmp_%i32_%8_sgt_i32_0
            <<<<<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m43/19 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<+
            <<<<<[
                -
                
                >>>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<]
            >>>>>-
            <<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<]
            %10 = zext i1 %9 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>#%10_zext_i1_%9
            m44/45 <[->+<]
            %11 = add i32 65_ i32 %10
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%%11_add_%i32_65_ci32_%10
            m16/46 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m45/46 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->+<]
            %12 = trunc i32 %11 to i8
            op_to_reg giving known register address
            >>#%12_trunc_i32_%11
            m46/47 <[->+<]
            call @putchar(i8 %12)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#another_stack/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:another_stack/%call_term_for_0
        [
            -
            %13 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%%13_ptrtoi_%i32*_%1
            l1 <
            d0/17/49 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m17/0 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>++++++++++++
            %14 = zext i8 %13 to i32
            op_to_reg giving known register address
            >#%14_zext_i8_%13
            m48/49 <[->+<]
            %15 = load i8* %2_ align 1
            >>#load_thru_%2_to_%15
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d12/16/50 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m16/12 >>>>[-<<<<+>>>>]
            %16 = zext i8 %15 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%16_zext_i8_%15
            m50/51 <[->+<]
            %17 = icmp eq i32 %14_ i32 %16
            op_to_reg giving known register address
            op_to_reg giving known register address
            >>#%17_icmp_%i32_%14_eq_i32_%16
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m51/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            <[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            %18 = zext i1 %17 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%18_zext_i1_%17
            m52/53 <[->+<]
            %19 = add i32 65_ i32 %18
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%%19_add_%i32_65_ci32_%18
            m16/54 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m53/54 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->+<]
            %20 = trunc i32 %19 to i8
            op_to_reg giving known register address
            >>#%20_trunc_i32_%19
            m54/55 <[->+<]
            call @putchar(i8 %20)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#another_stack/%call_term_for_1
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:another_stack/%call_term_for_1
        [
            -
            %21 = load i8* %2_ align 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%2_to_%21
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d12/16/56 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m16/12 >>>>[-<<<<+>>>>]
            %22 = zext i8 %21 to i64
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%22_zext_i8_%21
            m56/57 <[->+<]
            %23 = inttoptr i64 %22 to i32*
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#%23_itoptr_i64_%22
            m57/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %24 = icmp eq i32* %1_ i32* %23
            op_to_reg storing pointer value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp_allocptr_%1
            l1 <
            d0/18/19 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            m19/0 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%24_icmp_%i32*_%1_eq_i32*_%23
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m16/22 <<<<<<<<[->>>>>>+<<<<<<]
            >>>>>>>>+
            <<<<<<<[
                -
                >>+
                >>>[
                    -
                    <<<-
                    r1 >
                >>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<]
            >>>>>>>-
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            <<<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            %25 = zext i1 %24 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%25_zext_i1_%24
            m58/59 <[->+<]
            %26 = add i32 65_ i32 %25
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%%26_add_%i32_65_ci32_%25
            m17/60 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m59/60 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->+<]
            %27 = trunc i32 %26 to i8
            op_to_reg giving known register address
            >>#%27_trunc_i32_%26
            m60/61 <[->+<]
            call @putchar(i8 %27)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#another_stack/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:another_stack/%call_term_for_2
        [
            -
            %28 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%3_to_%28
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d13/17/62 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m17/13 >>>>[-<<<<+>>>>]
            %29 = load i32* %28_ align 4
            #train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/21/22 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<]
            m21/0 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m21/25 <<<<<<[->>>>+<<<<]
            >>>>>>+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>[
                    -
                    <<<-
                    r1 >
                >>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            <<#subnu_to
            [
                if pos
                m25/19 [-<<<<<<+>>>>>>]
                <<<<<<+++++++++++++++++
            >>>>>>]
            <<<[
                if neg
                <<<+++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m18/17 <[-<+>]
                m19/18 >[-<+>]
                
                m16/19 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d16/17/19 <<<[->+>>+<<<]
            m17/16 >[-<+>]
            >[
                m20/17 >>[-<<<+>>>]
                m19/20 <[->+<]
                m18/19 <[->+<]
                r1 >
                -
            ]
            m19/63 >[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            store i32 %29_ i32* %4_ align 4
            store sitch: alloca Some(14)
            grab the value we're storing
            op_to_reg giving known register address
            and the destination
            op_to_reg giving known register address
            <<<<<[-]
            m63/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %30 = load i32* %4_ align 4
            >#load_thru_%4_to_%30
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d14/17/64 <<<[->>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m17/14 >>>[-<<<+>>>]
            %31 = trunc i32 %30 to i8
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%31_trunc_i32_%30
            m64/65 <[->+<]
            call @putchar(i8 %31)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#another_stack/%call_term_for_3
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:another_stack/%call_term_for_3
        [
            -
            %32 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%3_to_%32
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d13/17/66 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m17/13 >>>>[-<<<<+>>>>]
            store i32 97_ i32* %32_ align 4
            store sitch: alloca None
            grab the value we're storing
            op_to_reg storing const value in temp address
            #constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/23/24 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<]
            m23/0 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m23/28 <<<<<<<[->>>>>+<<<<<]
            >>>>>>>+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            <<#subnu_to
            [
                if pos
                m28/20 [-<<<<<<<<+>>>>>>>>]
                <<<<<<<<++++++++++++++++++
            >>>>>>>>]
            <<<<[
                if neg
                <<<<++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m17/21 <<<<<<<[->>>>+<<<<]
            drive left! choo choo
            >>>[
                m19/18 <[-<+>]
                m20/19 >[-<+>]
                m21/20 >[-<+>]
                m17/21 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m21/17 >>>>[-<<<<+>>>>]
            <<[
                m22/18 >>>[-<<<<+>>>>]
                
                m19/20 <<<[->+<]
                r1 >
                -
            ]
            %33 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%3_to_%33
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d13/17/67 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m17/13 >>>>[-<<<<+>>>>]
            %34 = load i32* %33_ align 4
            #train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/21/22 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<]
            m21/0 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m21/23 <<<<[->>+<<]
            >>>>+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            <<#subnu_to
            [
                if pos
                m23/19 [-<<<<+>>>>]
                <<<<+++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m18/17 <[-<+>]
                m19/18 >[-<+>]
                
                m16/19 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d16/17/19 <<<[->+>>+<<<]
            m17/16 >[-<+>]
            >[
                m20/17 >>[-<<<+>>>]
                m19/20 <[->+<]
                m18/19 <[->+<]
                r1 >
                -
            ]
            m19/68 >[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            store i32 %34_ i32* %5_ align 4
            store sitch: alloca Some(15)
            grab the value we're storing
            op_to_reg giving known register address
            and the destination
            op_to_reg giving known register address
            <<<<[-]
            m68/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %35 = load i32* %5_ align 4
            >#load_thru_%5_to_%35
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d15/17/69 <<[->>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m17/15 >>[-<<+>>]
            %36 = trunc i32 %35 to i8
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%36_trunc_i32_%35
            m69/70 <[->+<]
            call @putchar(i8 %36)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#another_stack/%call_term_for_4
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:another_stack/%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l6 <<<<<<
        >>>>>>>>>>]
    <<<<<<<<<]
    >#main
    [
        >>#main/RET_LANDING_PAD
        [
            <<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/main
            >>>>-
            l32 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <#B:main/%call_never_first_formain
        [
            -
            br label %0
            >>#B:main/%0
            +
        <<]
        >>#B:main/%0
        [
            -
            %1 = alloca i32_ align 4
            >>>>>>>#alloca_%1
            %2 = alloca i8_ align 1
            >#alloca_%2
            %3 = alloca i32*_ align 8
            >#alloca_%3
            %4 = alloca i32_ align 4
            >#alloca_%4
            %5 = alloca i32_ align 4
            >#alloca_%5
            store i32 112_ i32* %1_ align 4
            store sitch: alloca Some(12)
            grab the value we're storing
            op_to_reg storing const value in temp address
            >#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            and the destination
            op_to_reg giving known register address
            <<<<<[-]
            m17/12 >>>>>[-<<<<<+>>>>>]
            %6 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>>#%%6_ptrtoi_%i32*_%1
            l1 <
            d0/19/43 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m19/0 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>>>>>>>>>>>>+++++++++++++
            store i8 %6_ i8* %2_ align 1
            store sitch: alloca Some(13)
            grab the value we're storing
            op_to_reg giving known register address
            and the destination
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m42/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32* %1_ i32** %3_ align 8
            store sitch: alloca Some(14)
            grab the value we're storing
            op_to_reg storing pointer value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<#tmp_allocptr_%1
            l1 <
            d0/18/20 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<]
            m20/0 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<<+++++++++++++
            and the destination
            op_to_reg giving known register address
            <<<[-]
            m17/14 >>>[-<<<+>>>]
            %7 = load i8* %2_ align 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%2_to_%7
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d13/17/43 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m17/13 >>>>[-<<<<+>>>>]
            %8 = zext i8 %7 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#%8_zext_i8_%7
            m43/44 <[->+<]
            %9 = icmp sgt i32 %8_ i32 0
            op_to_reg giving known register address
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<#constop_0
            
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#%9_icmp_%i32_%8_sgt_i32_0
            <<<<<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m44/20 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<+
            <<<<<[
                -
                
                >>>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<]
            >>>>>-
            <<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<]
            %10 = zext i1 %9 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>#%10_zext_i1_%9
            m45/46 <[->+<]
            %11 = add i32 65_ i32 %10
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%%11_add_%i32_65_ci32_%10
            m17/47 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m46/47 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->+<]
            %12 = trunc i32 %11 to i8
            op_to_reg giving known register address
            >>#%12_trunc_i32_%11
            m47/48 <[->+<]
            call @putchar(i8 %12)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:main/%call_term_for_0
        [
            -
            %13 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%%13_ptrtoi_%i32*_%1
            l1 <
            d0/18/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+++++++++++++
            %14 = zext i8 %13 to i32
            op_to_reg giving known register address
            >#%14_zext_i8_%13
            m49/50 <[->+<]
            %15 = load i8* %2_ align 1
            >>#load_thru_%2_to_%15
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d13/17/51 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m17/13 >>>>[-<<<<+>>>>]
            %16 = zext i8 %15 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%16_zext_i8_%15
            m51/52 <[->+<]
            %17 = icmp eq i32 %14_ i32 %16
            op_to_reg giving known register address
            op_to_reg giving known register address
            >>#%17_icmp_%i32_%14_eq_i32_%16
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m52/18 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            <[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            %18 = zext i1 %17 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%18_zext_i1_%17
            m53/54 <[->+<]
            %19 = add i32 65_ i32 %18
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%%19_add_%i32_65_ci32_%18
            m17/55 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m54/55 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->+<]
            %20 = trunc i32 %19 to i8
            op_to_reg giving known register address
            >>#%20_trunc_i32_%19
            m55/56 <[->+<]
            call @putchar(i8 %20)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_1
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:main/%call_term_for_1
        [
            -
            %21 = load i8* %2_ align 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%2_to_%21
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d13/17/57 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m17/13 >>>>[-<<<<+>>>>]
            %22 = zext i8 %21 to i64
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%22_zext_i8_%21
            m57/58 <[->+<]
            %23 = inttoptr i64 %22 to i32*
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#%23_itoptr_i64_%22
            m58/17 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %24 = icmp eq i32* %1_ i32* %23
            op_to_reg storing pointer value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp_allocptr_%1
            l1 <
            d0/19/20 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<]
            m20/0 >>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%24_icmp_%i32*_%1_eq_i32*_%23
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m17/23 <<<<<<<<[->>>>>>+<<<<<<]
            >>>>>>>>+
            <<<<<<<[
                -
                >>+
                >>>[
                    -
                    <<<-
                    r1 >
                >>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<]
            >>>>>>>-
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            <<<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            %25 = zext i1 %24 to i32
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%25_zext_i1_%24
            m59/60 <[->+<]
            %26 = add i32 65_ i32 %25
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%%26_add_%i32_65_ci32_%25
            m18/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/61 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[->+<]
            %27 = trunc i32 %26 to i8
            op_to_reg giving known register address
            >>#%27_trunc_i32_%26
            m61/62 <[->+<]
            call @putchar(i8 %27)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:main/%call_term_for_2
        [
            -
            %28 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%3_to_%28
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d14/18/63 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/14 >>>>[-<<<<+>>>>]
            %29 = load i32* %28_ align 4
            #train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/22/23 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<]
            m22/0 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m22/26 <<<<<<[->>>>+<<<<]
            >>>>>>+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>[
                    -
                    <<<-
                    r1 >
                >>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            <<#subnu_to
            [
                if pos
                m26/20 [-<<<<<<+>>>>>>]
                <<<<<<++++++++++++++++++
            >>>>>>]
            <<<[
                if neg
                <<<++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m19/18 <[-<+>]
                m20/19 >[-<+>]
                
                m17/20 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d17/18/20 <<<[->+>>+<<<]
            m18/17 >[-<+>]
            >[
                m21/18 >>[-<<<+>>>]
                m20/21 <[->+<]
                m19/20 <[->+<]
                r1 >
                -
            ]
            m20/64 >[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            store i32 %29_ i32* %4_ align 4
            store sitch: alloca Some(15)
            grab the value we're storing
            op_to_reg giving known register address
            and the destination
            op_to_reg giving known register address
            <<<<<[-]
            m64/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %30 = load i32* %4_ align 4
            >#load_thru_%4_to_%30
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d15/18/65 <<<[->>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/15 >>>[-<<<+>>>]
            %31 = trunc i32 %30 to i8
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%31_trunc_i32_%30
            m65/66 <[->+<]
            call @putchar(i8 %31)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_3
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:main/%call_term_for_3
        [
            -
            %32 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%3_to_%32
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d14/18/67 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/14 >>>>[-<<<<+>>>>]
            store i32 97_ i32* %32_ align 4
            store sitch: alloca None
            grab the value we're storing
            op_to_reg storing const value in temp address
            #constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/24/25 <<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            m24/0 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m24/29 <<<<<<<[->>>>>+<<<<<]
            >>>>>>>+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            <<#subnu_to
            [
                if pos
                m29/21 [-<<<<<<<<+>>>>>>>>]
                <<<<<<<<+++++++++++++++++++
            >>>>>>>>]
            <<<<[
                if neg
                <<<<+++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m18/22 <<<<<<<[->>>>+<<<<]
            drive left! choo choo
            >>>[
                m20/19 <[-<+>]
                m21/20 >[-<+>]
                m22/21 >[-<+>]
                m18/22 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m22/18 >>>>[-<<<<+>>>>]
            <<[
                m23/19 >>>[-<<<<+>>>>]
                
                m20/21 <<<[->+<]
                r1 >
                -
            ]
            %33 = load i32** %3_ align 8
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_thru_%3_to_%33
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d14/18/68 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/14 >>>>[-<<<<+>>>>]
            %34 = load i32* %33_ align 4
            #train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/22/23 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<]
            m22/0 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m22/24 <<<<[->>+<<]
            >>>>+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            <<#subnu_to
            [
                if pos
                m24/20 [-<<<<+>>>>]
                <<<<++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m19/18 <[-<+>]
                m20/19 >[-<+>]
                
                m17/20 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d17/18/20 <<<[->+>>+<<<]
            m18/17 >[-<+>]
            >[
                m21/18 >>[-<<<+>>>]
                m20/21 <[->+<]
                m19/20 <[->+<]
                r1 >
                -
            ]
            m20/69 >[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            store i32 %34_ i32* %5_ align 4
            store sitch: alloca Some(16)
            grab the value we're storing
            op_to_reg giving known register address
            and the destination
            op_to_reg giving known register address
            <<<<[-]
            m69/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %35 = load i32* %5_ align 4
            >#load_thru_%5_to_%35
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d16/18/70 <<[->>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/16 >>[-<<+>>]
            %36 = trunc i32 %35 to i8
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#%36_trunc_i32_%35
            m70/71 <[->+<]
            call @putchar(i8 %36)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_4
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:main/%call_term_for_4
        [
            -
            call @another_stack()
            enable next
            >#main/%call_term_for_5
            +
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/38/39 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m39/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r32 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#main
            +
            >>#main/jump_pad_blk
            +
            r6 >>>>>>
            <<<<#===FRAME_another_stack
            +
            >#another_stack
            +
            >>#another_stack/b0
            +
        >>>>>>>]
        >#B:main/%call_term_for_5
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l6 <<<<<<
        >>>>>>>>>>>]
    <<<<<<<<<]
<<]
