r6 >>>>>>
++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>#main
+
>#main/b0
+
<<<<[
    >#deref_int_set
    [
        >>>>#deref_int_set/RET_LANDING_PAD
        [
            <<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/deref_int_set
            >>>>>-
            l21 <<<<<<<<<<<<<<<<<<<<<
        ]
        <#B:deref_int_set/%call_never_first_forderef_int_set
        [
            -
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/33 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>#B:deref_int_set/%1
            +
        <<]
        >>#B:deref_int_set/%1
        [
            -
            %2 = alloca i8_ align 1
            >>#alloca_%2
            store i8 %0_ i8* %2_ align 1
            store sitch: alloca Some(8)
            grab the value we're storing
            op_to_reg giving known register address
            and the destination
            op_to_reg giving known register address
            [-]
            m31/8 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            %3 = load i8* %2_ align 1
            >#load_thru_%2_to_%3
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d8/9/32 <[->+>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            m9/8 >[-<+>]
            %4 = zext i8 %3 to i64
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>#%4_zext_i8_%3
            m32/33 <[->+<]
            %5 = inttoptr i64 %4 to i32*
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<#%5_itoptr_i64_%4
            m33/9 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 98_ i32* %5_ align 4
            store sitch: alloca None
            grab the value we're storing
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<#constop_98
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/16/17 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<]
            m16/0 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m16/18 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m18/13 [-<<<<<+>>>>>]
                <<<<<+++++++++++
            >>>>>]
            <[
                if neg
                <<<<+++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m10/14 <<<<<<<[->>>>+<<<<]
            drive left! choo choo
            >>>[
                m12/11 <[-<+>]
                m13/12 >[-<+>]
                m14/13 >[-<+>]
                m10/14 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m14/10 >>>>[-<<<<+>>>>]
            <<[
                m15/11 >>>[-<<<<+>>>>]
                
                m12/13 <<<[->+<]
                r1 >
                -
            ]
            %6 = load i8* %2_ align 1
            >>>>>>>>>>>>>>>>>>>>>>#load_thru_%2_to_%6
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d8/10/34 <<[->>+>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m10/8 >>[-<<+>>]
            %7 = zext i8 %6 to i64
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>>#%7_zext_i8_%6
            m34/35 <[->+<]
            %8 = inttoptr i64 %7 to i32*
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<<<<#%8_itoptr_i64_%7
            m35/10 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            %9 = load i32* %8_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/15/16 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            m15/0 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m15/17 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m17/13 [-<<<<+>>>>]
                <<<<+++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m12/11 <[-<+>]
                m13/12 >[-<+>]
                
                m10/13 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d10/11/13 <<<[->+>>+<<<]
            m11/10 >[-<+>]
            >[
                m14/11 >>[-<<<+>>>]
                m13/14 <[->+<]
                m12/13 <[->+<]
                r1 >
                -
            ]
            m13/36 >[->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            %10 = trunc i32 %9 to i8
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>>>#%10_trunc_i32_%9
            m36/37 <[->+<]
            call @putchar(i8 %10)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<#deref_int_set/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:deref_int_set/%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            <<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>]
    <<<<<<]
    >#deref_int
    [
        >>>#deref_int/RET_LANDING_PAD
        [
            <<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/deref_int
            >>>>>-
            l19 <<<<<<<<<<<<<<<<<<<
        ]
        <#B:deref_int/%call_never_first_forderef_int
        [
            -
            >>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>#B:deref_int/%1
            +
        <<]
        >>#B:deref_int/%1
        [
            -
            %2 = alloca i8_ align 1
            >>#alloca_%2
            store i8 %0_ i8* %2_ align 1
            store sitch: alloca Some(8)
            grab the value we're storing
            op_to_reg giving known register address
            and the destination
            op_to_reg giving known register address
            [-]
            m29/8 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            %3 = load i8* %2_ align 1
            >#load_thru_%2_to_%3
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d8/9/30 <[->+>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            m9/8 >[-<+>]
            %4 = zext i8 %3 to i64
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>>#%4_zext_i8_%3
            m30/31 <[->+<]
            %5 = inttoptr i64 %4 to i32*
            op_to_reg giving known register address
            <<<<<<<<<<<<<<<<<<<<<#%5_itoptr_i64_%4
            m31/9 >>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            %6 = load i32* %5_ align 4
            <<<<<<<<<<<<<<<<<<<<<#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/14/15 <<<<<<<<<<<<<[->>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<]
            m14/0 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<+>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m14/16 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m16/12 [-<<<<+>>>>]
                <<<<++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m11/10 <[-<+>]
                m12/11 >[-<+>]
                
                m9/12 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d9/10/12 <<<[->+>>+<<<]
            m10/9 >[-<+>]
            >[
                m13/10 >>[-<<<+>>>]
                m12/13 <[->+<]
                m11/12 <[->+<]
                r1 >
                -
            ]
            m12/32 >[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            %7 = trunc i32 %6 to i8
            op_to_reg giving known register address
            >>>>>>>>>>>>>>>>>>>>>#%7_trunc_i32_%6
            m32/33 <[->+<]
            call @putchar(i8 %7)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<<<<#deref_int/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:deref_int/%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            <<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>]
    <<<<<]
    >#main
    [
        >>#main/RET_LANDING_PAD
        [
            <<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/main
            >>>>>-
            l19 <<<<<<<<<<<<<<<<<<<
        ]
        <#B:main/%call_never_first_formain
        [
            -
            br label %0
            >>#B:main/%0
            +
        <<]
        >>#B:main/%0
        [
            -
            %1 = alloca i32_ align 4
            >>>>>>>>#alloca_%1
            %2 = alloca i32_ align 4
            >#alloca_%2
            %3 = alloca i32_ align 4
            >#alloca_%3
            store i32 112_ i32* %1_ align 4
            store sitch: alloca Some(14)
            grab the value we're storing
            op_to_reg storing const value in temp address
            >#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            and the destination
            op_to_reg giving known register address
            <<<[-]
            m17/14 >>>[-<<<+>>>]
            store i32 116_ i32* %2_ align 4
            store sitch: alloca Some(15)
            grab the value we're storing
            op_to_reg storing const value in temp address
            >#constop_116
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            and the destination
            op_to_reg giving known register address
            <<<[-]
            m18/15 >>>[-<<<+>>>]
            store i32 114_ i32* %3_ align 4
            store sitch: alloca Some(16)
            grab the value we're storing
            op_to_reg storing const value in temp address
            <#constop_114
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            and the destination
            op_to_reg giving known register address
            <[-]
            m17/16 >[-<+>]
            %4 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>>#%%4_ptrtoi_%i32*_%1
            l1 <
            d0/18/30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>+++++++++++++++
            call @deref_int(i8 %4)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_0
            +
            copy up arg 0
            >>>>>>>>>>>>>>>>>>#arg_0
            m29/25 >>>>[-<<<<+>>>>]
            give callee a stack pointer
            <<<#stack_ptr
            +++++++++++++++++++++++++++
            l1 <
            d0/27/28 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r19 >>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#main
            +
            >>#main/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>]
        >#B:main/%call_term_for_0
        [
            -
            %5 = ptrtoint i32* %2 to i8
            >>>>>>>>>>>>>>>>>>>>>>>#%%5_ptrtoi_%i32*_%2
            l1 <
            d0/18/31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>++++++++++++++++
            call @deref_int(i8 %5)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_1
            +
            copy up arg 0
            >>>>>>>>>>>>>>>>>#arg_0
            m30/25 >>>>>[-<<<<<+>>>>>]
            give callee a stack pointer
            <<<<#stack_ptr
            +++++++++++++++++++++++++++
            l1 <
            d0/27/28 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r19 >>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#main
            +
            >>#main/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>]
        >#B:main/%call_term_for_1
        [
            -
            %6 = ptrtoint i32* %3 to i8
            >>>>>>>>>>>>>>>>>>>>>>>#%%6_ptrtoi_%i32*_%3
            l1 <
            d0/18/32 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>>+++++++++++++++++
            call @deref_int(i8 %6)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_2
            +
            copy up arg 0
            >>>>>>>>>>>>>>>>#arg_0
            m31/25 >>>>>>[-<<<<<<+>>>>>>]
            give callee a stack pointer
            <<<<<#stack_ptr
            +++++++++++++++++++++++++++
            l1 <
            d0/27/28 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r19 >>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#main
            +
            >>#main/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>]
        >#B:main/%call_term_for_2
        [
            -
            %7 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>>>>>>>>>>>>>#%%7_ptrtoi_%i32*_%1
            l1 <
            d0/18/33 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>>>+++++++++++++++
            call @deref_int_set(i8 %7)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_3
            +
            copy up arg 0
            >>>>>>>>>>>>>>>#arg_0
            m32/25 >>>>>>>[-<<<<<<<+>>>>>>>]
            give callee a stack pointer
            <<<<<<#stack_ptr
            +++++++++++++++++++++++++++
            l1 <
            d0/27/28 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r19 >>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#main
            +
            >>#main/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int_set
            +
            >#deref_int_set
            +
            >>>#deref_int_set/b0
            +
        >>>>>]
        >#B:main/%call_term_for_3
        [
            -
            %8 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>>>>>>>>>>>>>#%%8_ptrtoi_%i32*_%1
            l1 <
            d0/18/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>>>>+++++++++++++++
            call @deref_int(i8 %8)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_4
            +
            copy up arg 0
            >>>>>>>>>>>>>>#arg_0
            m33/25 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            give callee a stack pointer
            <<<<<<<#stack_ptr
            +++++++++++++++++++++++++++
            l1 <
            d0/27/28 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r19 >>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#main
            +
            >>#main/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>]
        >#B:main/%call_term_for_4
        [
            -
            %9 = ptrtoint i32* %2 to i8
            >>>>>>>>>>>>>>>>>>>>>>>#%%9_ptrtoi_%i32*_%2
            l1 <
            d0/18/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>>>>>++++++++++++++++
            call @deref_int(i8 %9)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_5
            +
            copy up arg 0
            >>>>>>>>>>>>>#arg_0
            m34/25 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            give callee a stack pointer
            <<<<<<<<#stack_ptr
            +++++++++++++++++++++++++++
            l1 <
            d0/27/28 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r19 >>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#main
            +
            >>#main/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>]
        >#B:main/%call_term_for_5
        [
            -
            %10 = ptrtoint i32* %3 to i8
            >>>>>>>>>>>>>>>>>>>>>>>#%%10_ptrtoi_%i32*_%3
            l1 <
            d0/18/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>>>>>>>>>>>>+++++++++++++++++
            call @deref_int(i8 %10)
            enable next
            <<<<<<<<<<<<<<<<<<<<<<#main/%call_term_for_6
            +
            copy up arg 0
            >>>>>>>>>>>>#arg_0
            m35/25 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            give callee a stack pointer
            <<<<<<<<<#stack_ptr
            +++++++++++++++++++++++++++
            l1 <
            d0/27/28 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r19 >>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#main
            +
            >>#main/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>>]
        >#B:main/%call_term_for_6
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l7 <<<<<<<
        >>>>>>>>>>>>>]
    <<<<<<<<<<]
<<<]
