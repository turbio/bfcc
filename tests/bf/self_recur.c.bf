r5 >>>>>
+++++
r1 >
runtime init:
#===TOP_FRAME
+
>>#main
+
>#main/b0
+
<<<[
    >#lol
    [
        >>>#lol/RET_LANDING_PAD
        [
            <<<<-
            #dead_frame
            >-
            <#dead_fn_pad/lol
            >>>>-
            l23 <<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<#mainloop_lol
        >#F:lol
        >#F:main
        >#B:%no_b0_call_for_lol
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#B:%8
        >#B:%call_term_for_2
        >#B:%11
        >#alloc_%2
        <<<<<<<[
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>+
        <<]
        >>[
            -
            %2 = alloca i32_ align 4
            store i32 %0_ i32* %2_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>#tmp_allocptr_%2
            >#tmp_allocptr_tru_%2
            l1 <
            d0/12/13 <<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            m13/0 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++
            store sitch: alloca Some(10)
            store sitch: from LocalOperand { name: Number(0)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/18/19 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m18/20 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m20/15 [-<<<<<+>>>>>]
                <<<<<+++++++++++++
            >>>>>]
            <[
                if neg
                <<<<+++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m33/16 >>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            drive left! choo choo
            <<<<<<<<<<<<<<<<<<[
                m14/13 <[-<+>]
                m15/14 >[-<+>]
                m16/15 >[-<+>]
                m12/16 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m16/12 >>>>[-<<<<+>>>>]
            <<[
                m17/13 >>>[-<<<<+>>>>]
                
                m14/15 <<<[->+<]
                r1 >
                -
            ]
            %3 = load i32* %2_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%2
            >#tmp_allocptr_tru_%2
            l1 <
            d0/12/13 <<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            m13/0 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++
            >>>>>>>>>>>>>>>>>>>>>>>#load_ret_%3
            <<<<<<<<<<<<<<<<<<<<<#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/17/18 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            m17/0 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m17/19 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m19/15 [-<<<<+>>>>]
                <<<<+++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m14/13 <[-<+>]
                m15/14 >[-<+>]
                
                m12/15 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d12/13/15 <<<[->+>>+<<<]
            m13/12 >[-<+>]
            >[
                m16/13 >>[-<<<+>>>]
                m15/16 <[->+<]
                m14/15 <[->+<]
                r1 >
                -
            ]
            m15/34 >[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            %4 = add i32 %3_ i32 97
            op_to_reg storing const value in temp address
            <<<<#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>>>>>>>>>>>>>>>>>>>#add_op0_i32_%3
            <<<<<<<<<<<<<<<<<<<<<<<#add_op1_i32_97
            >>>>>>>>>>>>>>>>>>>>>>>>#add_ret_%4
            m34/35 <[->+<]
            <<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<]
            %5 = trunc i32 %4 to i8
            >>>>>>>>>>>>>>>>>>>>>>>>#trunc_op_i32_%4
            >#trunc_ret_%5
            m35/36 <[->+<]
            call @putchar(i8 %5)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >[
            -
            %6 = load i32* %2_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>#tmp_allocptr_%2
            >#tmp_allocptr_tru_%2
            l1 <
            d0/12/13 <<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            m13/0 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++
            >>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%6
            <<<<<<<<<<<<<<<<<<<<<<<<#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/17/18 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            m17/0 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m17/19 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m19/15 [-<<<<+>>>>]
                <<<<+++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m14/13 <[-<+>]
                m15/14 >[-<+>]
                
                m12/15 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d12/13/15 <<<[->+>>+<<<]
            m13/12 >[-<+>]
            >[
                m16/13 >>[-<<<+>>>]
                m15/16 <[->+<]
                m14/15 <[->+<]
                r1 >
                -
            ]
            m15/37 >[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            %7 = icmp slt i32 %6_ i32 6
            op_to_reg storing const value in temp address
            <<<<#constop_6
            ++++++
            >>>>>>>>>>>>>>>>>>>>>>>>>>#icmp_op0_i32_%6
            <<<<<<<<<<<<<<<<<<<<<<<<<<#icmp_op1_i32_6
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#icmp_ret_%7
            <<<<<<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m11/12 <<<[->+<]
            >>>+
            >>>>>>>>>>>>>>>>>>>>>>>[
                -
                
                <<<<<<<<<<<<<<<<<<<<<<<<<[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<-
            <<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<]
            br i1 %7_ label %8_ label %11
            <<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>+
                #B:lol/8_true
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>+
                #B:lol/11_false
            <<<<<]
        >>]
        >[
            -
            %9 = load i32* %2_ align 4
            op_to_reg storing pointer value in temp address
            >>>>#tmp_allocptr_%2
            >#tmp_allocptr_tru_%2
            l1 <
            d0/12/13 <<<<<<<<<<<<[->>>>>>>>>>>>+>+<<<<<<<<<<<<<]
            m13/0 >>>>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%9
            <<<<<<<<<<<<<<<<<<<<<<<<<<#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/17/18 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<]
            m17/0 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m17/19 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m19/15 [-<<<<+>>>>]
                <<<<+++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m14/13 <[-<+>]
                m15/14 >[-<+>]
                
                m12/15 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d12/13/15 <<<[->+>>+<<<]
            m13/12 >[-<+>]
            >[
                m16/13 >>[-<<<+>>>]
                m15/16 <[->+<]
                m14/15 <[->+<]
                r1 >
                -
            ]
            m15/39 >[->>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            %10 = add i32 %9_ i32 1
            op_to_reg storing const value in temp address
            <<<<#constop_1
            +
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#add_op0_i32_%9
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#add_op1_i32_1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#add_ret_%10
            m39/40 <[->+<]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            call @lol(i32 %10)
            enable next block when we return
            <<<#caller/%call_term_for_2
            +
            stack_width 23
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>#arg_0
            m40/28 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            give callee a stack pointer
            <<<<<<<<<<<#stack_ptr
            ++++++++++++++++++++++++++++++
            l1 <
            d0/30/31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m31/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r23 >>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >#caller
            +
            >>>#caller/jump_pad_blk
            +
            r7 >>>>>>>
            <<<<#===FRAME_lol
            +
            >#lol
            +
            >>#lol/b0
            +
        >>>>]
        >[
            -
            br label %11
            >+
        <]
        >[
            -
            ret void
            zero all function allocs
            >[-]
            <<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l7 <<<<<<<
        >>>>>>>>>]
    <<<<<<<<]
    >#main
    [
        >>#main/RET_LANDING_PAD
        [
            <<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/main
            >>>>-
            l8 <<<<<<<<
        ]
        <<<<#mainloop_main
        >#F:lol
        >#F:main
        >#B:%no_b0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        <<<[
            -
            copy up args
            br label %0
            >>+
        <<]
        >>[
            -
            call @lol(i32 0)
            op_to_reg storing const value in temp address
            >>#constop_0
            
            enable next block when we return
            <#caller/%call_term_for_0
            +
            stack_width 8
            ret_pad_width 4
            copy up arg 0
            >>>>>>>#arg_0
            m7/13 <<<<<<[->>>>>>+<<<<<<]
            give callee a stack pointer
            >>>>>>>#stack_ptr
            +++++++++++++++
            l1 <
            d0/15/16 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<]
            m16/0 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            r1 >
            r8 >>>>>>>>
            <<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r7 >>>>>>>
            <<<<#===FRAME_lol
            +
            >#lol
            +
            >>#lol/b0
            +
        >>]
        >[
            -
            ret void
            zero all function allocs
            <<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l6 <<<<<<
        >>>>>>]
    <<<<]
<<]
