r6 >>>>>>
++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>#main
+
>#main/b0
+
<<<<[
    >#deref_int_set
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/deref_int_set
            >>>>>-
            l31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<#mainloop_deref_int_set
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int_set
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#alloc_%2
        >#%3_=_load_i8*_%2__align_1(mult)
        >#%4_=_zext_i8_%3_to_i64(mult)
        >#%5_=_inttoptr_i64_%4_to_i32*(mult)
        >#%6_=_load_i8*_%2__align_1(mult)
        >#%7_=_zext_i8_%6_to_i64(mult)
        >#%8_=_inttoptr_i64_%7_to_i32*(mult)
        >#%9_=_load_i32*_%8__align_4(mult)
        >#%10_=_trunc_i32_%9_to_i8(mult)
        >#%0
        <<<<<<<<<<<<<#B:%no_block0_call_for_deref_int_set
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/19 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = alloca i8_ align 1
            store i8 %0_ i8* %2_ align 1
            >>[-]
            m17/8 >>>>>>>>>[-<<<<<<<<<+>>>>>>>>>]
            %3 = load i8* %2_ align 1
            <<<<<<<<[-]
            d8/9/18 <[->+>>>>>>>>>+<<<<<<<<<<]
            m18/8 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %4 = zext i8 %3 to i64
            <<<<<<<<[-]
            d9/19/18 <[->>>>>>>>>>+<+<<<<<<<<<]
            m19/9 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            m18/10 <[-<<<<<<<<+>>>>>>>>]
            %5 = inttoptr i64 %4 to i32*
            <<<<<<<[-]
            d10/18/20 <[->>>>>>>>+>>+<<<<<<<<<<]
            m18/10 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            m20/11 >>[-<<<<<<<<<+>>>>>>>>>]
            store i32 98_ i32* %5_ align 4
            op_to_reg storing const value in temp address
            <<#constop_98
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            d11/19/21 <<<<<<<[->>>>>>>>+>>+<<<<<<<<<<]
            m19/11 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >#stackptr
            <<<<<<#stackptr_tmp
            l1 <
            d0/21/27 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m21/0 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m26/28 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m28/24 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            m18/25 <<<<<<<<<[->>>>>>>+<<<<<<<]
            drive left! choo choo
            >>>>>>[
                m23/22 <[-<+>]
                m24/23 >[-<+>]
                m25/24 >[-<+>]
                m21/25 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m25/21 >>>>[-<<<<+>>>>]
            <<[
                m26/22 >>>[-<<<<+>>>>]
                
                m23/24 <<<[->+<]
                r1 >
                -
            ]
            %6 = load i8* %2_ align 1
            <<<<<<<<<<<[-]
            d8/12/18 <<<<[->>>>+>>>>>>+<<<<<<<<<<]
            m18/8 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %7 = zext i8 %6 to i64
            <<<<<[-]
            d12/18/19 <[->>>>>>+>+<<<<<<<]
            m18/12 >>>>>>[-<<<<<<+>>>>>>]
            m19/13 >[-<<<<<<+>>>>>>]
            %8 = inttoptr i64 %7 to i32*
            <<<<<[-]
            d13/18/19 <[->>>>>+>+<<<<<<]
            m18/13 >>>>>[-<<<<<+>>>>>]
            m19/14 >[-<<<<<+>>>>>]
            %9 = load i32* %8_ align 4
            <<<<[-]
            d14/18/19 <[->>>>+>+<<<<<]
            m18/14 >>>>[-<<<<+>>>>]
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/24/25 <<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            m24/0 >>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m24/26 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m26/22 [-<<<<+>>>>]
                <<<<++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m21/20 <[-<+>]
                m22/21 >[-<+>]
                
                m19/22 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d19/20/22 <<<[->+>>+<<<]
            m20/19 >[-<+>]
            >[
                m23/20 >>[-<<<+>>>]
                m22/23 <[->+<]
                m21/22 <[->+<]
                r1 >
                -
            ]
            m22/15 >[-<<<<<<<+>>>>>>>]
            %10 = trunc i32 %9 to i8
            <<<<<<[-]
            d15/18/19 <[->>>+>+<<<<]
            m18/15 >>>[-<<<+>>>]
            m19/16 >[-<<<+>>>]
            call @putchar(i8 %10)
            enable next block when we return
            <<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            d16/18/19 >>>>>>>>>[->>+>+<<<]
            m18/16 >>[-<<+>>]
            >.
            [-]
        <<<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>]
    <<<<<<]
    >#deref_int
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/deref_int
            >>>>>-
            l26 <<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<#mainloop_deref_int
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#alloc_%2
        >#%3_=_load_i8*_%2__align_1(mult)
        >#%4_=_zext_i8_%3_to_i64(mult)
        >#%5_=_inttoptr_i64_%4_to_i32*(mult)
        >#%6_=_load_i32*_%5__align_4(mult)
        >#%7_=_trunc_i32_%6_to_i8(mult)
        >#%0
        <<<<<<<<<<#B:%no_block0_call_for_deref_int
        [
            -
            copy up args
            >>>>>>>>>>#arg_%0
            l2 <<
            m0/16 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = alloca i8_ align 1
            store i8 %0_ i8* %2_ align 1
            >>[-]
            m14/8 >>>>>>[-<<<<<<+>>>>>>]
            %3 = load i8* %2_ align 1
            <<<<<[-]
            d8/9/15 <[->+>>>>>>+<<<<<<<]
            m15/8 >>>>>>>[-<<<<<<<+>>>>>>>]
            %4 = zext i8 %3 to i64
            <<<<<[-]
            d9/16/15 <[->>>>>>>+<+<<<<<<]
            m16/9 >>>>>>>[-<<<<<<<+>>>>>>>]
            m15/10 <[-<<<<<+>>>>>]
            %5 = inttoptr i64 %4 to i32*
            <<<<[-]
            d10/15/17 <[->>>>>+>>+<<<<<<<]
            m15/10 >>>>>[-<<<<<+>>>>>]
            m17/11 >>[-<<<<<<+>>>>>>]
            %6 = load i32* %5_ align 4
            <<<<<[-]
            d11/15/16 <[->>>>+>+<<<<<]
            m15/11 >>>>[-<<<<+>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<#stackptr_tmp
            l1 <
            d0/18/22 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            m18/0 >>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            r1 >
            >>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m21/23 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<[
                -
                >>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<]
            >>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m23/20 [-<<<+>>>]
                <<<++++++++++++++++++
            >>>]
            <[
                if neg
                <<++++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                m19/18 <[-<+>]
                m20/19 >[-<+>]
                
                m17/20 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d17/18/20 <<<[->+>>+<<<]
            m18/17 >[-<+>]
            >[
                m21/18 >>[-<<<+>>>]
                m20/21 <[->+<]
                m19/20 <[->+<]
                r1 >
                -
            ]
            m20/12 >[-<<<<<<<<+>>>>>>>>]
            %7 = trunc i32 %6 to i8
            <<<<<<<[-]
            d12/15/16 <[->>>+>+<<<<]
            m15/12 >>>[-<<<+>>>]
            m16/13 >[-<<<+>>>]
            call @putchar(i8 %7)
            enable next block when we return
            <<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            d13/15/16 >>>>>>[->>+>+<<<]
            m15/13 >>[-<<+>>]
            >.
            [-]
        <<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>]
    <<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/main
            >>>>>-
            l27 <<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<#mainloop_main
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#B:%call_term_for_6
        >#alloc_%1
        >#alloc_%2
        >#alloc_%3
        >#%4_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%5_=_ptrtoint_i32*_%2_to_i8(mult)
        >#%6_=_ptrtoint_i32*_%3_to_i8(mult)
        >#%7_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%8_=_ptrtoint_i32*_%1_to_i8(mult)
        >#%9_=_ptrtoint_i32*_%2_to_i8(mult)
        >#%10_=_ptrtoint_i32*_%3_to_i8(mult)
        <<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            store i32 112_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<[-]
            m24/14 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            store i32 116_ i32* %2_ align 4
            op_to_reg storing const value in temp address
            >#constop_116
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<[-]
            m25/15 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            store i32 114_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            <#constop_114
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<[-]
            m24/16 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            %4 = ptrtoint i32* %1 to i8
            <<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/25/27 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m27/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<<+++++++++++++++
            m24/17 [-<<<<<<<+>>>>>>>]
            call @deref_int(i8 %4)
            enable next block when we return
            <<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            stack_width 27
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d17/24/25 <<<<<<<<<<<<<<<<[->>>>>>>+>+<<<<<<<<]
            m24/17 >>>>>>>[-<<<<<<<+>>>>>>>]
            m25/33 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++
            l1 <
            d0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            %5 = ptrtoint i32* %2 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/25/26 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m26/0 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++
            m24/18 [-<<<<<<+>>>>>>]
            call @deref_int(i8 %5)
            enable next block when we return
            <<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            stack_width 27
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d18/24/25 <<<<<<<<<<<<<<<[->>>>>>+>+<<<<<<<]
            m24/18 >>>>>>[-<<<<<<+>>>>>>]
            m25/33 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++
            l1 <
            d0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>]
        >#B:%call_term_for_1
        [
            -
            %6 = ptrtoint i32* %3 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/25/26 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m26/0 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++
            m24/19 [-<<<<<+>>>>>]
            call @deref_int(i8 %6)
            enable next block when we return
            <<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            stack_width 27
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d19/24/25 <<<<<<<<<<<<<<[->>>>>+>+<<<<<<]
            m24/19 >>>>>[-<<<<<+>>>>>]
            m25/33 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++
            l1 <
            d0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>]
        >#B:%call_term_for_2
        [
            -
            %7 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/25/26 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m26/0 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++
            m24/20 [-<<<<+>>>>]
            call @deref_int_set(i8 %7)
            enable next block when we return
            <<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            stack_width 27
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d20/24/25 <<<<<<<<<<<<<[->>>>+>+<<<<<]
            m24/20 >>>>[-<<<<+>>>>]
            m25/33 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++
            l1 <
            d0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int_set
            +
            >#deref_int_set
            +
            >>>#deref_int_set/b0
            +
        >>>>>]
        >#B:%call_term_for_3
        [
            -
            %8 = ptrtoint i32* %1 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/25/26 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m26/0 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++
            m24/21 [-<<<+>>>]
            call @deref_int(i8 %8)
            enable next block when we return
            <<<<<<<<<<<<<#caller/%call_term_for_4
            +
            stack_width 27
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>#arg_0
            d21/24/25 <<<<<<<<<<<<[->>>+>+<<<<]
            m24/21 >>>[-<<<+>>>]
            m25/33 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++
            l1 <
            d0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>]
        >#B:%call_term_for_4
        [
            -
            %9 = ptrtoint i32* %2 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/25/26 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m26/0 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++
            m24/22 [-<<+>>]
            call @deref_int(i8 %9)
            enable next block when we return
            <<<<<<<<<<<<#caller/%call_term_for_5
            +
            stack_width 27
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>#arg_0
            d22/24/25 <<<<<<<<<<<[->>+>+<<<]
            m24/22 >>[-<<+>>]
            m25/33 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++
            l1 <
            d0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>]
        >#B:%call_term_for_5
        [
            -
            %10 = ptrtoint i32* %3 to i8
            >>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/25/26 <<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m26/0 >>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++
            m24/23 [-<+>]
            call @deref_int(i8 %10)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_6
            +
            stack_width 27
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>#arg_0
            d23/24/25 <<<<<<<<<<[->+>+<<]
            m24/23 >[-<+>]
            m25/33 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++
            l1 <
            d0/35/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m36/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r27 >>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>>]
        >#B:%call_term_for_6
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l7 <<<<<<<
        >>>>>>>>>>>>>]
    <<<<<<<<<<]
<<<]
