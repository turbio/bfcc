r7 >>>>>>>
+++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>#main
+
>#main/b0
+
<<<<<[
    >#three_args
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/three_args
            >>>>>>-
            l17 <<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_three_args
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_three_args
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#%4_=_trunc_i32_%0_to_i8
        >#%5_=_trunc_i32_%1_to_i8
        >#%6_=_trunc_i32_%2_to_i8
        >#%0
        >#%1
        >#%2
        <<<<<<<<<<<#B:%no_block0_call_for_three_args
        [
            -
            copy up args
            >>>>>>>>>#arg_%0
            l2 <<
            m0/16 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/18 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            m0/20 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            br label %3
            >>>>>>>+
        <<]
        >>#B:%3
        [
            -
            %4 = trunc i32 %0 to i8
            m14/11 >>>>>>>[-<<<+>>>]
            call @putchar(i8 %4)
            enable next block when we return
            <<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            >>>.
            [-]
        <<<<]
        >#B:%call_term_for_0
        [
            -
            %5 = trunc i32 %1 to i8
            m15/12 >>>>>>>[-<<<+>>>]
            call @putchar(i8 %5)
            enable next block when we return
            <<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>.
            [-]
        <<<<]
        >#B:%call_term_for_1
        [
            -
            %6 = trunc i32 %2 to i8
            m16/13 >>>>>>>[-<<<+>>>]
            call @putchar(i8 %6)
            enable next block when we return
            <<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>.
            [-]
        <<<<]
        >#B:%call_term_for_2
        [
            -
            ret void
            zero all function allocs
            <<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>]
    <<<<<<<<<]
    >#five_args
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/five_args
            >>>>>>-
            l23 <<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_five_args
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_five_args
        >#B:%ret_lading_pad
        >#B:%5
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#%6_=_trunc_i32_%0_to_i8
        >#%7_=_trunc_i32_%1_to_i8
        >#%8_=_trunc_i32_%2_to_i8
        >#%9_=_trunc_i32_%3_to_i8
        >#%10_=_trunc_i32_%4_to_i8
        >#%0
        >#%1
        >#%2
        >#%3
        >#%4
        <<<<<<<<<<<<<<<<<#B:%no_block0_call_for_five_args
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/20 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/22 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            m0/24 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            >>>>>>>>>>>>>>>>>>>>>#arg_%3
            l5 <<<<<
            m0/26 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r5 >>>>>
            >>>>>>>>>>>>>>>>>>>>>>#arg_%4
            l6 <<<<<<
            m0/28 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r6 >>>>>>
            br label %5
            >>>>>>>+
        <<]
        >>#B:%5
        [
            -
            %6 = trunc i32 %0 to i8
            m18/13 >>>>>>>>>>>[-<<<<<+>>>>>]
            call @putchar(i8 %6)
            enable next block when we return
            <<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            >>>>>.
            [-]
        <<<<<<]
        >#B:%call_term_for_0
        [
            -
            %7 = trunc i32 %1 to i8
            m19/14 >>>>>>>>>>>[-<<<<<+>>>>>]
            call @putchar(i8 %7)
            enable next block when we return
            <<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>>.
            [-]
        <<<<<<]
        >#B:%call_term_for_1
        [
            -
            %8 = trunc i32 %2 to i8
            m20/15 >>>>>>>>>>>[-<<<<<+>>>>>]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>>.
            [-]
        <<<<<<]
        >#B:%call_term_for_2
        [
            -
            %9 = trunc i32 %3 to i8
            m21/16 >>>>>>>>>>>[-<<<<<+>>>>>]
            call @putchar(i8 %9)
            enable next block when we return
            <<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>>>>.
            [-]
        <<<<<<]
        >#B:%call_term_for_3
        [
            -
            %10 = trunc i32 %4 to i8
            m22/17 >>>>>>>>>>>[-<<<<<+>>>>>]
            call @putchar(i8 %10)
            enable next block when we return
            <<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            >>>>>.
            [-]
        <<<<<<]
        >#B:%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            <<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l13 <<<<<<<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<<<]
    >#twelve_args
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/twelve_args
            >>>>>>-
            l30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_twelve_args
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_twelve_args
        >#B:%ret_lading_pad
        >#B:%12
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#%13_=_trunc_i32_%8_to_i8
        >#%14_=_trunc_i32_%9_to_i8
        >#%15_=_trunc_i32_%10_to_i8
        >#%16_=_trunc_i32_%11_to_i8
        >#%0
        >#%1
        >#%2
        >#%3
        >#%4
        >#%5
        >#%6
        >#%7
        >#%8
        >#%9
        >#%10
        >#%11
        <<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_twelve_args
        [
            -
            copy up args
            >>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/20 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/22 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            m0/24 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            >>>>>>>>>>>>>>>>>>>>>#arg_%3
            l5 <<<<<
            m0/26 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r5 >>>>>
            >>>>>>>>>>>>>>>>>>>>>>#arg_%4
            l6 <<<<<<
            m0/28 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r6 >>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>#arg_%5
            l7 <<<<<<<
            m0/30 <<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r7 >>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>#arg_%6
            l8 <<<<<<<<
            m0/32 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r8 >>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>#arg_%7
            l9 <<<<<<<<<
            m0/34 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r9 >>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%8
            l10 <<<<<<<<<<
            m0/36 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r10 >>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%9
            l11 <<<<<<<<<<<
            m0/38 <<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r11 >>>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%10
            l12 <<<<<<<<<<<<
            m0/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r12 >>>>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%11
            l13 <<<<<<<<<<<<<
            m0/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r13 >>>>>>>>>>>>>
            br label %12
            >>>>>>>+
        <<]
        >>#B:%12
        [
            -
            call @three_args(i32 %0_ i32 %1_ i32 %2)
            enable next block when we return
            >#caller/%call_term_for_0
            +
            stack_width 30
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m18/39 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>#arg_1
            m19/38 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>#arg_2
            m20/37 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<#===FRAME_three_args
            +
            >#three_args
            +
            >>>>#three_args/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            call @five_args(i32 %3_ i32 %4_ i32 %5_ i32 %6_ i32 %7)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            stack_width 30
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m21/41 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>#arg_1
            m22/40 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>#arg_2
            m23/39 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>#arg_3
            m24/38 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>#arg_4
            m25/37 <<<<<<<<<<<<[->>>>>>>>>>>>+<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/43/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m44/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r30 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>>#caller/jump_pad_blk
            +
            r13 >>>>>>>>>>>>>
            <<<<<<#===FRAME_five_args
            +
            >>#five_args
            +
            >>>#five_args/b0
            +
        >>>]
        >#B:%call_term_for_1
        [
            -
            %13 = trunc i32 %8 to i8
            m26/14 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            call @putchar(i8 %13)
            enable next block when we return
            <<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>.
            [-]
        <<<<<]
        >#B:%call_term_for_2
        [
            -
            %14 = trunc i32 %9 to i8
            m27/15 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            call @putchar(i8 %14)
            enable next block when we return
            <<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>>>.
            [-]
        <<<<<]
        >#B:%call_term_for_3
        [
            -
            %15 = trunc i32 %10 to i8
            m28/16 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            call @putchar(i8 %15)
            enable next block when we return
            <<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            >>>>.
            [-]
        <<<<<]
        >#B:%call_term_for_4
        [
            -
            %16 = trunc i32 %11 to i8
            m29/17 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            call @putchar(i8 %16)
            enable next block when we return
            <<<<<<<<<<<<<<<<#caller/%call_term_for_5
            +
            putchar intrinsic
            >>>>.
            [-]
        <<<<<]
        >#B:%call_term_for_5
        [
            -
            ret void
            zero all function allocs
            <<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l20 <<<<<<<<<<<<<<<<<<<<
        >>>>>>>>>>>>>]
    <<<<<<<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/main
            >>>>>>-
            l25 <<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_main
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        <<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            call @three_args(i32 79_ i32 119_ i32 79)
            enable next block when we return
            >#caller/%call_term_for_0
            +
            stack_width 25
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<#constop_79
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m13/34 [->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>#arg_1
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<#constop_119
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m14/33 [->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>#arg_2
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<#constop_79
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m15/32 [->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++
            l1 <
            d0/36/37 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m37/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r25 >>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<#===FRAME_three_args
            +
            >#three_args
            +
            >>>>#three_args/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            call @putchar(i8 10)
            enable next block when we return
            >#caller/%call_term_for_1
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>#constop_10
            ++++++++++
            .
            [-]
        <<<<<]
        >#B:%call_term_for_1
        [
            -
            call @five_args(i32 122_ i32 97_ i32 100_ i32 100_ i32 121)
            enable next block when we return
            >#caller/%call_term_for_2
            +
            stack_width 25
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<#constop_122
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m13/36 [->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>#arg_1
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m14/35 [->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>#arg_2
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m16/34 [->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>>>#arg_3
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m15/33 [->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>>>>>#arg_4
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<#constop_121
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m17/32 [->>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++
            l1 <
            d0/38/39 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m39/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r25 >>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r13 >>>>>>>>>>>>>
            <<<<<<#===FRAME_five_args
            +
            >>#five_args
            +
            >>>#five_args/b0
            +
        >>>>]
        >#B:%call_term_for_2
        [
            -
            call @putchar(i8 10)
            enable next block when we return
            >#caller/%call_term_for_3
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>#constop_10
            ++++++++++
            .
            [-]
        <<<]
        >#B:%call_term_for_3
        [
            -
            call @twelve_args(i32 108_ i32 109_ i32 97_ i32 111_ i32 109_ i32 121_ i32 100_ i32 117_ i32 100_ i32 101_ i32 33_ i32 63)
            enable next block when we return
            >#caller/%call_term_for_4
            +
            stack_width 25
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_108
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m13/43 [->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_1
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#constop_109
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m14/42 [->>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_2
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<<<#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m15/41 [->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>>>>>>>>>>>#arg_3
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<<<<#constop_111
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m16/40 [->>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>>>>>>>>>>>#arg_4
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<#constop_109
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m18/39 [->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 5
            >>>>>>>>>>>>>>>>>>>>#arg_5
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<<<<#constop_121
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m17/38 [->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 6
            >>>>>>>>>>>>>>>>>>>>#arg_6
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<<<#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m19/37 [->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 7
            >>>>>>>>>>>>>>>>>#arg_7
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<<<#constop_117
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m20/36 [->>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<]
            copy up arg 8
            >>>>>>>>>>>>>>>#arg_8
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<<<#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m21/35 [->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            copy up arg 9
            >>>>>>>>>>>>>#arg_9
            op_to_reg storing const value in temp address
            <<<<<<<<<<<<#constop_101
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m22/34 [->>>>>>>>>>>>+<<<<<<<<<<<<]
            copy up arg 10
            >>>>>>>>>>>#arg_10
            op_to_reg storing const value in temp address
            <<<<<<<<<<#constop_33
            +++++++++++++++++++++++++++++++++
            m23/33 [->>>>>>>>>>+<<<<<<<<<<]
            copy up arg 11
            >>>>>>>>>#arg_11
            op_to_reg storing const value in temp address
            <<<<<<<<#constop_63
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m24/32 [->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++
            l1 <
            d0/45/46 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m46/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r25 >>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r20 >>>>>>>>>>>>>>>>>>>>
            <<<<<<#===FRAME_twelve_args
            +
            >>>#twelve_args
            +
            >>#twelve_args/b0
            +
        >>>>>>]
        >#B:%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            <<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<]
<<<<]
