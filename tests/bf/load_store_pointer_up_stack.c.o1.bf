r6 >>>>>>
++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>#main
+
>#main/b0
+
<<<<[
    >#deref_int_set
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/deref_int_set
            >>>>>-
            l24 <<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<#mainloop_deref_int_set
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int_set
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#%2_=_zext_i8_%0_to_i64(mult)
        >#%3_=_inttoptr_i64_%2_to_i32*(mult)
        >#%0
        <<<<<<#B:%no_block0_call_for_deref_int_set
        [
            -
            copy up args
            >>>>>>#arg_%0
            l2 <<
            m0/12 <<<<<<<<<<[->>>>>>>>>>>>+<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = zext i8 %0 to i64
            >>[-]
            m10/8 >>[-<<+>>]
            %3 = inttoptr i64 %2 to i32*
            <[-]
            d8/11/12 <[->>>+>+<<<<]
            m11/8 >>>[-<<<+>>>]
            m12/9 >[-<<<+>>>]
            store i32 98_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            <#constop_98
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            d9/13/12 <<[->>>>+<+<<<]
            m13/9 >>>>[-<<<<+>>>>]
            >#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/19/20 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<]
            m19/0 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m19/21 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m21/16 [-<<<<<+>>>>>]
                <<<<<++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m11/17 <<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                m15/14 <[-<+>]
                m16/15 >[-<+>]
                m17/16 >[-<+>]
                m13/17 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m17/13 >>>>[-<<<<+>>>>]
            <<[
                m18/14 >>>[-<<<<+>>>>]
                
                m15/16 <<<[->+<]
                r1 >
                -
            ]
            call @putchar(i8 98)
            enable next block when we return
            <<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            op_to_reg storing const value in temp address
            >>>>#constop_98
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            .
            [-]
        <<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            <<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>]
    <<<<<<]
    >#deref_int
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/deref_int
            >>>>>-
            l24 <<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<#mainloop_deref_int
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_deref_int
        >#B:%ret_lading_pad
        >#B:%1
        >#B:%call_term_for_0
        >#%2_=_zext_i8_%0_to_i64(mult)
        >#%3_=_inttoptr_i64_%2_to_i32*(mult)
        >#%4_=_load_i32*_%3__align_4(mult)
        >#%5_=_trunc_i32_%4_to_i8(mult)
        >#%0
        <<<<<<<<#B:%no_block0_call_for_deref_int
        [
            -
            copy up args
            >>>>>>>>#arg_%0
            l2 <<
            m0/14 <<<<<<<<<<<<[->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            r2 >>
            br label %1
            >>>>>>+
        <<]
        >>#B:%1
        [
            -
            %2 = zext i8 %0 to i64
            >>[-]
            m12/8 >>>>[-<<<<+>>>>]
            %3 = inttoptr i64 %2 to i32*
            <<<[-]
            d8/13/14 <[->>>>>+>+<<<<<<]
            m13/8 >>>>>[-<<<<<+>>>>>]
            m14/9 >[-<<<<<+>>>>>]
            %4 = load i32* %3_ align 4
            <<<<[-]
            d9/13/15 <[->>>>+>>+<<<<<<]
            m13/9 >>>>[-<<<<+>>>>]
            >>>#train_tmp
            >#train_ret
            >#train_ptr
            
            >#stackptr
            <<<<<#stackptr_tmp
            l1 <
            d0/15/20 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<]
            m15/0 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            r1 >
            >>>>>#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m19/21 <<<<[->>+<<]
            >>>>+
            <<<<<<<<[
                -
                >>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<]
            >>>>>>>>-
            <<#subnu_to
            [
                if pos
                m21/18 [-<<<+>>>]
                <<<++++++++++++++++
            >>>]
            <[
                if neg
                <<++++++++++++++++
                >>[
                    -
                    <<-
                >>]
            ]
            drive left! choo choo
            <<[
                m17/16 <[-<+>]
                m18/17 >[-<+>]
                
                m15/18 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d15/16/18 <<<[->+>>+<<<]
            m16/15 >[-<+>]
            >[
                m19/16 >>[-<<<+>>>]
                m18/19 <[->+<]
                m17/18 <[->+<]
                r1 >
                -
            ]
            m18/10 >[-<<<<<<<<+>>>>>>>>]
            %5 = trunc i32 %4 to i8
            <<<<<<<[-]
            d10/13/14 <[->>>+>+<<<<]
            m13/10 >>>[-<<<+>>>]
            m14/11 >[-<<<+>>>]
            call @putchar(i8 %5)
            enable next block when we return
            <<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            d11/13/14 >>>>[->>+>+<<<]
            m13/11 >>[-<<+>>]
            >.
            [-]
        <<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>]
    <<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/main
            >>>>>-
            l35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<#mainloop_main
        >#F:deref_int_set
        >#F:deref_int
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#B:%call_term_for_6
        >#B:%call_term_for_7
        >#B:%call_term_for_8
        >#B:%call_term_for_9
        >#B:%call_term_for_10
        >#B:%call_term_for_11
        >#B:%call_term_for_12
        >#alloc_%1
        >#alloc_%2
        >#alloc_%3
        >#%4_=_bitcast_i32*_%1_to_i8*(mult)
        >#%5_=_bitcast_i32*_%2_to_i8*(mult)
        >#%6_=_bitcast_i32*_%3_to_i8*(mult)
        >#%7_=_ptrtoint_i32*_%1_to_i64(mult)
        >#%8_=_trunc_i64_%7_to_i8(mult)
        >#%9_=_ptrtoint_i32*_%2_to_i64(mult)
        >#%10_=_trunc_i64_%9_to_i8(mult)
        >#%11_=_ptrtoint_i32*_%3_to_i64(mult)
        >#%12_=_trunc_i64_%11_to_i8(mult)
        <<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            %2 = alloca i32_ align 4
            %3 = alloca i32_ align 4
            %4 = bitcast i32* %1 to i8*
            >>>>>>>>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/33/34 <<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m34/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++
            m32/23 [-<<<<<<<<<+>>>>>>>>>]
            call @llvm_lifetime_start_p0i8(i64 4_ i8* %4)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_0
        [
            -
            store i32 112_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<<<[-]
            m32/20 >>>>>>>>>>>>[-<<<<<<<<<<<<+>>>>>>>>>>>>]
            %5 = bitcast i32* %2 to i8*
            <<<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/33/35 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<<++++++++++++++++++++++
            m32/24 [-<<<<<<<<+>>>>>>>>]
            call @llvm_lifetime_start_p0i8(i64 4_ i8* %5)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_1
        [
            -
            store i32 116_ i32* %2_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>#constop_116
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<<[-]
            m32/21 >>>>>>>>>>>[-<<<<<<<<<<<+>>>>>>>>>>>]
            %6 = bitcast i32* %3 to i8*
            <<<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/33/34 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m34/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++
            m32/25 [-<<<<<<<+>>>>>>>]
            call @llvm_lifetime_start_p0i8(i64 4_ i8* %6)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_2
        [
            -
            store i32 114_ i32* %3_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>#constop_114
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<[-]
            m32/22 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            %7 = ptrtoint i32* %1 to i64
            <<<<<<[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/33/34 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m34/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++
            m32/26 [-<<<<<<+>>>>>>]
            %8 = trunc i64 %7 to i8
            <<<<<[-]
            d26/32/33 <[->>>>>>+>+<<<<<<<]
            m32/26 >>>>>>[-<<<<<<+>>>>>>]
            m33/27 >[-<<<<<<+>>>>>>]
            call @deref_int(i8 %8)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            stack_width 35
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d27/32/33 <<<<<<<<<<<<<<[->>>>>+>+<<<<<<]
            m32/27 >>>>>[-<<<<<+>>>>>]
            m33/41 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/43/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m44/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r35 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>]
        >#B:%call_term_for_3
        [
            -
            %9 = ptrtoint i32* %2 to i64
            >>>>>>>>>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/33/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m34/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++++
            m32/28 [-<<<<+>>>>]
            %10 = trunc i64 %9 to i8
            <<<[-]
            d28/32/33 <[->>>>+>+<<<<<]
            m32/28 >>>>[-<<<<+>>>>]
            m33/29 >[-<<<<+>>>>]
            call @deref_int(i8 %10)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            stack_width 35
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d29/32/33 <<<<<<<<<<<<[->>>+>+<<<<]
            m32/29 >>>[-<<<+>>>]
            m33/41 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/43/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m44/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r35 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>]
        >#B:%call_term_for_4
        [
            -
            %11 = ptrtoint i32* %3 to i64
            >>>>>>>>>>>>>>>>>>>[-]
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/33/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m34/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++
            m32/30 [-<<+>>]
            %12 = trunc i64 %11 to i8
            <[-]
            d30/32/33 <[->>+>+<<<]
            m32/30 >>[-<<+>>]
            m33/31 >[-<<+>>]
            call @deref_int(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_5
            +
            stack_width 35
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d31/32/33 <<<<<<<<<<[->+>+<<]
            m32/31 >[-<+>]
            m33/41 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/43/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m44/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r35 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>]
        >#B:%call_term_for_5
        [
            -
            call @deref_int_set(i8 %8)
            enable next block when we return
            >#caller/%call_term_for_6
            +
            stack_width 35
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d27/32/33 <<<<<<<<<<<<<<[->>>>>+>+<<<<<<]
            m32/27 >>>>>[-<<<<<+>>>>>]
            m33/41 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/43/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m44/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r35 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int_set
            +
            >#deref_int_set
            +
            >>>#deref_int_set/b0
            +
        >>>>>>>>]
        >#B:%call_term_for_6
        [
            -
            call @deref_int(i8 %8)
            enable next block when we return
            >#caller/%call_term_for_7
            +
            stack_width 35
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d27/32/33 <<<<<<<<<<<<<<[->>>>>+>+<<<<<<]
            m32/27 >>>>>[-<<<<<+>>>>>]
            m33/41 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/43/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m44/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r35 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>>>]
        >#B:%call_term_for_7
        [
            -
            call @deref_int(i8 %10)
            enable next block when we return
            >#caller/%call_term_for_8
            +
            stack_width 35
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d29/32/33 <<<<<<<<<<<<[->>>+>+<<<<]
            m32/29 >>>[-<<<+>>>]
            m33/41 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/43/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m44/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r35 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>>>>]
        >#B:%call_term_for_8
        [
            -
            call @deref_int(i8 %12)
            enable next block when we return
            >#caller/%call_term_for_9
            +
            stack_width 35
            ret_pad_width 5
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            d31/32/33 <<<<<<<<<<[->+>+<<]
            m32/31 >[-<+>]
            m33/41 >[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/43/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m44/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r35 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<<#===FRAME_deref_int
            +
            >>#deref_int
            +
            >>#deref_int/b0
            +
        >>>>>>>>>>>]
        >#B:%call_term_for_9
        [
            -
            call @llvm_lifetime_end_p0i8(i64 4_ i8* %6)
            enable next block when we return
            >#caller/%call_term_for_10
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_10
        [
            -
            call @llvm_lifetime_end_p0i8(i64 4_ i8* %5)
            enable next block when we return
            >#caller/%call_term_for_11
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_11
        [
            -
            call @llvm_lifetime_end_p0i8(i64 4_ i8* %4)
            enable next block when we return
            >#caller/%call_term_for_12
            +
            ignoring llvm intrinsic
        <]
        >#B:%call_term_for_12
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l7 <<<<<<<
        >>>>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<]
<<<]
