r4 >>>>
++++
r1 >
runtime init:
#===TOP_FRAME
+
>#main
+
>#main/b0
+
<<[
    >#main
    [
        >>#main/RET_LANDING_PAD
        [
            <<<-
            #dead_frame
            >-
            <#dead_fn_pad/main
            >>>-
            l30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<#mainloop_main
        >#F:main
        >#B:%0
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%6
        >#B:%7
        >#B:%10
        >#B:%13
        >#B:%16
        >#B:%call_term_for_6
        >#B:%17
        >#B:%20
        >#B:%23
        >#B:%call_term_for_10
        >#B:%24
        >#B:%call_term_for_12
        >#B:%25
        >#B:%28
        >#B:%29
        >#B:%32
        >#alloc_%1
        >#alloc_%2
        <<<<<<<<<<<<<<<<<<<<[
            -
            copy up args
            %1 = alloca i32_ align 4
            %2 = alloca i32_ align 4
            store i32 0_ i32* %1_ align 4
            store sitch: alloca Some(21)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>#constop_0
            
            store sitch: from ConstantOperand(ConstantRef(Int { bits: 32_ value: 0 }))
            wowowowowo _Fixed(21) __
            <<<<<[-]
            m26/21 >>>>>[-<<<<<+>>>>>]
            br label %3
            <<<<<<<<<<<<<<<<<<<<<<+
        <<]
        >>[
            -
            %4 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%4
            #load_thru_%1_to_%4
            <<<<<<<<<<<<<<<#tmp0_for_load
            d21/25/40 <<<<[->>>>+>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            m25/21 >>>>[-<<<<+>>>>]
            %5 = icmp ule i32 %4_ i32 1
            op_to_reg storing const value in temp address
            <<#constop_1
            +
            >>>>>>>>>>>>>>>>>#icmp_op0_i32_%4
            <<<<<<<<<<<<<<<<<#icmp_op1_i32_1
            >>>>>>>>>>>>>>>>>>#icmp_ret_%5
            <<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m40/27 >>>>>>>>>>>[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            <<<<<<<<<<<+
            <<<<<<[
                -
                
                >>>>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<]
            >>>>>>-
            >>>>>>>>>>>>+
            <<<<<<<<<<<<<<[
                [-]
                >>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<]
            br i1 %5_ label %6_ label %32
            <<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>+
                #B:main/6_true
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>+
                #B:main/32_false
            <<<<<<<<<<<<<<<<<]
        >]
        >[
            -
            store i32 0_ i32* %2_ align 4
            store sitch: alloca Some(22)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>#constop_0
            
            store sitch: from ConstantOperand(ConstantRef(Int { bits: 32_ value: 0 }))
            wowowowowo _Fixed(22) __
            <<<<[-]
            m26/22 >>>>[-<<<<+>>>>]
            br label %7
            <<<<<<<<<<<<<<<<<<<<+
        <]
        >[
            -
            %8 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%8
            #load_thru_%2_to_%8
            <<<<<<<<<<<<<<<<<#tmp0_for_load
            d22/25/42 <<<[->>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            m25/22 >>>[-<<<+>>>]
            %9 = icmp ule i32 %8_ i32 1
            op_to_reg storing const value in temp address
            <<#constop_1
            +
            >>>>>>>>>>>>>>>>>>>#icmp_op0_i32_%8
            <<<<<<<<<<<<<<<<<<<#icmp_op1_i32_1
            >>>>>>>>>>>>>>>>>>>>#icmp_ret_%9
            <<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m42/24 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<+
            <<<[
                -
                
                >[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <]
            >>>-
            >>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<[
                [-]
                >>>>>>>>>>>>>>>>>>>[-]
            <<<<<<<<<<<<<<<<<<<]
            br i1 %9_ label %10_ label %28
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>+
                #B:main/10_true
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>+
                #B:main/28_false
            <<<<<<<<<<<<<<<]
        >>>]
        >[
            -
            %11 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%11
            #load_thru_%1_to_%11
            <<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d21/25/44 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            m25/21 >>>>[-<<<<+>>>>]
            %12 = icmp ne i32 %11_ i32 0
            op_to_reg storing const value in temp address
            <<#constop_0
            
            >>>>>>>>>>>>>>>>>>>>>#icmp_op0_i32_%11
            <<<<<<<<<<<<<<<<<<<<<#icmp_op1_i32_0
            >>>>>>>>>>>>>>>>>>>>>>#icmp_ret_%12
            <<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m44/25 >>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                >>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<]
            <[
                [-]
                >>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<]
            br i1 %12_ label %16_ label %13
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>+
                #B:main/16_true
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>+
                #B:main/13_false
            <<<<<]
        >>>>]
        >[
            -
            %14 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%14
            #load_thru_%2_to_%14
            <<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d22/25/46 <<<[->>>+>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/22 >>>[-<<<+>>>]
            %15 = icmp ne i32 %14_ i32 0
            op_to_reg storing const value in temp address
            <<#constop_0
            
            >>>>>>>>>>>>>>>>>>>>>>>#icmp_op0_i32_%14
            <<<<<<<<<<<<<<<<<<<<<<<#icmp_op1_i32_0
            >>>>>>>>>>>>>>>>>>>>>>>>#icmp_ret_%15
            <<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m46/25 >>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<]
            <[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<]
            br i1 %15_ label %16_ label %17
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>+
                #B:main/16_true
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>+
                #B:main/17_false
            <<<<<<<<]
        >>>>>]
        >[
            -
            call @putchar(i8 111)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>#constop_111
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<<<<<<<<#caller/%call_term_for_6
            +
            putchar intrinsic
            >>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<]
        >[
            -
            br label %17
            >+
        <]
        >[
            -
            %18 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%18
            #load_thru_%1_to_%18
            <<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d21/25/48 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/21 >>>>[-<<<<+>>>>]
            %19 = icmp ne i32 %18_ i32 0
            op_to_reg storing const value in temp address
            <<#constop_0
            
            >>>>>>>>>>>>>>>>>>>>>>>>>#icmp_op0_i32_%18
            <<<<<<<<<<<<<<<<<<<<<<<<<#icmp_op1_i32_0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#icmp_ret_%19
            <<<<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m48/25 >>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<]
            <[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<]
            br i1 %19_ label %20_ label %24
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>+
                #B:main/20_true
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>+
                #B:main/24_false
            <<<<<<<<<<<<]
        >>>>>>>>]
        >[
            -
            %21 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%21
            #load_thru_%2_to_%21
            <<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d22/25/50 <<<[->>>+>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/22 >>>[-<<<+>>>]
            %22 = icmp ne i32 %21_ i32 0
            op_to_reg storing const value in temp address
            <<#constop_0
            
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#icmp_op0_i32_%21
            <<<<<<<<<<<<<<<<<<<<<<<<<<<#icmp_op1_i32_0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#icmp_ret_%22
            <<<<<<<<<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m50/25 >>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<+
            <<<<[
                -
                >+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<]
            >>>>-
            <<[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<]
            <[
                [-]
                >>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<<]
            br i1 %22_ label %23_ label %24
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>+
                #B:main/23_true
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>+
                #B:main/24_false
            <<<<<<<<<<<<]
        >>>>>>>>>]
        >[
            -
            call @putchar(i8 97)
            op_to_reg storing const value in temp address
            >>>>>>>>>>#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<<<<#caller/%call_term_for_10
            +
            putchar intrinsic
            >>>>>>>>>.
            [-]
        <<<<<<<<<<]
        >[
            -
            br label %24
            >+
        <]
        >[
            -
            call @putchar(i8 44)
            op_to_reg storing const value in temp address
            >>>>>>>>#constop_44
            ++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<<#caller/%call_term_for_12
            +
            putchar intrinsic
            >>>>>>>.
            [-]
        <<<<<<<<]
        >[
            -
            br label %25
            >+
        <]
        >[
            -
            %26 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%26
            #load_thru_%2_to_%26
            <<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d22/25/52 <<<[->>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/22 >>>[-<<<+>>>]
            %27 = add i32 %26_ i32 1
            op_to_reg storing const value in temp address
            <<#constop_1
            +
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#add_op0_i32_%26
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<#add_op1_i32_1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#add_ret_%27
            m52/53 <[->+<]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            store i32 %27_ i32* %2_ align 4
            store sitch: alloca Some(22)
            store sitch: from LocalOperand { name: Number(27)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(22) __
            <[-]
            m53/22 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            br label %7
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>>>>>>>>>]
        >[
            -
            br label %29
            >+
        <]
        >[
            -
            %30 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%30
            #load_thru_%1_to_%30
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d21/25/54 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/21 >>>>[-<<<<+>>>>]
            %31 = add i32 %30_ i32 1
            op_to_reg storing const value in temp address
            <<#constop_1
            +
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#add_op0_i32_%30
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#add_op1_i32_1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#add_ret_%31
            m54/55 <[->+<]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            store i32 %31_ i32* %1_ align 4
            store sitch: alloca Some(21)
            store sitch: from LocalOperand { name: Number(31)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(21) __
            <<[-]
            m55/21 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>>>>>>>>>>>>>]
        >[
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l5 <<<<<
        >>>>>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<<<<]
<]
