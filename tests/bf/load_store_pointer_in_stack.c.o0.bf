r5 >>>>>
+++++
r1 >
runtime init:
#===TOP_FRAME
+
>>#main
+
>#main/b0
+
<<<[
    >#another_stack
    [
        >>>#B:%ret_lading_pad
        [
            <<<<-
            #dead_frame
            >-
            <#dead_fn_pad/another_stack
            >>>>-
            l59 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<#mainloop_another_stack
        >#F:another_stack
        >#F:main
        >#B:%no_block0_call_for_another_stack
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#alloc_%1
        >#alloc_%2
        >#alloc_%3
        >#alloc_%4
        >#alloc_%5
        >#%6_=_ptrtoint_i32*_%1_to_i8
        >#%7_=_load_i8*_%2__align_1
        >#%8_=_zext_i8_%7_to_i32
        >#%9_=_icmp_sgt_i32_%8__i32_0
        >#%10_=_zext_i1_%9_to_i32
        >#%11_=_add_i32_65__i32_%10
        >#%12_=_trunc_i32_%11_to_i8
        >#%13_=_ptrtoint_i32*_%1_to_i8
        >#%14_=_zext_i8_%13_to_i32
        >#%15_=_load_i8*_%2__align_1
        >#%16_=_zext_i8_%15_to_i32
        >#%17_=_icmp_eq_i32_%14__i32_%16
        >#%18_=_zext_i1_%17_to_i32
        >#%19_=_add_i32_65__i32_%18
        >#%20_=_trunc_i32_%19_to_i8
        >#%21_=_load_i8*_%2__align_1
        >#%22_=_zext_i8_%21_to_i64
        >#%23_=_inttoptr_i64_%22_to_i32*
        >#%24_=_icmp_eq_i32*_%1__i32*_%23
        >#%25_=_zext_i1_%24_to_i32
        >#%26_=_add_i32_65__i32_%25
        >#%27_=_trunc_i32_%26_to_i8
        >#%28_=_load_i32**_%3__align_8
        >#%29_=_load_i32*_%28__align_4
        >#%30_=_load_i32*_%4__align_4
        >#%31_=_trunc_i32_%30_to_i8
        >#%32_=_load_i32**_%3__align_8
        >#%33_=_load_i32**_%3__align_8
        >#%34_=_load_i32*_%33__align_4
        >#%35_=_load_i32*_%5__align_4
        >#%36_=_trunc_i32_%35_to_i8
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_another_stack
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            %2 = alloca i8_ align 1
            %3 = alloca i32*_ align 8
            %4 = alloca i32_ align 4
            %5 = alloca i32_ align 4
            store i32 112_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m47/11 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %6 = ptrtoint i32* %1 to i8
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/49/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m48/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            ++++++++++++
            m48/16 [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i8 %6_ i8* %2_ align 1
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m16/12 >>>>[-<<<<+>>>>]
            store i32* %1_ i32** %3_ align 8
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/48/50 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m50/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<<++++++++++++
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m47/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %7 = load i8* %2_ align 1
            d12/17/47 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m47/12 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %8 = zext i8 %7 to i32
            m17/18 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->+<]
            %9 = icmp sgt i32 %8_ i32 0
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_0
            
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m18/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<[
                -
                
                >>>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<]
            >>>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %10 = zext i1 %9 to i32
            m19/20 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->+<]
            %11 = add i32 65_ i32 %10
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m47/21 [-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >+
            <]
            %12 = trunc i32 %11 to i8
            m21/22 >[->+<]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            %13 = ptrtoint i32* %1 to i8
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/48/49 <<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m49/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++
            m47/23 [-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            %14 = zext i8 %13 to i32
            m23/24 <<<<<<<<<<<<<<<<<<<<<<<<[->+<]
            %15 = load i8* %2_ align 1
            d12/25/47 <<<<<<<<<<<[->>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m47/12 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %16 = zext i8 %15 to i32
            m25/26 <<<<<<<<<<<<<<<<<<<<<<[->+<]
            %17 = icmp eq i32 %14_ i32 %16
            >>>>>>>>>>>>>>>>>>>>>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m26/48 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>>>>>>>-
            <<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>>]
            %18 = zext i1 %17 to i32
            m27/28 <<<<<<<<<<<<<<<<<<<<[->+<]
            %19 = add i32 65_ i32 %18
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m47/29 [-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<[
                -
                >+
            <]
            %20 = trunc i32 %19 to i8
            m29/30 >[->+<]
            call @putchar(i8 %20)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %21 = load i8* %2_ align 1
            d12/31/47 >>>>>[->>>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m47/12 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %22 = zext i8 %21 to i64
            m31/32 <<<<<<<<<<<<<<<<[->+<]
            %23 = inttoptr i64 %22 to i32*
            m32/33 >[->+<]
            %24 = icmp eq i32* %1_ i32* %23
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/48/49 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m49/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++
            >>>>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m33/53 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<[
                -
                >>+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<]
            >>>>>>>>-
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>]
            <<<<[
                [-]
                <<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>]
            %25 = zext i1 %24 to i32
            m34/35 <<<<<<<<<<<<<<<[->+<]
            %26 = add i32 65_ i32 %25
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m47/36 [-<<<<<<<<<<<+>>>>>>>>>>>]
            <<<<<<<<<<<<[
                -
                >+
            <]
            %27 = trunc i32 %26 to i8
            m36/37 >[->+<]
            call @putchar(i8 %27)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %28 = load i32** %3_ align 8
            d13/38/47 >>>>>[->>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m47/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %29 = load i32* %28_ align 4
            #train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/51/52 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m51/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m51/56 <<<<<<<[->>>>>+<<<<<]
            >>>>>>>+
            <<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m56/49 [-<<<<<<<+>>>>>>>]
                <<<<<<<+++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>>>]
            <<<<[
                if neg
                <<<+++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m48/47 <[-<+>]
                m49/48 >[-<+>]
                
                m46/49 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d46/47/49 <<<[->+>>+<<<]
            m47/46 >[-<+>]
            >[
                m50/47 >>[-<<<+>>>]
                m49/50 <[->+<]
                m48/49 <[->+<]
                r1 >
                -
            ]
            m49/39 >[-<<<<<<<<<<+>>>>>>>>>>]
            store i32 %29_ i32* %4_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m39/14 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            %30 = load i32* %4_ align 4
            d14/40/47 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m47/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %31 = trunc i32 %30 to i8
            m40/41 <<<<<<<[->+<]
            call @putchar(i8 %31)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_3
        [
            -
            %32 = load i32** %3_ align 8
            d13/42/47 >>>>[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m47/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 97_ i32* %32_ align 4
            op_to_reg storing const value in temp address
            #constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/53/54 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m53/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m53/55 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m55/50 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m47/51 <<<<<<<[->>>>+<<<<]
            drive left! choo choo
            >>>[
                m49/48 <[-<+>]
                m50/49 >[-<+>]
                m51/50 >[-<+>]
                m47/51 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m51/47 >>>>[-<<<<+>>>>]
            <<[
                m52/48 >>>[-<<<<+>>>>]
                
                m49/50 <<<[->+<]
                r1 >
                -
            ]
            %33 = load i32** %3_ align 8
            d13/43/47 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m47/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %34 = load i32* %33_ align 4
            #train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/51/52 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m51/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m51/53 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<<[
                -
                >>>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<]
            >>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m53/49 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m48/47 <[-<+>]
                m49/48 >[-<+>]
                
                m46/49 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d46/47/49 <<<[->+>>+<<<]
            m47/46 >[-<+>]
            >[
                m50/47 >>[-<<<+>>>]
                m49/50 <[->+<]
                m48/49 <[->+<]
                r1 >
                -
            ]
            m49/44 >[-<<<<<+>>>>>]
            store i32 %34_ i32* %5_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m44/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %35 = load i32* %5_ align 4
            d15/45/47 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m47/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %36 = trunc i32 %35 to i8
            m45/46 <<[->+<]
            call @putchar(i8 %36)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l6 <<<<<<
        >>>>>>>>>>]
    <<<<<<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/main
            >>>>-
            l60 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<#mainloop_main
        >#F:another_stack
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#alloc_%1
        >#alloc_%2
        >#alloc_%3
        >#alloc_%4
        >#alloc_%5
        >#%6_=_ptrtoint_i32*_%1_to_i8
        >#%7_=_load_i8*_%2__align_1
        >#%8_=_zext_i8_%7_to_i32
        >#%9_=_icmp_sgt_i32_%8__i32_0
        >#%10_=_zext_i1_%9_to_i32
        >#%11_=_add_i32_65__i32_%10
        >#%12_=_trunc_i32_%11_to_i8
        >#%13_=_ptrtoint_i32*_%1_to_i8
        >#%14_=_zext_i8_%13_to_i32
        >#%15_=_load_i8*_%2__align_1
        >#%16_=_zext_i8_%15_to_i32
        >#%17_=_icmp_eq_i32_%14__i32_%16
        >#%18_=_zext_i1_%17_to_i32
        >#%19_=_add_i32_65__i32_%18
        >#%20_=_trunc_i32_%19_to_i8
        >#%21_=_load_i8*_%2__align_1
        >#%22_=_zext_i8_%21_to_i64
        >#%23_=_inttoptr_i64_%22_to_i32*
        >#%24_=_icmp_eq_i32*_%1__i32*_%23
        >#%25_=_zext_i1_%24_to_i32
        >#%26_=_add_i32_65__i32_%25
        >#%27_=_trunc_i32_%26_to_i8
        >#%28_=_load_i32**_%3__align_8
        >#%29_=_load_i32*_%28__align_4
        >#%30_=_load_i32*_%4__align_4
        >#%31_=_trunc_i32_%30_to_i8
        >#%32_=_load_i32**_%3__align_8
        >#%33_=_load_i32**_%3__align_8
        >#%34_=_load_i32*_%33__align_4
        >#%35_=_load_i32*_%5__align_4
        >#%36_=_trunc_i32_%35_to_i8
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            %1 = alloca i32_ align 4
            %2 = alloca i8_ align 1
            %3 = alloca i32*_ align 8
            %4 = alloca i32_ align 4
            %5 = alloca i32_ align 4
            store i32 112_ i32* %1_ align 4
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_112
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m48/12 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %6 = ptrtoint i32* %1 to i8
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/50/49 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m49/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            +++++++++++++
            m49/17 [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i8 %6_ i8* %2_ align 1
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m17/13 >>>>[-<<<<+>>>>]
            store i32* %1_ i32** %3_ align 8
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/49/51 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m51/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<<+++++++++++++
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m48/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %7 = load i8* %2_ align 1
            d13/18/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m48/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %8 = zext i8 %7 to i32
            m18/19 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->+<]
            %9 = icmp sgt i32 %8_ i32 0
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_0
            
            >>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m19/51 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<[
                -
                
                >>>[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<]
            >>>>>-
            <<[
                [-]
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %10 = zext i1 %9 to i32
            m20/21 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->+<]
            %11 = add i32 65_ i32 %10
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m48/22 [-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >+
            <]
            %12 = trunc i32 %11 to i8
            m22/23 >[->+<]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            %13 = ptrtoint i32* %1 to i8
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/49/50 <<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m50/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++
            m48/24 [-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            %14 = zext i8 %13 to i32
            m24/25 <<<<<<<<<<<<<<<<<<<<<<<<[->+<]
            %15 = load i8* %2_ align 1
            d13/26/48 <<<<<<<<<<<[->>>>>>>>>>>>>+>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m48/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %16 = zext i8 %15 to i32
            m26/27 <<<<<<<<<<<<<<<<<<<<<<[->+<]
            %17 = icmp eq i32 %14_ i32 %16
            >>>>>>>>>>>>>>>>>>>>>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m27/49 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>>>>>>>-
            <<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>>>]
            <[
                [-]
                <<<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>>]
            %18 = zext i1 %17 to i32
            m28/29 <<<<<<<<<<<<<<<<<<<<[->+<]
            %19 = add i32 65_ i32 %18
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m48/30 [-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<[
                -
                >+
            <]
            %20 = trunc i32 %19 to i8
            m30/31 >[->+<]
            call @putchar(i8 %20)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %21 = load i8* %2_ align 1
            d13/32/48 >>>>>>[->>>>>>>>>>>>>>>>>>>+>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m48/13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %22 = zext i8 %21 to i64
            m32/33 <<<<<<<<<<<<<<<<[->+<]
            %23 = inttoptr i64 %22 to i32*
            m33/34 >[->+<]
            %24 = icmp eq i32* %1_ i32* %23
            resolve alloca addr storing pointer value in temp address
            l1 <
            d0/49/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m50/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++
            >>>>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m34/54 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<[
                -
                >>+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<]
            >>>>>>>>-
            <<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>[
                [-]
                <<<<<<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>>>>>]
            <<<<[
                [-]
                <<<<<<<<<<<<<<<[-]
            >>>>>>>>>>>>>>>]
            %25 = zext i1 %24 to i32
            m35/36 <<<<<<<<<<<<<<<[->+<]
            %26 = add i32 65_ i32 %25
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>#constop_65
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            m48/37 [-<<<<<<<<<<<+>>>>>>>>>>>]
            <<<<<<<<<<<<[
                -
                >+
            <]
            %27 = trunc i32 %26 to i8
            m37/38 >[->+<]
            call @putchar(i8 %27)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %28 = load i32** %3_ align 8
            d14/39/48 >>>>>>[->>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m48/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %29 = load i32* %28_ align 4
            #train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/52/53 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m52/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m52/57 <<<<<<<[->>>>>+<<<<<]
            >>>>>>>+
            <<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m57/50 [-<<<<<<<+>>>>>>>]
                <<<<<<<++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>>>]
            <<<<[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m49/48 <[-<+>]
                m50/49 >[-<+>]
                
                m47/50 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d47/48/50 <<<[->+>>+<<<]
            m48/47 >[-<+>]
            >[
                m51/48 >>[-<<<+>>>]
                m50/51 <[->+<]
                m49/50 <[->+<]
                r1 >
                -
            ]
            m50/40 >[-<<<<<<<<<<+>>>>>>>>>>]
            store i32 %29_ i32* %4_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m40/15 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            %30 = load i32* %4_ align 4
            d15/41/48 <<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m48/15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %31 = trunc i32 %30 to i8
            m41/42 <<<<<<<[->+<]
            call @putchar(i8 %31)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_3
        [
            -
            %32 = load i32** %3_ align 8
            d14/43/48 >>>>>[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m48/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            store i32 97_ i32* %32_ align 4
            op_to_reg storing const value in temp address
            #constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/54/55 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m54/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m54/56 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<<<]
            >>>>>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m56/51 [-<<<<<+>>>>>]
                <<<<<+++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<+++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m48/52 <<<<<<<[->>>>+<<<<]
            drive left! choo choo
            >>>[
                m50/49 <[-<+>]
                m51/50 >[-<+>]
                m52/51 >[-<+>]
                m48/52 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m52/48 >>>>[-<<<<+>>>>]
            <<[
                m53/49 >>>[-<<<<+>>>>]
                
                m50/51 <<<[->+<]
                r1 >
                -
            ]
            %33 = load i32** %3_ align 8
            d14/44/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m48/14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %34 = load i32* %33_ align 4
            #train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/52/53 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m52/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m52/54 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<<[
                -
                >>>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<]
            >>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m54/50 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m49/48 <[-<+>]
                m50/49 >[-<+>]
                
                m47/50 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d47/48/50 <<<[->+>>+<<<]
            m48/47 >[-<+>]
            >[
                m51/48 >>[-<<<+>>>]
                m50/51 <[->+<]
                m49/50 <[->+<]
                r1 >
                -
            ]
            m50/45 >[-<<<<<+>>>>>]
            store i32 %34_ i32* %5_ align 4
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[-]
            m45/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %35 = load i32* %5_ align 4
            d16/46/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m48/16 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %36 = trunc i32 %35 to i8
            m46/47 <<[->+<]
            call @putchar(i8 %36)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_4
        [
            -
            call @another_stack()
            enable next block when we return
            >#caller/%call_term_for_5
            +
            stack_width 60
            ret_pad_width 4
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/66/67 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m67/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r60 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r6 >>>>>>
            <<<<#===FRAME_another_stack
            +
            >#another_stack
            +
            >>#another_stack/b0
            +
        >>>>>>>]
        >#B:%call_term_for_5
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l6 <<<<<<
        >>>>>>>>>>>]
    <<<<<<<<<]
<<]
