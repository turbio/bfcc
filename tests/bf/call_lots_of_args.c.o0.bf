r7 >>>>>>>
+++++++
r1 >
runtime init:
#===TOP_FRAME
+
>>>>#main
+
>#main/b0
+
<<<<<[
    >#three_args
    [
        >>>>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >-
            <#dead_fn_pad/three_args
            >>>>>>-
            l38 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_three_args
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_three_args
        >#B:%ret_lading_pad
        >#B:%3
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#alloc_%4
        >#alloc_%5
        >#alloc_%6
        >#%7_=_load_i32*_%4__align_4
        >#%8_=_trunc_i32_%7_to_i8
        >#%9_=_load_i32*_%5__align_4
        >#%10_=_trunc_i32_%9_to_i8
        >#%11_=_load_i32*_%6__align_4
        >#%12_=_trunc_i32_%11_to_i8
        >#%0
        >#%1
        >#%2
        <<<<<<<<<<<<<<<<<#B:%no_block0_call_for_three_args
        [
            -
            copy up args
            >>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/22 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/24 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            m0/26 <<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            br label %3
            >>>>>>>+
        <<]
        >>#B:%3
        [
            -
            %4 = alloca i32_ align 4
            %5 = alloca i32_ align 4
            %6 = alloca i32_ align 4
            store i32 %0_ i32* %4_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>#tmp_allocptr_%4
            >#tmp_allocptr_tru_%4
            l1 <
            d0/24/25 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/0 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++
            store sitch: alloca Some(11)
            store sitch: from LocalOperand { name: Number(0)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/30/31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m30/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m30/32 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m32/27 [-<<<<<+>>>>>]
                <<<<<+++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<+++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m20/28 <<<<<<<<<<<[->>>>>>>>+<<<<<<<<]
            drive left! choo choo
            >>>>>>>[
                m26/25 <[-<+>]
                m27/26 >[-<+>]
                m28/27 >[-<+>]
                m24/28 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m28/24 >>>>[-<<<<+>>>>]
            <<[
                m29/25 >>>[-<<<<+>>>>]
                
                m26/27 <<<[->+<]
                r1 >
                -
            ]
            store i32 %1_ i32* %5_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%5
            >#tmp_allocptr_tru_%5
            l1 <
            d0/24/25 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/0 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++
            store sitch: alloca Some(12)
            store sitch: from LocalOperand { name: Number(1)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/30/31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m30/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m30/35 <<<<<<<[->>>>>+<<<<<]
            >>>>>>>+
            <<<<<<<<<<<<<<[
                -
                >>>>>>>>+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<<]
            >>>>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m35/27 [-<<<<<<<<+>>>>>>>>]
                <<<<<<<<+++++++++++++++++++++++++
            >>>>>>>>]
            <<<<[
                if neg
                <<<<+++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m21/28 <<<<<<<<<<[->>>>>>>+<<<<<<<]
            drive left! choo choo
            >>>>>>[
                m26/25 <[-<+>]
                m27/26 >[-<+>]
                m28/27 >[-<+>]
                m24/28 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m28/24 >>>>[-<<<<+>>>>]
            <<[
                m29/25 >>>[-<<<<+>>>>]
                
                m26/27 <<<[->+<]
                r1 >
                -
            ]
            store i32 %2_ i32* %6_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%6
            >#tmp_allocptr_tru_%6
            l1 <
            d0/24/25 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/0 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++
            store sitch: alloca Some(13)
            store sitch: from LocalOperand { name: Number(2)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/30/31 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m30/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m30/32 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m32/27 [-<<<<<+>>>>>]
                <<<<<+++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<+++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m22/28 <<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                m26/25 <[-<+>]
                m27/26 >[-<+>]
                m28/27 >[-<+>]
                m24/28 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m28/24 >>>>[-<<<<+>>>>]
            <<[
                m29/25 >>>[-<<<<+>>>>]
                
                m26/27 <<<[->+<]
                r1 >
                -
            ]
            %7 = load i32* %4_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%4
            >#tmp_allocptr_tru_%4
            l1 <
            d0/24/25 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/0 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/29/30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m29/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m29/31 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m31/27 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m26/25 <[-<+>]
                m27/26 >[-<+>]
                
                m24/27 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d24/25/27 <<<[->+>>+<<<]
            m25/24 >[-<+>]
            >[
                m28/25 >>[-<<<+>>>]
                m27/28 <[->+<]
                m26/27 <[->+<]
                r1 >
                -
            ]
            m27/14 >[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            %8 = trunc i32 %7 to i8
            m14/15 <<<<<<<<<<<<<[->+<]
            call @putchar(i8 %8)
            enable next block when we return
            <<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>.
            [-]
        <<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            %9 = load i32* %5_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>#tmp_allocptr_%5
            >#tmp_allocptr_tru_%5
            l1 <
            d0/24/25 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/0 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/29/30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m29/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m29/31 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m31/27 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m26/25 <[-<+>]
                m27/26 >[-<+>]
                
                m24/27 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d24/25/27 <<<[->+>>+<<<]
            m25/24 >[-<+>]
            >[
                m28/25 >>[-<<<+>>>]
                m27/28 <[->+<]
                m26/27 <[->+<]
                r1 >
                -
            ]
            m27/16 >[-<<<<<<<<<<<+>>>>>>>>>>>]
            %10 = trunc i32 %9 to i8
            m16/17 <<<<<<<<<<<[->+<]
            call @putchar(i8 %10)
            enable next block when we return
            <<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>>>>>.
            [-]
        <<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %11 = load i32* %6_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>#tmp_allocptr_%6
            >#tmp_allocptr_tru_%6
            l1 <
            d0/24/25 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<]
            m25/0 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/29/30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m29/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m29/31 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m31/27 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m26/25 <[-<+>]
                m27/26 >[-<+>]
                
                m24/27 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d24/25/27 <<<[->+>>+<<<]
            m25/24 >[-<+>]
            >[
                m28/25 >>[-<<<+>>>]
                m27/28 <[->+<]
                m26/27 <[->+<]
                r1 >
                -
            ]
            m27/18 >[-<<<<<<<<<+>>>>>>>>>]
            %12 = trunc i32 %11 to i8
            m18/19 <<<<<<<<<[->+<]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>.
            [-]
        <<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l11 <<<<<<<<<<<
        >>>>>>>>>>]
    <<<<<<<<<]
    >#five_args
    [
        >>>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/five_args
            >>>>>>-
            l48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_five_args
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_five_args
        >#B:%ret_lading_pad
        >#B:%5
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#alloc_%6
        >#alloc_%7
        >#alloc_%8
        >#alloc_%9
        >#alloc_%10
        >#%11_=_load_i32*_%6__align_4
        >#%12_=_trunc_i32_%11_to_i8
        >#%13_=_load_i32*_%7__align_4
        >#%14_=_trunc_i32_%13_to_i8
        >#%15_=_load_i32*_%8__align_4
        >#%16_=_trunc_i32_%15_to_i8
        >#%17_=_load_i32*_%9__align_4
        >#%18_=_trunc_i32_%17_to_i8
        >#%19_=_load_i32*_%10__align_4
        >#%20_=_trunc_i32_%19_to_i8
        >#%0
        >#%1
        >#%2
        >#%3
        >#%4
        <<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_five_args
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/30 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/32 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            m0/34 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%3
            l5 <<<<<
            m0/36 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r5 >>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%4
            l6 <<<<<<
            m0/38 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r6 >>>>>>
            br label %5
            >>>>>>>+
        <<]
        >>#B:%5
        [
            -
            %6 = alloca i32_ align 4
            %7 = alloca i32_ align 4
            %8 = alloca i32_ align 4
            %9 = alloca i32_ align 4
            %10 = alloca i32_ align 4
            store i32 %0_ i32* %6_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%6
            >#tmp_allocptr_tru_%6
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++
            store sitch: alloca Some(13)
            store sitch: from LocalOperand { name: Number(0)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/40/41 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m40/42 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m42/37 [-<<<<<+>>>>>]
                <<<<<+++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<+++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m28/38 <<<<<<<<<<<<<[->>>>>>>>>>+<<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>>[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                m38/37 >[-<+>]
                m34/38 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m38/34 >>>>[-<<<<+>>>>]
            <<[
                m39/35 >>>[-<<<<+>>>>]
                
                m36/37 <<<[->+<]
                r1 >
                -
            ]
            store i32 %1_ i32* %7_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%7
            >#tmp_allocptr_tru_%7
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++
            store sitch: alloca Some(14)
            store sitch: from LocalOperand { name: Number(1)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/40/41 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m40/45 <<<<<<<[->>>>>+<<<<<]
            >>>>>>>+
            <<<<<<<<<<<<<<[
                -
                >>>>>>>>+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<<]
            >>>>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m45/37 [-<<<<<<<<+>>>>>>>>]
                <<<<<<<<+++++++++++++++++++++++++++++++++++
            >>>>>>>>]
            <<<<[
                if neg
                <<<<+++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m29/38 <<<<<<<<<<<<[->>>>>>>>>+<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                m38/37 >[-<+>]
                m34/38 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m38/34 >>>>[-<<<<+>>>>]
            <<[
                m39/35 >>>[-<<<<+>>>>]
                
                m36/37 <<<[->+<]
                r1 >
                -
            ]
            store i32 %2_ i32* %8_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%8
            >#tmp_allocptr_tru_%8
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++
            store sitch: alloca Some(15)
            store sitch: from LocalOperand { name: Number(2)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/40/41 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m40/42 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m42/37 [-<<<<<+>>>>>]
                <<<<<+++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<+++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m30/38 <<<<<<<<<<<[->>>>>>>>+<<<<<<<<]
            drive left! choo choo
            >>>>>>>[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                m38/37 >[-<+>]
                m34/38 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m38/34 >>>>[-<<<<+>>>>]
            <<[
                m39/35 >>>[-<<<<+>>>>]
                
                m36/37 <<<[->+<]
                r1 >
                -
            ]
            store i32 %3_ i32* %9_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%9
            >#tmp_allocptr_tru_%9
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++
            store sitch: alloca Some(16)
            store sitch: from LocalOperand { name: Number(3)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/40/41 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m40/42 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m42/37 [-<<<<<+>>>>>]
                <<<<<+++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<+++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m31/38 <<<<<<<<<<[->>>>>>>+<<<<<<<]
            drive left! choo choo
            >>>>>>[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                m38/37 >[-<+>]
                m34/38 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m38/34 >>>>[-<<<<+>>>>]
            <<[
                m39/35 >>>[-<<<<+>>>>]
                
                m36/37 <<<[->+<]
                r1 >
                -
            ]
            store i32 %4_ i32* %10_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%10
            >#tmp_allocptr_tru_%10
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++
            store sitch: alloca Some(17)
            store sitch: from LocalOperand { name: Number(4)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/40/41 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m40/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m40/42 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m42/37 [-<<<<<+>>>>>]
                <<<<<+++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<+++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m32/38 <<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                m38/37 >[-<+>]
                m34/38 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m38/34 >>>>[-<<<<+>>>>]
            <<[
                m39/35 >>>[-<<<<+>>>>]
                
                m36/37 <<<[->+<]
                r1 >
                -
            ]
            %11 = load i32* %6_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%6
            >#tmp_allocptr_tru_%6
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m39/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m39/41 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m41/37 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                
                m34/37 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d34/35/37 <<<[->+>>+<<<]
            m35/34 >[-<+>]
            >[
                m38/35 >>[-<<<+>>>]
                m37/38 <[->+<]
                m36/37 <[->+<]
                r1 >
                -
            ]
            m37/18 >[-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
            %12 = trunc i32 %11 to i8
            m18/19 <<<<<<<<<<<<<<<<<<<[->+<]
            call @putchar(i8 %12)
            enable next block when we return
            <<<<<<<<<<#caller/%call_term_for_0
            +
            putchar intrinsic
            >>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<]
        >#B:%call_term_for_0
        [
            -
            %13 = load i32* %7_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%7
            >#tmp_allocptr_tru_%7
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m39/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m39/41 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m41/37 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                
                m34/37 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d34/35/37 <<<[->+>>+<<<]
            m35/34 >[-<+>]
            >[
                m38/35 >>[-<<<+>>>]
                m37/38 <[->+<]
                m36/37 <[->+<]
                r1 >
                -
            ]
            m37/20 >[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            %14 = trunc i32 %13 to i8
            m20/21 <<<<<<<<<<<<<<<<<[->+<]
            call @putchar(i8 %14)
            enable next block when we return
            <<<<<<<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<]
        >#B:%call_term_for_1
        [
            -
            %15 = load i32* %8_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%8
            >#tmp_allocptr_tru_%8
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m39/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m39/41 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m41/37 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                
                m34/37 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d34/35/37 <<<[->+>>+<<<]
            m35/34 >[-<+>]
            >[
                m38/35 >>[-<<<+>>>]
                m37/38 <[->+<]
                m36/37 <[->+<]
                r1 >
                -
            ]
            m37/22 >[-<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>]
            %16 = trunc i32 %15 to i8
            m22/23 <<<<<<<<<<<<<<<[->+<]
            call @putchar(i8 %16)
            enable next block when we return
            <<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %17 = load i32* %9_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%9
            >#tmp_allocptr_tru_%9
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m39/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m39/41 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m41/37 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                
                m34/37 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d34/35/37 <<<[->+>>+<<<]
            m35/34 >[-<+>]
            >[
                m38/35 >>[-<<<+>>>]
                m37/38 <[->+<]
                m36/37 <[->+<]
                r1 >
                -
            ]
            m37/24 >[-<<<<<<<<<<<<<+>>>>>>>>>>>>>]
            %18 = trunc i32 %17 to i8
            m24/25 <<<<<<<<<<<<<[->+<]
            call @putchar(i8 %18)
            enable next block when we return
            <<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<]
        >#B:%call_term_for_3
        [
            -
            %19 = load i32* %10_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%10
            >#tmp_allocptr_tru_%10
            l1 <
            d0/34/35 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m35/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/39/40 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m39/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m39/41 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m41/37 [-<<<<+>>>>]
                <<<<+++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<+++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m36/35 <[-<+>]
                m37/36 >[-<+>]
                
                m34/37 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d34/35/37 <<<[->+>>+<<<]
            m35/34 >[-<+>]
            >[
                m38/35 >>[-<<<+>>>]
                m37/38 <[->+<]
                m36/37 <[->+<]
                r1 >
                -
            ]
            m37/26 >[-<<<<<<<<<<<+>>>>>>>>>>>]
            %20 = trunc i32 %19 to i8
            m26/27 <<<<<<<<<<<[->+<]
            call @putchar(i8 %20)
            enable next block when we return
            <<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<]
        >#B:%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l13 <<<<<<<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<<<]
    >#twelve_args
    [
        >>>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>>-
            <<<#dead_fn_pad/twelve_args
            >>>>>>-
            l69 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_twelve_args
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_twelve_args
        >#B:%ret_lading_pad
        >#B:%12
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#alloc_%13
        >#alloc_%14
        >#alloc_%15
        >#alloc_%16
        >#alloc_%17
        >#alloc_%18
        >#alloc_%19
        >#alloc_%20
        >#alloc_%21
        >#alloc_%22
        >#alloc_%23
        >#alloc_%24
        >#%25_=_load_i32*_%13__align_4
        >#%26_=_load_i32*_%14__align_4
        >#%27_=_load_i32*_%15__align_4
        >#%28_=_load_i32*_%16__align_4
        >#%29_=_load_i32*_%17__align_4
        >#%30_=_load_i32*_%18__align_4
        >#%31_=_load_i32*_%19__align_4
        >#%32_=_load_i32*_%20__align_4
        >#%33_=_load_i32*_%21__align_4
        >#%34_=_trunc_i32_%33_to_i8
        >#%35_=_load_i32*_%22__align_4
        >#%36_=_trunc_i32_%35_to_i8
        >#%37_=_load_i32*_%23__align_4
        >#%38_=_trunc_i32_%37_to_i8
        >#%39_=_load_i32*_%24__align_4
        >#%40_=_trunc_i32_%39_to_i8
        >#%0
        >#%1
        >#%2
        >#%3
        >#%4
        >#%5
        >#%6
        >#%7
        >#%8
        >#%9
        >#%10
        >#%11
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#B:%no_block0_call_for_twelve_args
        [
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/44 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/46 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%2
            l4 <<<<
            m0/48 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r4 >>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%3
            l5 <<<<<
            m0/50 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r5 >>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%4
            l6 <<<<<<
            m0/52 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r6 >>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%5
            l7 <<<<<<<
            m0/54 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r7 >>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%6
            l8 <<<<<<<<
            m0/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r8 >>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%7
            l9 <<<<<<<<<
            m0/58 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r9 >>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%8
            l10 <<<<<<<<<<
            m0/60 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r10 >>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%9
            l11 <<<<<<<<<<<
            m0/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r11 >>>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%10
            l12 <<<<<<<<<<<<
            m0/64 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r12 >>>>>>>>>>>>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%11
            l13 <<<<<<<<<<<<<
            m0/66 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r13 >>>>>>>>>>>>>
            br label %12
            >>>>>>>+
        <<]
        >>#B:%12
        [
            -
            %13 = alloca i32_ align 4
            %14 = alloca i32_ align 4
            %15 = alloca i32_ align 4
            %16 = alloca i32_ align 4
            %17 = alloca i32_ align 4
            %18 = alloca i32_ align 4
            %19 = alloca i32_ align 4
            %20 = alloca i32_ align 4
            %21 = alloca i32_ align 4
            %22 = alloca i32_ align 4
            %23 = alloca i32_ align 4
            %24 = alloca i32_ align 4
            store i32 %0_ i32* %13_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%13
            >#tmp_allocptr_tru_%13
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++
            store sitch: alloca Some(14)
            store sitch: from LocalOperand { name: Number(0)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m42/59 <<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>>>>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %1_ i32* %14_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%14
            >#tmp_allocptr_tru_%14
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++
            store sitch: alloca Some(15)
            store sitch: from LocalOperand { name: Number(1)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >>>>#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/66 <<<<<<<[->>>>>+<<<<<]
            >>>>>>>+
            <<<<<<<<<<<<<<[
                -
                >>>>>>>>+
                >>>>[
                    -
                    <<<<-
                    r1 >
                >>>>]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<<<<]
            >>>>>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m66/58 [-<<<<<<<<+>>>>>>>>]
                <<<<<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>>>>]
            <<<<[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m43/59 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>>>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %2_ i32* %15_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%15
            >#tmp_allocptr_tru_%15
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++
            store sitch: alloca Some(16)
            store sitch: from LocalOperand { name: Number(2)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m44/59 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %3_ i32* %16_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%16
            >#tmp_allocptr_tru_%16
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++
            store sitch: alloca Some(17)
            store sitch: from LocalOperand { name: Number(3)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m45/59 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %4_ i32* %17_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%17
            >#tmp_allocptr_tru_%17
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++
            store sitch: alloca Some(18)
            store sitch: from LocalOperand { name: Number(4)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m46/59 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %5_ i32* %18_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%18
            >#tmp_allocptr_tru_%18
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++
            store sitch: alloca Some(19)
            store sitch: from LocalOperand { name: Number(5)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m47/59 <<<<<<<<<<<<<<<[->>>>>>>>>>>>+<<<<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %6_ i32* %19_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%19
            >#tmp_allocptr_tru_%19
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++
            store sitch: alloca Some(20)
            store sitch: from LocalOperand { name: Number(6)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m48/59 <<<<<<<<<<<<<<[->>>>>>>>>>>+<<<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %7_ i32* %20_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%20
            >#tmp_allocptr_tru_%20
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++++
            store sitch: alloca Some(21)
            store sitch: from LocalOperand { name: Number(7)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m49/59 <<<<<<<<<<<<<[->>>>>>>>>>+<<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %8_ i32* %21_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%21
            >#tmp_allocptr_tru_%21
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++
            store sitch: alloca Some(22)
            store sitch: from LocalOperand { name: Number(8)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m50/59 <<<<<<<<<<<<[->>>>>>>>>+<<<<<<<<<]
            drive left! choo choo
            >>>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %9_ i32* %22_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%22
            >#tmp_allocptr_tru_%22
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++++++
            store sitch: alloca Some(23)
            store sitch: from LocalOperand { name: Number(9)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m51/59 <<<<<<<<<<<[->>>>>>>>+<<<<<<<<]
            drive left! choo choo
            >>>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %10_ i32* %23_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%23
            >#tmp_allocptr_tru_%23
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++++
            store sitch: alloca Some(24)
            store sitch: from LocalOperand { name: Number(10)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m52/59 <<<<<<<<<<[->>>>>>>+<<<<<<<]
            drive left! choo choo
            >>>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            store i32 %11_ i32* %24_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%24
            >#tmp_allocptr_tru_%24
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++++++++
            store sitch: alloca Some(25)
            store sitch: from LocalOperand { name: Number(11)_ ty: TypeRef(IntegerType { bits: 32 }) }
            >>#train_tmp
            >#train_ret
            >#train_ptr
            >#train_cargo
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/61/62 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m61/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m61/63 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<<[
                -
                >>>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<<]
            >>>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m63/58 [-<<<<<+>>>>>]
                <<<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>>]
            <[
                if neg
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>>[
                    -
                    <<<<-
                >>>>]
            ]
            m53/59 <<<<<<<<<[->>>>>>+<<<<<<]
            drive left! choo choo
            >>>>>[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                m59/58 >[-<+>]
                m55/59 <<<<[->>>>+<<<<]
                l1 <
                >>>-
                <+
            >]
            <<<[-]
            m59/55 >>>>[-<<<<+>>>>]
            <<[
                m60/56 >>>[-<<<<+>>>>]
                
                m57/58 <<<[->+<]
                r1 >
                -
            ]
            %25 = load i32* %13_ align 4
            op_to_reg storing pointer value in temp address
            <<<#tmp_allocptr_%13
            >#tmp_allocptr_tru_%13
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/26 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %26 = load i32* %14_ align 4
            op_to_reg storing pointer value in temp address
            <<<<#tmp_allocptr_%14
            >#tmp_allocptr_tru_%14
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/27 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %27 = load i32* %15_ align 4
            op_to_reg storing pointer value in temp address
            <<<<#tmp_allocptr_%15
            >#tmp_allocptr_tru_%15
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/28 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            call @three_args(i32 %25_ i32 %26_ i32 %27)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            stack_width 69
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m26/78 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_1
            m27/77 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_2
            m28/76 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/80/81 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m81/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r69 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<#===FRAME_three_args
            +
            >#three_args
            +
            >>>>#three_args/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            %28 = load i32* %16_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%16
            >#tmp_allocptr_tru_%16
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/29 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %29 = load i32* %17_ align 4
            op_to_reg storing pointer value in temp address
            <<<<#tmp_allocptr_%17
            >#tmp_allocptr_tru_%17
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/30 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %30 = load i32* %18_ align 4
            op_to_reg storing pointer value in temp address
            <<<<#tmp_allocptr_%18
            >#tmp_allocptr_tru_%18
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/31 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %31 = load i32* %19_ align 4
            op_to_reg storing pointer value in temp address
            <<<<#tmp_allocptr_%19
            >#tmp_allocptr_tru_%19
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/32 >[-<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>]
            %32 = load i32* %20_ align 4
            op_to_reg storing pointer value in temp address
            <<<<#tmp_allocptr_%20
            >#tmp_allocptr_tru_%20
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/33 >[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            call @five_args(i32 %28_ i32 %29_ i32 %30_ i32 %31_ i32 %32)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            stack_width 69
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m29/80 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_1
            m30/79 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_2
            m31/78 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_3
            m32/77 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_4
            m33/76 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/82/83 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m83/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r69 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>#caller
            +
            >>>#caller/jump_pad_blk
            +
            r13 >>>>>>>>>>>>>
            <<<<<<#===FRAME_five_args
            +
            >>#five_args
            +
            >>>#five_args/b0
            +
        >>>]
        >#B:%call_term_for_1
        [
            -
            %33 = load i32* %21_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%21
            >#tmp_allocptr_tru_%21
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/34 >[-<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>]
            %34 = trunc i32 %33 to i8
            m34/35 <<<<<<<<<<<<<<<<<<<<<<<<[->+<]
            call @putchar(i8 %34)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_2
        [
            -
            %35 = load i32* %22_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%22
            >#tmp_allocptr_tru_%22
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/36 >[-<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>]
            %36 = trunc i32 %35 to i8
            m36/37 <<<<<<<<<<<<<<<<<<<<<<[->+<]
            call @putchar(i8 %36)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_3
        [
            -
            %37 = load i32* %23_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%23
            >#tmp_allocptr_tru_%23
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<+++++++++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/38 >[-<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>]
            %38 = trunc i32 %37 to i8
            m38/39 <<<<<<<<<<<<<<<<<<<<[->+<]
            call @putchar(i8 %38)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_4
        [
            -
            %39 = load i32* %24_ align 4
            op_to_reg storing pointer value in temp address
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#tmp_allocptr_%24
            >#tmp_allocptr_tru_%24
            l1 <
            d0/55/56 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m56/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            <<++++++++++++++++++++++++++
            >>#train_tmp
            >#train_ret
            >#train_ptr
            
            >>#stackptr
            <#stackptr_tmp
            l1 <
            d0/60/61 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m60/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            >#ptr_underflow
            >#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m60/62 <<<<[->>+<<]
            >>>>+
            <<<<<<<<<<[
                -
                >>>>>>>+
                >[
                    -
                    <-
                    r1 >
                >]
                r1 >
                [
                    l1 <
                ]
                l1 <
            <<<<<<<<]
            >>>>>>>>>>-
            <<#subnu_to
            [
                if pos
                m62/58 [-<<<<+>>>>]
                <<<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            >>>>]
            <[
                if neg
                <<<++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                >>>[
                    -
                    <<<-
                >>>]
            ]
            drive left! choo choo
            <<<[
                m57/56 <[-<+>]
                m58/57 >[-<+>]
                
                m55/58 <<<[->>>+<<<]
                l1 <
                >>>-
                <+
            >]
            get our bag
            d55/56/58 <<<[->+>>+<<<]
            m56/55 >[-<+>]
            >[
                m59/56 >>[-<<<+>>>]
                m58/59 <[->+<]
                m57/58 <[->+<]
                r1 >
                -
            ]
            m58/40 >[-<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>]
            %40 = trunc i32 %39 to i8
            m40/41 <<<<<<<<<<<<<<<<<<[->+<]
            call @putchar(i8 %40)
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_5
            +
            putchar intrinsic
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
        >#B:%call_term_for_5
        [
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>>-
            l1 <
            <<<[-]
            r1 >
            l20 <<<<<<<<<<<<<<<<<<<<
        >>>>>>>>>>>>>]
    <<<<<<<<<<]
    >#main
    [
        >>#B:%ret_lading_pad
        [
            <<<<<<-
            #dead_frame
            >>>>-
            <<<<#dead_fn_pad/main
            >>>>>>-
            l25 <<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<<<#mainloop_main
        >#F:three_args
        >#F:five_args
        >#F:twelve_args
        >#F:main
        >#B:%no_block0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        <<<<<<<#B:%no_block0_call_for_main
        [
            -
            copy up args
            br label %0
            >>+
        <<]
        >>#B:%0
        [
            -
            call @three_args(i32 79_ i32 119_ i32 79)
            op_to_reg storing const value in temp address
            >>>>>>#constop_79
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_119
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_79
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<<#caller/%call_term_for_0
            +
            stack_width 25
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m13/34 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>#arg_1
            m14/33 <<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>#arg_2
            m15/32 <<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++
            l1 <
            d0/36/37 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m37/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r25 >>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r11 >>>>>>>>>>>
            <<<<<<#===FRAME_three_args
            +
            >#three_args
            +
            >>>>#three_args/b0
            +
        >>]
        >#B:%call_term_for_0
        [
            -
            call @putchar(i8 10)
            op_to_reg storing const value in temp address
            >>>>>#constop_10
            ++++++++++
            enable next block when we return
            <<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>.
            [-]
        <<<<<]
        >#B:%call_term_for_1
        [
            -
            call @five_args(i32 122_ i32 97_ i32 100_ i32 100_ i32 121)
            op_to_reg storing const value in temp address
            >>>>#constop_122
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >>#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            <#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >>#constop_121
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<<#caller/%call_term_for_2
            +
            stack_width 25
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m13/36 <<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>#arg_1
            m14/35 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>#arg_2
            m16/34 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>>>#arg_3
            m15/33 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>>>>>#arg_4
            m17/32 <<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++
            l1 <
            d0/38/39 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m39/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r25 >>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r13 >>>>>>>>>>>>>
            <<<<<<#===FRAME_five_args
            +
            >>#five_args
            +
            >>>#five_args/b0
            +
        >>>>]
        >#B:%call_term_for_2
        [
            -
            call @putchar(i8 10)
            op_to_reg storing const value in temp address
            >>>#constop_10
            ++++++++++
            enable next block when we return
            <<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>.
            [-]
        <<<]
        >#B:%call_term_for_3
        [
            -
            call @twelve_args(i32 108_ i32 109_ i32 97_ i32 111_ i32 109_ i32 121_ i32 100_ i32 117_ i32 100_ i32 101_ i32 33_ i32 63)
            op_to_reg storing const value in temp address
            >>#constop_108
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_109
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_97
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_111
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >>#constop_109
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            <#constop_121
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >>#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_117
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_100
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_101
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_33
            +++++++++++++++++++++++++++++++++
            op_to_reg storing const value in temp address
            >#constop_63
            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<<<<<<<#caller/%call_term_for_4
            +
            stack_width 25
            ret_pad_width 6
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m13/43 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_1
            m14/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 2
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_2
            m15/41 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 3
            >>>>>>>>>>>>>>>>>>>>>>>>>#arg_3
            m16/40 <<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 4
            >>>>>>>>>>>>>>>>>>>>>>>#arg_4
            m18/39 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 5
            >>>>>>>>>>>>>>>>>>>>#arg_5
            m17/38 <<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<]
            copy up arg 6
            >>>>>>>>>>>>>>>>>>>>#arg_6
            m19/37 <<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            copy up arg 7
            >>>>>>>>>>>>>>>>>#arg_7
            m20/36 <<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<]
            copy up arg 8
            >>>>>>>>>>>>>>>#arg_8
            m21/35 <<<<<<<<<<<<<<[->>>>>>>>>>>>>>+<<<<<<<<<<<<<<]
            copy up arg 9
            >>>>>>>>>>>>>#arg_9
            m22/34 <<<<<<<<<<<<[->>>>>>>>>>>>+<<<<<<<<<<<<]
            copy up arg 10
            >>>>>>>>>>>#arg_10
            m23/33 <<<<<<<<<<[->>>>>>>>>>+<<<<<<<<<<]
            copy up arg 11
            >>>>>>>>>#arg_11
            m24/32 <<<<<<<<[->>>>>>>>+<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++
            l1 <
            d0/45/46 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m46/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r25 >>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>>>#caller
            +
            >>#caller/jump_pad_blk
            +
            r20 >>>>>>>>>>>>>>>>>>>>
            <<<<<<#===FRAME_twelve_args
            +
            >>>#twelve_args
            +
            >>#twelve_args/b0
            +
        >>>>>>]
        >#B:%call_term_for_4
        [
            -
            ret void
            zero all function allocs
            <<<<<<<<<<<<-
            #dead_frame
            >>>>-
            l1 <
            <<<<[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>>>>>>]
    <<<<<<<<]
<<<<]
