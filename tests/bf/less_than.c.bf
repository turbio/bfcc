r5 >>>>>
+++++
r1 >
runtime init:
#===TOP_FRAME
+
>>#main
+
>#main/b0
+
<<<[
    >#lt
    [
        >>>#lt/RET_LANDING_PAD
        [
            <<<<-
            #dead_frame
            >-
            <#dead_fn_pad/lt
            >>>>-
            l16 <<<<<<<<<<<<<<<<
        ]
        <<<<#mainloop_lt
        >#F:lt
        >#F:main
        >#B:%2
        >#B:%ret_lading_pad
        >#B:%8
        >#B:%call_term_for_1
        >#B:%9
        >#B:%call_term_for_3
        >#B:%10
        >#alloc_%3
        >#alloc_%4
        <<<<<<<<[
            -
            copy up args
            >>>>>>>>>>>>>>>>>>>>>>>#arg_%0
            l2 <<
            m0/28 <<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r2 >>
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_%1
            l3 <<<
            m0/30 <<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            r3 >>>
            %3 = alloca i32_ align 4
            %4 = alloca i32_ align 4
            store i32 %0_ i32* %3_ align 4
            store sitch: alloca Some(10)
            store sitch: from LocalOperand { name: Number(0)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(10) __
            >>>>>>>>>>[-]
            m26/10 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            store i32 %1_ i32* %4_ align 4
            store sitch: alloca Some(11)
            store sitch: from LocalOperand { name: Number(1)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(11) __
            <<<<<<<<<<<<<<<[-]
            m27/11 >>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
            %5 = load i32* %3_ align 4
            >#load_ret_%5
            #load_thru_%3_to_%5
            <<<<<<<<<<<<<#tmp0_for_load
            d10/15/28 <<<<<[->>>>>+>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            m15/10 >>>>>[-<<<<<+>>>>>]
            %6 = load i32* %4_ align 4
            >>>>>>>>>>>>>>#load_ret_%6
            #load_thru_%4_to_%6
            <<<<<<<<<<<<<<<#tmp0_for_load
            d11/14/29 <<<[->>>+>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<]
            m14/11 >>>[-<<<+>>>]
            %7 = icmp slt i32 %5_ i32 %6
            >>>>>>>>>>>>>>#icmp_op0_i32_%5
            >#icmp_op1_i32_%6
            >#icmp_ret_%7
            <<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m29/12 >>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>[
                -
                
                <<<<<<<<<<<<<<<<[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<-
            <<[
                [-]
                >>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<]
            br i1 %7_ label %8_ label %9
            <<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<-
                >+
                #B:lt/8_true
            >>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>+
                #B:lt/9_false
            <<<]
        <]
        >>[
            -
            call @putchar(i8 108)
            op_to_reg storing const value in temp address
            >>>>>>>#constop_108
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<<<#caller/%call_term_for_1
            +
            putchar intrinsic
            >>>>>>.
            [-]
        <<<<<<<]
        >[
            -
            br label %10
            >>>+
        <<<]
        >[
            -
            call @putchar(i8 114)
            op_to_reg storing const value in temp address
            >>>>>#constop_114
            ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            enable next block when we return
            <<<<#caller/%call_term_for_3
            +
            putchar intrinsic
            >>>>.
            [-]
        <<<<<]
        >[
            -
            br label %10
            >+
        <]
        >[
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            <<<<<<<<<<<-
            #dead_frame
            >-
            l1 <
            <[-]
            r1 >
            l8 <<<<<<<<
        >>>>>>>>>]
    <<<<<<<<]
    >#main
    [
        >>#main/RET_LANDING_PAD
        [
            <<<<-
            #dead_frame
            >>-
            <<#dead_fn_pad/main
            >>>>-
            l33 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        ]
        <<<<#mainloop_main
        >#F:lt
        >#F:main
        >#B:%no_b0_call_for_main
        >#B:%ret_lading_pad
        >#B:%0
        >#B:%call_term_for_0
        >#B:%call_term_for_1
        >#B:%call_term_for_2
        >#B:%call_term_for_3
        >#B:%call_term_for_4
        >#B:%call_term_for_5
        >#B:%call_term_for_6
        >#B:%call_term_for_7
        >#B:%call_term_for_8
        >#B:%3
        >#B:%6
        >#B:%7
        >#B:%10
        >#B:%call_term_for_13
        >#B:%13
        >#B:%16
        >#B:%17
        >#B:%20
        >#alloc_%1
        >#alloc_%2
        <<<<<<<<<<<<<<<<<<<<<<[
            -
            copy up args
            br label %0
            >>+
        <<]
        >>[
            -
            %1 = alloca i32_ align 4
            %2 = alloca i32_ align 4
            call @lt(i32 1_ i32 2)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>>#constop_1
            +
            op_to_reg storing const value in temp address
            >#constop_2
            ++
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_0
            +
            stack_width 33
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m26/39 <<<<<<<<<<<<<[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>#arg_1
            m27/38 <<<<<<<<<<<[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<#===FRAME_lt
            +
            >#lt
            +
            >>#lt/b0
            +
        >>]
        >[
            -
            call @lt(i32 2_ i32 1)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>>#constop_2
            ++
            op_to_reg storing const value in temp address
            >>#constop_1
            +
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<<<#caller/%call_term_for_1
            +
            stack_width 33
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m26/39 <<<<<<<<<<<<<[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>#arg_1
            m28/38 <<<<<<<<<<[->>>>>>>>>>+<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<#===FRAME_lt
            +
            >#lt
            +
            >>#lt/b0
            +
        >>>]
        >[
            -
            call @lt(i32 3_ i32 4)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>>#constop_3
            +++
            op_to_reg storing const value in temp address
            >#constop_4
            ++++
            enable next block when we return
            <<<<<<<<<<<<<<<<<<<#caller/%call_term_for_2
            +
            stack_width 33
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m26/39 <<<<<<<<<<<<<[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>#arg_1
            m27/38 <<<<<<<<<<<[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<#===FRAME_lt
            +
            >#lt
            +
            >>#lt/b0
            +
        >>>>]
        >[
            -
            call @lt(i32 3_ i32 3)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>>#constop_3
            +++
            op_to_reg storing const value in temp address
            >#constop_3
            +++
            enable next block when we return
            <<<<<<<<<<<<<<<<<<#caller/%call_term_for_3
            +
            stack_width 33
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m26/39 <<<<<<<<<<<<<[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>#arg_1
            m27/38 <<<<<<<<<<<[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<#===FRAME_lt
            +
            >#lt
            +
            >>#lt/b0
            +
        >>>>>]
        >[
            -
            call @lt(i32 4_ i32 5)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>>#constop_4
            ++++
            op_to_reg storing const value in temp address
            >#constop_5
            +++++
            enable next block when we return
            <<<<<<<<<<<<<<<<<#caller/%call_term_for_4
            +
            stack_width 33
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m26/39 <<<<<<<<<<<<<[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>#arg_1
            m27/38 <<<<<<<<<<<[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<#===FRAME_lt
            +
            >#lt
            +
            >>#lt/b0
            +
        >>>>>>]
        >[
            -
            call @lt(i32 5_ i32 6)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>>#constop_5
            +++++
            op_to_reg storing const value in temp address
            >#constop_6
            ++++++
            enable next block when we return
            <<<<<<<<<<<<<<<<#caller/%call_term_for_5
            +
            stack_width 33
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m26/39 <<<<<<<<<<<<<[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>#arg_1
            m27/38 <<<<<<<<<<<[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<#===FRAME_lt
            +
            >#lt
            +
            >>#lt/b0
            +
        >>>>>>>]
        >[
            -
            call @lt(i32 6_ i32 7)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>>#constop_6
            ++++++
            op_to_reg storing const value in temp address
            >#constop_7
            +++++++
            enable next block when we return
            <<<<<<<<<<<<<<<#caller/%call_term_for_6
            +
            stack_width 33
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m26/39 <<<<<<<<<<<<<[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>#arg_1
            m27/38 <<<<<<<<<<<[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<#===FRAME_lt
            +
            >#lt
            +
            >>#lt/b0
            +
        >>>>>>>>]
        >[
            -
            call @lt(i32 7_ i32 8)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>#constop_7
            +++++++
            op_to_reg storing const value in temp address
            >#constop_8
            ++++++++
            enable next block when we return
            <<<<<<<<<<<<<<#caller/%call_term_for_7
            +
            stack_width 33
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>>>>>>>#arg_0
            m26/39 <<<<<<<<<<<<<[->>>>>>>>>>>>>+<<<<<<<<<<<<<]
            copy up arg 1
            >>>>>>>>>>>>#arg_1
            m27/38 <<<<<<<<<<<[->>>>>>>>>>>+<<<<<<<<<<<]
            give callee a stack pointer
            >>>>>>>>>>>>>#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<#===FRAME_lt
            +
            >#lt
            +
            >>#lt/b0
            +
        >>>>>>>>>]
        >[
            -
            call @putchar(i8 10)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>#constop_10
            ++++++++++
            enable next block when we return
            <<<<<<<<<<<<#caller/%call_term_for_8
            +
            putchar intrinsic
            >>>>>>>>>>>>.
            [-]
        <<<<<<<<<<<<<]
        >[
            -
            store i32 0_ i32* %1_ align 4
            store sitch: alloca Some(24)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>>#constop_0
            
            store sitch: from ConstantOperand(ConstantRef(Int { bits: 32_ value: 0 }))
            wowowowowo _Fixed(24) __
            <<<<[-]
            m28/24 >>>>[-<<<<+>>>>]
            br label %3
            <<<<<<<<<<<<<+
        <]
        >[
            -
            %4 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%4
            #load_thru_%1_to_%4
            <<<<<<<<<<<<<<<#tmp0_for_load
            d24/28/43 <<<<[->>>>+>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]
            m28/24 >>>>[-<<<<+>>>>]
            %5 = icmp slt i32 %4_ i32 30
            op_to_reg storing const value in temp address
            <<#constop_30
            ++++++++++++++++++++++++++++++
            >>>>>>>>>>>>>>>>>#icmp_op0_i32_%4
            <<<<<<<<<<<<<<<<<#icmp_op1_i32_30
            >>>>>>>>>>>>>>>>>>#icmp_ret_%5
            <<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m26/30 <<<<<<[->>>>+<<<<]
            >>>>>>+
            >>>>>>>>>>>[
                -
                
                <<<<<<<<<<<<<[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>]
            <<<<<<<<<<<-
            <<[
                [-]
                >>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<]
            br i1 %5_ label %6_ label %20
            <<<<<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>+
                #B:main/6_true
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>>+
                #B:main/20_false
            <<<<<<<<<<<<<<<<<<<]
        >>>>>>>>>>>]
        >[
            -
            store i32 0_ i32* %2_ align 4
            store sitch: alloca Some(25)
            op_to_reg storing const value in temp address
            >>>>>>>>>>>>>#constop_0
            
            store sitch: from ConstantOperand(ConstantRef(Int { bits: 32_ value: 0 }))
            wowowowowo _Fixed(25) __
            <<<<[-]
            m29/25 >>>>[-<<<<+>>>>]
            br label %7
            <<<<<<<<<<<<+
        <]
        >[
            -
            %8 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%8
            #load_thru_%2_to_%8
            <<<<<<<<<<<<<<<<<#tmp0_for_load
            d25/28/45 <<<[->>>+>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<]
            m28/25 >>>[-<<<+>>>]
            %9 = icmp slt i32 %8_ i32 30
            op_to_reg storing const value in temp address
            <<#constop_30
            ++++++++++++++++++++++++++++++
            >>>>>>>>>>>>>>>>>>>#icmp_op0_i32_%8
            <<<<<<<<<<<<<<<<<<<#icmp_op1_i32_30
            >>>>>>>>>>>>>>>>>>>>#icmp_ret_%9
            <<<<<<<<<<<<<<<<<<<#subnu_tmpb
            >#subnu_tmp0
            >#subnu_tmp1
            m26/27 <<<[->+<]
            >>>+
            >>>>>>>>>>>>>>>>[
                -
                
                <<<<<<<<<<<<<<<<<<[
                    -
                    
                    r1 >
                ]
                r1 >
                [
                    l1 <
                ]
                l1 <
            >>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<-
            <<[
                [-]
                >>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<]
            br i1 %9_ label %10_ label %16
            <<<<<<<<<<<<<<<<<<<<<<<+
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[
                -
                <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<-
                >>>>>>>>>>>>>>+
                #B:main/10_true
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>+
                #B:main/16_false
            <<<<<<<<<<<<<<<<<]
        >>>>>>>>>>>>>]
        >[
            -
            %11 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%11
            #load_thru_%1_to_%11
            <<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d24/28/47 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            m28/24 >>>>[-<<<<+>>>>]
            %12 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>>#load_ret_%12
            #load_thru_%2_to_%12
            <<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d25/28/48 <<<[->>>+>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]
            m28/25 >>>[-<<<+>>>]
            call @lt(i32 %11_ i32 %12)
            enable next block when we return
            <<<<<<<<<#caller/%call_term_for_13
            +
            stack_width 33
            ret_pad_width 4
            copy up arg 0
            >>>>>>>>>>>>>>>>>>>>#arg_0
            m47/39 >>>>>>>>[-<<<<<<<<+>>>>>>>>]
            copy up arg 1
            <<<<<<<<<#arg_1
            m48/38 >>>>>>>>>>[-<<<<<<<<<<+>>>>>>>>>>]
            give callee a stack pointer
            <<<<<<<<#stack_ptr
            ++++++++++++++++++++++++++++++++++++++++
            l1 <
            d0/41/42 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+>+<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m42/0 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            r1 >
            r33 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<#JUMP_PAD
            +
            >>#caller
            +
            >>#caller/jump_pad_blk
            +
            r8 >>>>>>>>
            <<<<#===FRAME_lt
            +
            >#lt
            +
            >>#lt/b0
            +
        >>>>>>>>>>>>>>>]
        >[
            -
            br label %13
            >+
        <]
        >[
            -
            %14 = load i32* %2_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%14
            #load_thru_%2_to_%14
            <<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d25/28/49 <<<[->>>+>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/25 >>>[-<<<+>>>]
            %15 = add i32 %14_ i32 1
            op_to_reg storing const value in temp address
            <<#constop_1
            +
            >>>>>>>>>>>>>>>>>>>>>>>#add_op0_i32_%14
            <<<<<<<<<<<<<<<<<<<<<<<#add_op1_i32_1
            >>>>>>>>>>>>>>>>>>>>>>>>#add_ret_%15
            m49/50 <[->+<]
            <<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<]
            store i32 %15_ i32* %2_ align 4
            store sitch: alloca Some(25)
            store sitch: from LocalOperand { name: Number(15)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(25) __
            <[-]
            m50/25 >>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>]
            br label %7
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>]
        >[
            -
            br label %17
            >+
        <]
        >[
            -
            %18 = load i32* %1_ align 4
            >>>>>>>>>>>>>>>>>>>>>>>>>>>>>#load_ret_%18
            #load_thru_%1_to_%18
            <<<<<<<<<<<<<<<<<<<<<<<#tmp0_for_load
            d24/28/51 <<<<[->>>>+>>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<<<<<]
            m28/24 >>>>[-<<<<+>>>>]
            %19 = add i32 %18_ i32 1
            op_to_reg storing const value in temp address
            <<#constop_1
            +
            >>>>>>>>>>>>>>>>>>>>>>>>>#add_op0_i32_%18
            <<<<<<<<<<<<<<<<<<<<<<<<<#add_op1_i32_1
            >>>>>>>>>>>>>>>>>>>>>>>>>>#add_ret_%19
            m51/52 <[->+<]
            <<<<<<<<<<<<<<<<<<<<<<<<<[
                -
                >>>>>>>>>>>>>>>>>>>>>>>>>>+
            <<<<<<<<<<<<<<<<<<<<<<<<<<]
            store i32 %19_ i32* %1_ align 4
            store sitch: alloca Some(24)
            store sitch: from LocalOperand { name: Number(19)_ ty: TypeRef(IntegerType { bits: 32 }) }
            wowowowowo _Fixed(24) __
            <<[-]
            m52/24 >>>>>>>>>>>>>>>>>>>>>>>>>>>>[-<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>]
            br label %3
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+
        >>>>>>>]
        >[
            -
            ret void
            zero all function allocs
            >[-]
            >[-]
            <<<<<<<<<<<<<<<<<<<<<<<<<-
            #dead_frame
            >>-
            l1 <
            <<[-]
            r1 >
            l6 <<<<<<
        >>>>>>>>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<<<<<<]
<<]
